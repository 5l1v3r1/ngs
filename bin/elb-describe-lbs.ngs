#!/usr/bin/env ngs

{
	# TODO: Other fields
	# TODO: Tags

	config('table_ELBs', %[LoadBalancerName DNSName ListenerDescriptions AvailabilityZones Instances])
	# CanonicalHostedZoneName CanonicalHostedZoneNameID SecurityGroups SourceSecurityGroup Subnets Policies BackendServerDescriptions HealthCheck Scheme VPCId

	F short_dns_name(s:Str) {
		len(s) < 60 returns s
		parts = s.split('.')
		[ parts[0] + '.', parts[1..null].join('.') ]
	}

	F main(allreg:Bool=false) {

		elbs = if allreg {
			AWS::regions({``aws elb describe-load-balancers --region $A``})
		} else {
			``aws elb describe-load-balancers``
		}
		instances = {}
		instances_by_lb = {}
		if not(allreg) {
			# TODO: implement for allreg too
			instances = ``aws ec2 describe-instances``.sort('LaunchTime').Hash('InstanceId')
			# TODO: unhardcode the tags
			instances_by_lb = instances.values().group(F(i) "${i.Tags.env}-${i.Tags.role}" tor "UNKOWN")
		}
		for elb in elbs {
			elb.DNSName .= short_dns_name()
			elb.ListenerDescriptions = elb.ListenerDescriptions.map(F(ld) {
				collector {
					ld.PolicyNames % collect
					l = ld.Listener
					collect("${l.LoadBalancerPort}/${l.Protocol} -> ${l.InstancePort}/${l.InstanceProtocol}")
				}
			}).flatten()
			detached_instances = instances_by_lb.get(elb.LoadBalancerName, []).reject(F(i) i.InstanceId in elb.Instances.InstanceId)
			# echo("D $detached_instances")
			elb.Instances .= map(F(i) "${i.InstanceId} ${instances[i.InstanceId].PublicIpAddress tor instances[i.instanceId].PrivateIpAddress tor '-'}")
			elb.Instances += detached_instances.map(F(i) "[DETACHED] ${i.InstanceId} ${i.PublicIpAddress tor i.PrivateIpAddress tor '-'}")
			elb.CreatedTime .= split('T')
			# inspect(elb.ListenerDescriptions) % echo
		}
		t = Table('ELBs', elbs)
		echo(t)
	}
}

