# TODO: maybe do it with usual .o intermediate files

SHELL := /bin/bash

CC := gcc
# -gdwarf-2 -g3 -- for debugging macros
# -rdynamic -- for backtrace_symbols() to work
CFLAGS := -Wall -Wextra -gdwarf-2 -g3 -g -rdynamic
LDLIBS := -lfl -lpthread -lgc
# -pg - for gprof profiler
PROFILER_CFLAGS := $(CFLAGS) -pg
DEBUG_CFLAGS := $(CFLAGS) -DNGS_DEBUG_FLAGS=0xFFFF
NGS_TARGET_DEPS := *.c *.h Makefile

all: ngs ngs-prof ngs-debug

scanner.lex:
	# nothing
parser.y:
	# nothing

parser.h: parser.y
	bison --defines=parser.h -o parser.c parser.y

parser.c: parser.y
	bison --defines=parser.h -o parser.c parser.y

scanner.c: scanner.lex Makefile
	flex -o $@ $<
	# Eliminate warnings about unused variables in generated code which is not even generated by me.
	sed -i '/^\(static\|void\).*\(yyalloc\|yyrealloc\|yyfree\|yy_fatal_error\) /{s/\(, *yyscan_t yyscanner\)/\1 __attribute__((__unused__))/}' $@

ngs: $(NGS_TARGET_DEPS)
	$(CC) $(CFLAGS) -o $@ ngs.c $(LDLIBS)

ngs-prof: $(NGS_TARGET_DEPS)
	$(CC) $(PROFILER_CFLAGS) -o $@ ngs.c $(LDLIBS)

ngs-debug: $(NGS_TARGET_DEPS)
	$(CC) $(DEBUG_CFLAGS) -o $@ ngs.c $(LDLIBS)

# Micro bechmark but it's still something
time-sum: ngs
	# About 3.5 seconds on my laptop
	time ./ngs < <(echo '{s=0;for i=0 i<10000000 i=i+1 s=s+i}')
	# About 1.2 seconds / perl 5.20.2
	time perl -e '$$s=0; for($$i=0; $$i<10000000; $$i++) { $$s+=$$i}'
	# About 7 seconds, 10x less work / bash 4.3.30
	time bash -c 's=0; for ((i=0;i<1000000;i=i+1));do s=$$((s+i));done; '
	# About 0.7 seconds / ruby 2.1.5p273
	time ruby -e 's=0; for i in 0...10000000 do s=s+i end'

clean:
	-rm parser.h parser.c
	-rm scanner.c
	-rm ngs

tags: *.c *.h
	ctags $^
