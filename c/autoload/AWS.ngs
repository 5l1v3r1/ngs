{
	AWS = true

	# --------------------------------------------------
	# Constants
	# --------------------------------------------------

	# From https://wiki.debian.org/Cloud/AmazonEC2Image/Jessie
	AWS_AMI_OWNER_DEBIAN = '379101102735'
	AWS_AMI_OWNER_AMAZON = '801119661308'

	# TODO: separate validation just on anchor so it could be used for find()
	#       currently validate() can only be used for converge() because it
	#       check properties.

	# --------------------------------------------------
	# Misc utilities
	# --------------------------------------------------

	F stdlib_aws_tags(h:Hash) h / "Key=$X,Value=$Y"

	F stdlib_aws_filters(h:Hash) {
		hh = h.mapv(F(v) {
			econd {
				v is Pfx "${v.val}*"
				true v
			}
		})
		ret = hh / "Name=$X,Values=$Y"
		ret returns ['--filters'] + ret
		[]
	}

	aws_cached_regions = null

	F aws_regions() aws_cached_regions = ``aws ec2 describe-regions``.RegionName.sort()

	F aws_regions() {
		guard aws_cached_regions
		aws_cached_regions
	}

	F aws_regions(cb:Fun) {
		regions = aws_regions()
		regions.pmap(F(r) {
			data = cb(r)
			data % { A.Region = r }
			data
		}).flatten()
	}

	# --------------------------------------------------
	# AwsAnchor
	# --------------------------------------------------

	type AwsAnchor(Props)

	F init(a:AwsAnchor, **kw)  {
		a.super(**kw)
		a.dflt('regions', null)
		a.dflt('tags', {})
	}

	# --------------------------------------------------
	# AwsResFindCommand
	# --------------------------------------------------

	type AwsResFindCommand

	F init(c:AwsResFindCommand, cmd:Arr, supports_filters:Bool) init(args())

	# --------------------------------------------------
	# AwsRes
	# --------------------------------------------------

	type AwsRes(Res)

	F run(r:AwsRes, log_pfx:Str, cmd:Command) r.def.run(log_pfx, cmd)

	F update_tags(r:AwsRes) {
		# Tags
		if 'Tags' not in r.def.props {
			r.def.log('update_tags/skip', 'Not updating tags - no tags specified in properties')
			return null
		}
		target_tags = r.def.props.Tags
		if r.def.anchor is AwsAnchor {
			# Definition props tags override anchor tags
			target_tags = r.def.anchor.tags + target_tags
		}
		current_tags = r.props.get('Tags', {})
		r.def.log('update_tags/info', "Current tags: $current_tags. Target tags: $target_tags")
		diff = cmp(current_tags, target_tags)

		if (tags = stdlib_aws_tags(diff.add + diff.change)) {
			r.run('update_tags/add', %(aws ec2 create-tags --resources ${r.id()} --tags $*tags))
		}

		if (tags = diff.remove / "Key=$X") {
			r.run('update_tags/remove', %(aws ec2 delete-tags --resources ${r.id()} --tags $*tags))
		}
	}

	# --------------------------------------------------
	# AwsResDef
	# --------------------------------------------------

	type AwsResDef(ResDef)

	F run(rd:AwsResDef, log_pfx:Str, cmd:Command) {
		if rd.dry_run {
			rd.log("run/$log_pfx", "would run: ${cmd.argv.join(' ')}")
		} else {
			rd.log("run/$log_pfx", "running: ${cmd.argv.join(' ')}")
			``$cmd``
		}
	}

	F find(rd:AwsResDef) {
		# XXX: invalid code because misses straightening
		cmd = _get_find_command(rd)
		c = cmd.cmd
		filters = if cmd.supports_filters {
			['--filters', *(rd.anchor / "Name=tag-key,Values=$X,Name=tag-value,Values=$Y")]
		} else {
			[]
		}
		debug("Filters: $filters")
		resources = ``$*c $*filters``

		# echo("resources $resources")
		if not(cmd.supports_filters) {
			throw NotImplemented("AwsResFindCommand with supports_filters=false is not implemented yet")
		}
		rd.log('find', "found ${resources.len()} ${rd.typeof().name} resources")

		t = rd._get_res_type()
		rd.resources = resources / t(rd, X)
		rd
	}

	# --------------------------------------------------
	# AwsVpc
	# --------------------------------------------------

	type AwsVpc(AwsResDef)
	type AwsVpcRes(AwsRes)

	F _get_res_type(rd:AwsVpc) AwsVpcRes

	F _get_find_command(rd:AwsVpc) {
		AwsResFindCommand(%[aws ec2 describe-vpcs], true)
	}

	F ids(rd:AwsVpc) rd.resources.props.VpcId

	F Str(r:AwsVpc) {
		t = if r.resources is Null {
			''
		} else {
			" ${r.ids().join(',')}"
		}
		"<AwsVpc$t anchor=${r.anchor}>"
	}

	# --------------------------------------------------
	# AwsSecGroup
	# --------------------------------------------------

	type AwsSecGroup(AwsResDef)
	type AwsSecGroupRes(AwsRes)

	F ids(rd:AwsSecGroup) rd.resources.props.GroupId
	F users_ids(r:AwsSecGroup) r.resources / F(res) { {'GroupId': res.props.GroupId, 'UserId': res.props.OwnerId} }

	F _get_res_type(rd:AwsSecGroup) AwsSecGroupRes

	F _get_find_command(rd:AwsSecGroup) {
		AwsResFindCommand(%[aws ec2 describe-security-groups], true)
	}

	F validate(rd:AwsSecGroup) {
		(rd.anchor is not Arr) throws
			InvalidArgument("AwsSecGroup's anchor must be an array")
		('Description' not in rd.props) throws
			InvalidArgument("AwsSecGroup must have the 'description' property")
	}

	F vpc_id(rd:AwsSecGroup) rd.anchor[1]

	F vpc_id(rd:AwsSecGroup) {
		guard rd.anchor[1] is AwsResDef
		assert(rd.anchor[1].len() == 1, "AwsSecGroup expects exactly one vpc-id but passed resource ${rd.anchor[1]} has zero or more than one")
		rd.anchor[1].ids()[0]
	}

	F vpc_id_args(rd:AwsSecGroup) ['--vpc-id', vpc_id(rd)]

	F vpc_id_args(rd:AwsSecGroup) {
		guard vpc_id(rd) is Null
		[]
	}

	F vpc_id_filter(rd:AwsSecGroup) ['--filters', "Name=vpc-id,Values=${vpc_id(rd)}"]

	F vpc_id_filter(rd:AwsSecGroup) {
		guard vpc_id(rd) is Null
		[]
	}

	F id(sg:AwsSecGroupRes) sg.props.GroupId

	F find(rd:AwsSecGroup) {
		rd.log('find', 'SG')
		# XXX: check with default VPC / EC2 classic
		# Can not use --group-names as it will assume default VPC / EC2 classic
		resources = ``aws ec2 describe-security-groups $*{vpc_id_filter(rd)}``.filter(F(sg) sg.GroupName == rd.anchor[0])
		assert(resources.len() <= 1, "Can only work with one security group at a time")
		known_props = %[GroupName GroupId OwnerId Description IpPermissions IpPermissionsEgress Tags]
		resources .= map(F(res) {
			AwsSecGroupRes(rd, res ? known_props.has(X))
		})
		rd.resources = resources
		rd
	}

	type IpPermBox(FullBox)

	# Cleans up AWS Security Group IpPermissions so it's possible to compare current and desired states of IpPermissions
	F cleanup(x:IpPermBox) {
		ret = x.val
		ret .= filter(F(k, v) (v is not Arr) or v)
		ret .= without('IpRanges', [{"CidrIp": "0.0.0.0/0"}])
		if 'UserIdGroupPairs' in ret {
			# Hash is ordered. The right order for comparison is GroupId and then UserId
			ret.UserIdGroupPairs .= map(F(pair) { {'GroupId': pair.GroupId, 'UserId': pair.UserId } })
		}
		ret
	}

	F ==(a:IpPermBox, b:IpPermBox) {
		a .= cleanup()
		b .= cleanup()
		a.len() != b.len() returns false
		diff = cmp(a, b)
		not(diff.add or diff.remove or diff.change)
	}

	F create(rd:AwsSecGroup) {
		rd.log('create', 'SG')
		rd.run('create SG', %(aws ec2 create-security-group --group-name ${rd.anchor[0]} --description ${rd.props.Description} $*{vpc_id_args(rd)}))
		if not(rd.dry_run) {
			rd.find()
		}
	}

	F update(sg:AwsSecGroupRes) {

		sg.def.log('update', 'SG')

		if 'IpPermissions' in sg.def.props {
			diff = compare(sg.props.IpPermissions/IpPermBox, sg.def.props.IpPermissions/IpPermBox)
			if diff.add {
				sg.run('add SG ingress rules', %(aws ec2 authorize-security-group-ingress --group-id ${sg.props.GroupId} --ip-permissions $*{diff.add.val / encode_json}))
			}
			if diff.remove {
				sg.run('remove SG ingress rules', %(aws ec2 revoke-security-group-ingress --group-id ${sg.props.GroupId} --ip-permissions $*{diff.remove.val / encode_json}))
			}
		}

		sg.update_tags()
	}

	# --------------------------------------------------
	# AwsSubnet
	# --------------------------------------------------

	type AwsSubnet(AwsResDef)
	type AwsSubnetRes(AwsRes)

	F ids(rd:AwsSubnet) rd.resources.props.SubnetId

	F _get_res_type(rd:AwsSubnet) AwsSubnetRes

	F _get_find_command(rd:AwsSubnet) {
		AwsResFindCommand(%[aws ec2 describe-subnets], true)
	}

	# --------------------------------------------------
	# AwsImage
	# --------------------------------------------------

	type AwsImage(AwsResDef)
	type AwsImageRes(AwsRes)

	# debian-jessie-amd64-hvm
	F find(rd:AwsImage) {
		owners = ['--owners', rd.anchor.OwnerId] tor []
		filters = %{
			state available
			virtualization-type hvm
		}
		if (try rd.anchor.Name is Str) or (try rd.anchor.Name is Pfx) {
			filters.name = rd.anchor.Name
		}
		if try rd.anchor.State is Str {
			filters.state = rd.anchor.State
		}
		try filters['root-device-type'] = rd.anchor.RootDeviceType
		try filters['block-device-mapping.volume-type'] = rd.anchor.VolumeType
		filters .= stdlib_aws_filters()
		resources = ``aws ec2 describe-images $*owners $*filters``
		if 'Name' in rd.anchor {
			resources .= filter({A.Name ~ rd.anchor.Name})
		}
		rd.resources = resources / AwsImageRes(rd, X)
		rd.log('find', "found ${resources.len()} ${rd.typeof().name} resources")
		rd
	}

	F latest(rd:AwsImage) {
		if rd.resources is Null {
			rd.find()
		}
		assert(rd.resources.len() >= 1, "Can not find latest() image because there are no images")
		rd.resources = [rd.resources.sort({ A.props.CreationDate <= B.props.CreationDate })[-1]]
		rd
	}

	F ids(rd:AwsImage) rd.resources.props.ImageId


	# --------------------------------------------------
	# AwsInstance
	# --------------------------------------------------

	type AwsInstance(AwsResDef)
	type AwsInstanceRes(AwsRes)

	F stdlib_aws_instance_anchor(rd:AwsInstance) {
		anchor = econd {
			rd.anchor is AwsAnchor { rd.anchor }
			rd.anchor is Hash     { AwsAnchor(tags=rd.anchor) }
		}
		anchor
	}

	# TODO: setting rd.anchor is wrong, should be in some other place
	F validate(rd:AwsInstance) {
		rd.anchor = rd.stdlib_aws_instance_anchor();
		%[ImageId].each(F(prop_name) {
			prop_name not in rd.anchor throws InvalidArgument("Anchor must contain $prop_name")
		})
	}

	F find(rd:AwsInstance) {
		# XXX: invalid code because misses straightening
		anchor = rd.stdlib_aws_instance_anchor()

		filters = ['--filters', 'Name=instance-state-name,Values=running']

		if anchor.tags {
			filters += anchor.tags / "Name=tag-key,Values=$X,Name=tag-value,Values=$Y"
		}
		debug("Filters: $filters")

		regions = cond {
			anchor.regions is Arr { anchor.regions }
			anchor.regions == '*' { aws_regions() }
		}

		resources = if regions {
			instances = regions.pmap(F(r) {
				ins = ``aws ec2 describe-instances --region $r $*filters``
				ins % F(i) i.Region = r
				ins
			}).flatten()
			# .filter(F(i) try i.PublicIpAddress)
		} else {
			``aws ec2 describe-instances $*filters``
		}

		if regions {
			rd.log('find', "found ${resources.len()} ${rd.typeof().name} resources in ${resources.group({A.Region}).len()} regions (${resources.group({A.Placement.AvailabilityZone}).len()} zones)")
		} else {
			rd.log('find', "found ${resources.len()} ${rd.typeof().name} resources in ${resources.group({A.Placement.AvailabilityZone}).len()} zones)")
		}

		rd.resources = resources / AwsInstanceRes(rd, X)
		rd
	}

	F ids(rd:AwsInstance) rd.resources.props.InstanceId

	# TODO: Support multiple NICs?
	F create(rd:AwsInstance) {
		rd.log('create', 'Instance')
		assert(rd.resources is not Null, "Creating an instance assumes find() already run")
		args = []
		args += ['--key-name', rd.props.KeyName] tor []

		sgs = _sgs(rd)
		if sgs {
			args += ['--security-group-ids', *sgs]
		}

		# TODO: Support AwsRes SubnetId?
		args += ['--subnet-id', rd.props.SubnetId] tor []

		if rd.props.get('PublicIpAddress', null) is Bool {
			args += [if rd.props.PublicIpAddress '--associate-public-ip-address' '--no-associate-public-ip-address']
		}


		result = rd.run('create Instance', %(aws ec2 run-instances --image-id ${rd._image_id()} $*args))
		if not(rd.dry_run) {
			rd.resources += result.Instances / AwsInstanceRes(rd, X)
		}
	}

	# TODO: Support EC2 classic?
	F update(instance:AwsInstanceRes) {
		instance.def.log('update', 'Instance')
		instance.update_tags()

		current_sgs = instance.props.SecurityGroups.GroupId
		target_sgs = _sgs(instance.def)
		diff = cmp(current_sgs, target_sgs)
		if diff.add or diff.remove {
			diff.add    % { instance.def.log('update', "${instance.id()} - Adding SG $A") }
			diff.remove % { instance.def.log('update', "${instance.id()} - Removing SG $A") }
			instance.def.run('Set security groups', %(aws ec2 modify-instance-attribute --instance-id ${instance.id()} --groups $*target_sgs))
		}
	}

	# Needed for update_tags()
	F id(instance:AwsInstanceRes) instance.props.InstanceId

	# TODO: Support EC2 classic?
	# TODO: Handle SGS in Anchor?
	F _sgs(rd:AwsInstance) {
		if 'SecurityGroups' in rd.props {
			ret = rd.props.SecurityGroups
			if ret is AwsResDef {
				ret .= ids()
			}
			return ret
		}
		[]
	}

	F _image_id(rd:AwsInstance) {
		guard rd.anchor.ImageId is AwsImage
		assert(rd.anchor.ImageId.resources.len() == 1, "Expecting exacty one image described by AwsImage resource defeinition")
		rd.anchor.ImageId.ids()[0]
	}

	F _image_id(rd:AwsInstance) {
		guard rd.anchor.ImageId is Str
		rd.anchor.ImageId
	}

	# --------------------------------------------------
	# AwsElb
	# --------------------------------------------------

	type AwsElb(AwsResDef)
	type AwsElbRes(AwsRes)

	F ids(rd:AwsElb) throw NotImplemented("ids() method for AwsElb is not implemented")

	F validate(rd:AwsElb) {
		rd.anchor is not Str throws InvalidArgument("AwsElb is the ELB name and must be a string, not ${rd.anchor}")
		rd.count > 1 throws InvalidArgument("AwsElb can only handle one instance at a time while desired count is ${rd.count}")
		'ListenerDescriptions' not in rd.props throws InvalidArgument("AwsElb must have 'listeners' property")

		('AvailabilityZones' not in rd.props) and ('Subnets' not in rd.props) throws InvalidArgument("Either 'azs' or 'subnets' must be in AwsElb properties")
		'AvailabilityZones' in rd.props throws NotImplemented("'AvailabilityZones' AwsElb property")
	}

	F find(rd:AwsElb) {
		rd.log('find', "ELB")
		resources = ``aws elb describe-load-balancers``.filter(F(desc) desc.LoadBalancerName == rd.anchor)
		assert(resources.len() <= 1, "Can only work with one load balancer at a time")
		known_props = %[LoadBalancerName AvailabilityZones SecurityGroups ListenerDescriptions Subnets Scheme HealthCheck Instances]
		rd.resources = resources.map(F(props) {
			ret = props ? known_props.has(X)
			ret.Instances = props.Instances.InstanceId
			# TODO: make it lazy
			rd.log('find', "ELB tags")
			ret.Tags = ``aws elb describe-tags --load-balancer-names ${rd.anchor}``[0].Tags
			AwsElbRes(rd, ret)
		})
		rd
	}

	F create(rd:AwsElb) {
		rd.log('create', "creating an ELB")
		subnets = try rd.props.Subnets
		if subnets is AwsResDef {
			subnets .= ids()
		}
		if subnets {
			subnets = ['--subnets', *subnets]
		}
		rd.run('create ELB', %(aws elb create-load-balancer --load-balancer-name ${rd.anchor} --listeners ${rd.props.ListenerDescriptions.encode_json()} $*subnets))
		if not(rd.dry_run) {
			rd.find()
		}
	}

	F update(elb:AwsElbRes) {
		elb.def.log('update', 'ELB')

		# Tags
		diff = cmp(elb.props.get('Tags', {}), elb.def.props.get('Tags', {}))

		if (tags = stdlib_aws_tags(diff.add + diff.change)) {
			elb.run('add ELB tags', %(aws elb add-tags --load-balancer-names ${elb.def.anchor} --tags $*tags))
		}

		if (tags = diff.remove) {
			elb.run('remove ELB tags', %(aws elb remove-tags --load-balancer-names ${elb.def.anchor} --tags $*tags))
		}

		# Health check. Note: only updates given properties and keeps the rest as they were.
		if 'HealthCheck' in elb.def.props {
			diff = cmp(elb.props['HealthCheck'], elb.def.props['HealthCheck'])
			assert(not(diff.add), "Can't handle additional health check properties ${diff.add}")
			if diff.change {
				elb.def.log('update', "ELB health check change: ${diff.change}")
				t = elb.props['HealthCheck'] + diff.change
				elb.run(
					'update ELB health check',
					%(aws elb configure-health-check --load-balancer-name ${elb.def.anchor} --health-check ${t.encode_json()})
				)
			}
		}

		# Instances
		if 'Instances' in elb.def.props {
			instances = elb.def.props.Instances
			if instances is AwsResDef {
				instances .= ids()
			}
			diff = cmp(elb.props.Instances, instances)
			if diff.add {
				elb.run(
					'register instances with ELB',
					%(aws elb register-instances-with-load-balancer --load-balancer-name ${elb.def.anchor} --instances $*{diff.add})
				)
			}
			if diff.remove {
				elb.run(
					'deregister instances from ELB',
					%(aws elb deregister-instances-from-load-balancer --load-balancer-name ${elb.def.anchor} --instances $*{diff.remove})
				)
			}
		}

		# Security groups
		if 'SecurityGroups' in elb.def.props {
			sgs = elb.def.props.SecurityGroups
			if sgs is AwsResDef {
				sgs .= ids()
			}
			diff = cmp(elb.props.SecurityGroups, sgs)
			if diff.add or diff.remove {
				elb.run(
					'update ELB SGs',
					%(aws elb apply-security-groups-to-load-balancer --load-balancer-name ${elb.def.anchor} --security-groups $*{sgs})
				)
			}
		}

		# TODO: listeners
		diff = cmp(elb.props.ListenerDescriptions, elb.def.props.ListenerDescriptions)
		# echo("DIFF $diff")
	}

	F delete(elb:AwsElb) {
		elb.run('delete ELB', %(aws elb delete-load-balancer --load-balancer-name ${elb.anchor}))
	}

	# --------------------------------------------------
	# AwsRecordSet
	# --------------------------------------------------

	# http://docs.aws.amazon.com/cli/latest/reference/route53/change-resource-record-sets.html

	# Anchor: [record_name, domain_name]. Most specific first to be unifrom with Subnet
	# Maybe support array or *-style wildcard for record_name?
	# Maybe support anchor hosted-zone-id in the future? Don't currently see how this could be useful.

	type AwsRecordSet(AwsResDef)
	type AwsRecordSetRes(AwsRes)

	F validate(rd:AwsRecordSet) {
		%[Name ZoneName].each(F(prop_name) {
			prop_name not in rd.anchor throws InvalidArgument("Anchor must contain $prop_name")
			not(rd.anchor[prop_name] ~ Sfx('.')) throws InvalidArgument("$prop_name (${rd.anchor[prop_name]}) must end with a dot")
		})
		"todo"
	}

	F find(rd:AwsRecordSet) {
		rd.log('find', 'RecordSet')
		anchor = rd.anchor
		zones = ``aws route53 list-hosted-zones-by-name --dns-name ${anchor.ZoneName} --max-items 1``

		assert(zones.len() == 1 and zones[0].Name == anchor.ZoneName, "Zone ${anchor.ZoneName} not found when trying to create an AwsRecordSet in it")
		zone_id = zones[0].Id
		rd.zone_id = zone_id

		type_args = if 'Type' in anchor {
			['--start-record-type', anchor.Type]
		} else {
			[]
		}

		rrs = ``aws route53 list-resource-record-sets --hosted-zone-id $zone_id --start-record-name ${anchor.Name} $*type_args``

		rrs .= filter({A.Name == anchor.Name})

		if 'Type' in anchor {
			rrs .= filter({A.Type == anchor.Type})
		}

		if 'SetIdentifier' in anchor {
			rrs .= filter({A.SetIdentifier == anchor.SetIdentifier})
		}

		rd.resources = rrs / AwsRecordSetRes(rd, X)
		rd
	}

	F _get_props(rd:AwsRecordSet) {
		ret = {}
		ret.update(rd.props)
		%[Name Type SetIdentifier].each(F(prop) {
			if prop in rd.anchor and prop not in ret {
				ret[prop] = rd.anchor[prop]
			}
		})
		ret
	}

	F create(rd:AwsRecordSet) {
		change_batch = {
			'Comment': rd.props.get('Comment', "Added by AWS.ngs")
			'Changes': [{
				'Action': 'CREATE'
				'ResourceRecordSet': _get_props(rd)
			}]
		}
		rd.run('create AwsRecordSet', %(aws route53 change-resource-record-sets --hosted-zone-id ${rd.zone_id} --change-batch ${change_batch.encode_json()}))
		if not(rd.dry_run) {
			rd.find()
		}
	}

	F update(rrset:AwsRecordSetRes) {
		props = _get_props(rrset.def)
		diff = cmp(rrset.props, props)
		# NOT DONE AND NOT SURE!
		if diff.add or diff.change or diff.remove {
			change_batch = {
				'Comment': rrset.def.props.get('Comment', "Updated by AWS.ngs")
				'Changes': [{
					'Action': 'UPSERT'
					'ResourceRecordSet': _get_props(rrset.def)
				}]
			}
			rrset.run('update AwsRecordSet', %(aws route53 change-resource-record-sets --hosted-zone-id ${rrset.def.zone_id} --change-batch ${change_batch.encode_json()}))
		}
	}

	# --------------------------------------------------
	# AwsBucket
	# --------------------------------------------------

	# TODO

}
