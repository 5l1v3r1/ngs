{
	# WIP, don't use!

	# TODO: order cur_props so that for example delete() dry run and real run would be consistent
	# TODO: correct interaction of dry_run when a resource A would be created and
	#       resource B references resource A in properties.
	# TODO: point to an existing resource and get the code for it
	# TODO: generate code for given resource type with all possible properties - makes good starting point

	AWS = true

	doc Converts tags hash to AWS command line arguments
	F stdlib_aws_tags(h:Hash) h.map(F(k, v) "Key=${k},Value=${v}")

	# --------------------------------------------------
	doc Command used to find resource instances
	type AwsCommand

	F init(c:AwsCommand, cmd:Arr, supports_filters:Bool) {
		c.cmd = cmd
		c.supports_filters = supports_filters
	}


	# --------------------------------------------------
	doc Represents any AWS resource such as an instance, an ELB or a security group
	type AwsResource

	doc ancor - how to find a resource if it exists
	doc desired_props - properties to set on new or existing resource instances
	F init(r:AwsResource, ancor, desired_props:Hash) {
		# TODO: special case: ancor is Null - always create the resource?
		assert(ancor.Bool(), "Ancor must contain something")
		r.ancor = ancor
		r.desired_props = desired_props
		r.cur_props = null
		r.desired_count = try r.desired_props.META.count catch(e) 1
		r.dry_run = try r.desired_props.META.dry_run catch(e) false
		if 'DRY_RUN' in ENV {
			r.dry_run = true
		}
	}

	F init(r:AwsResource, ancor) init(r, ancor, {})

	F log(r:AwsResource, method:Str, s:Str) {
		log("[${r.typeof().name} ancor=${r.ancor}] [${method}] $s")
	}

	F expect(r:AwsResource, e:Int) {
		r.find()
		assert(r.len() == e, "Expected exactly ${e} ${r.typeof().name} resource instances but found ${r.len()}")
		r
	}

	F expect(r:AwsResource) {
		r.find()
		assert(r.len() > 0, "Expected one or more ${r.typeof().name} resource instances but found none")
		r
	}

	F find(r:AwsResource) {
		# XXX: invalid code because misses straightening
		cmd = _find_cmd(r)
		c = cmd.cmd
		filters = if cmd.supports_filters {
			['--filters', *(r.ancor.map(F(k, v) "Name=tag-key,Values=${k},Name=tag-value,Values=${v}"))]
		} else {
			[]
		}
		debug("Filters: $filters")
		cur_props = ``$*c $*filters``

		# echo("cur_props $cur_props")
		if not(cmd.supports_filters) {
			# manual filter then
			cur_props .= filter(F(x) r.ancor.all(F(k, v) try r.Tags[k] == v))
		}
		r.log('find', "found ${cur_props.len()} ${r.typeof().name} resource instances")

		r.cur_props = cur_props
		r.cur_props
	}

	F converge(r:AwsResource) {
		r.validate()
		r.find()
		n = r.desired_count
		r.log('converge', "desired count of ${r.typeof().name}: ${n}")
		if n < r.cur_props.len() {
			r.log('converge', 'deleting extra resource instances')
			r.cur_props[n..null].each(F(x) r.delete(x))
			r.cur_props = r.cur_props[0..n]
		}
		if n > r.cur_props.len() {
			for(i=r.cur_props.len(); i<n; i+=1) {
				r.log('converge', "creating resource instance ${r.typeof().name} #${i+1}")
				create(r)
			}
		}
		r.cur_props.each(F(x) r.update(x))
	}

	F run(r:AwsResource, log_pfx:Str, cmd:Command) {
		if r.dry_run {
			r.log("run - $log_pfx", "would run: ${cmd.argv.join(' ')}")
		} else {
			r.log("run - $log_pfx", "running: ${cmd.argv.join(' ')}")
			$($cmd)
		}
	}

	F len(r:AwsResource) r.cur_props.len()

	F code(r:AwsResource) {
		ret = r.cur_props.map(F(props) r.code(props))
		if ret.len() == 1 {
			ret = ret[0]
		}
		ret.code()
	}

	# --------------------------------------------------
	type AwsElb(AwsResource)

	F find(r:AwsElb) {
		r.log('find', "ELB")
		r.cur_props = ``aws elb describe-load-balancers``.filter(F(desc) desc.LoadBalancerName == r.ancor)
		assert(r.cur_props.len() <= 1, "Can only work with one load balancer at a time")
		r.cur_props .= map(F(props) {
			# Straighten Aws output to match CLI arguments
			translation = %{
				LoadBalancerName name

				AvailabilityZones availability-zones
				SecurityGroups security-groups
				ListenerDescriptions listeners
				Subnets subnets
				Scheme scheme
				HealthCheck health-check
			}
			ret = collector/{}
				translation.each(F(k, v) {
					if k in props {
						collect(v, props[k])
					}
				})
			ret.instances = props.Instances.InstanceId
			r.log('find', "ELB tags")
			ret.tags = ``aws elb describe-tags --load-balancer-names ${r.ancor}``[0].Tags
			ret
		})
	}

	F validate(r:AwsElb) {
		r.ancor is not Str throws InvalidArgument("AwsElb is the ELB name and must be a string, not ${r.ancor}")
		r.desired_count > 1 throws InvalidArgument("AwsElb can only handle one instance at a time while desired count is ${r.desired_count}")
		'listeners' not in r.desired_props throws InvalidArgument("AwsElb must have 'listeners' property")

		('azs' not in r.desired_props) and ('subnets' not in r.desired_props) throws InvalidArgument("Either 'azs' or 'subnets' must be in AwsElb properties")
		'azs' in r.desired_props throws NotImplemented("'azs' AwsElb property")
	}

	F create(r:AwsElb) {
		r.log('create', "creating an ELB")
		subnets = try r.desired_props.subnets
		if subnets is AwsResource {
			subnets .= ids()
		}
		if subnets {
			subnets = ['--subnets', *subnets]
		}
		r.run('create ELB', %(aws elb create-load-balancer --load-balancer-name ${r.ancor} --listeners ${r.desired_props.listeners.encode_json()} $*subnets))
		if not(r.dry_run) {
			r.find()
		}
	}


	F update(r:AwsElb, cur_props:Hash) {
		r.log('update', 'ELB')

		# Tags
		diff = cmp(cur_props.tags, r.desired_props.get('tags', {}))

		if (tags = stdlib_aws_tags(diff.add + diff.change)) {
			r.run('add ELB tags', %(aws elb add-tags --load-balancer-names ${r.ancor} --tags $*tags))
		}

		if (tags = diff.remove) {
			r.run('remove ELB tags', %(aws elb remove-tags --load-balancer-names ${r.ancor} --tags $*tags))
		}

		# Health check. Note: only updates given properties and keeps the rest as they were.
		if 'health-check' in r.desired_props {
			diff = cmp(cur_props['health-check'], r.desired_props['health-check'])
			assert(not(diff.add), "Can't handle additional health check properties ${diff.add}")
			if diff.change {
				r.log('update', "ELB health check change: ${diff.change}")
				t = cur_props['health-check'] + diff.change
				r.run(
					'update ELB health check',
					%(aws elb configure-health-check --load-balancer-name ${r.ancor} --health-check ${t.encode_json()})
				)
			}
		}

		# Instances
		if 'instances' in r.desired_props {
			instances = r.desired_props.instances
			if instances is AwsResource {
				instances .= ids()
			}
			diff = cmp(cur_props['instances'], instances)
			if diff.add {
				r.run(
					'register instances with ELB',
					%(aws elb register-instances-with-load-balancer --load-balancer-name ${r.ancor} --instances $*{diff.add})
				)
			}
			if diff.remove {
				r.run(
					'deregister instances from ELB',
					%(aws elb deregister-instances-from-load-balancer --load-balancer-name ${r.ancor} --instances $*{diff.remove})
				)
			}
		}

		# Security groups
		if 'security-groups' in r.desired_props {
			sgs = r.desired_props['security-groups']
			if sgs is AwsResource {
				sgs .= ids()
			}
			diff = cmp(cur_props['security-groups'], sgs)
			if diff.add or diff.remove {
				r.run(
					'update ELB SGs',
					%(aws elb apply-security-groups-to-load-balancer --load-balancer-name ${r.ancor} --security-groups $*{sgs})
				)
			}
		}

		# TODO: listeners
		diff = cmp(cur_props['listeners'], r.desired_props.listeners)
		# echo("DIFF $diff")
	}

	F delete(r:AwsElb, resource:Hash) {
		r.run('delete ELB', %(aws elb delete-load-balancer --load-balancer-name ${r.ancor}))
	}

	# --------------------------------------------------
	type AwsSubnet(AwsResource)

	F _find_cmd(r:AwsSubnet) AwsCommand(%[aws ec2 describe-subnets], true)
	# Add sort()?
	F ids(r:AwsSubnet) r.cur_props.SubnetId

	# --------------------------------------------------
	type AwsInstance(AwsResource)
	F _find_cmd(r:AwsInstance) AwsCommand(%[aws ec2 describe-instances], true)
	F ids(r:AwsInstance) r.cur_props.InstanceId

	# --------------------------------------------------
	doc Ancor is [group_name, vpc_id]
	type AwsSecGroup(AwsResource)
	F _find_cmd(r:AwsSecGroup) AwsCommand(%[aws ec2 describe-security-groups], true)
	F ids(r:AwsSecGroup) r.cur_props.id

	F validate(r:AwsSecGroup) {
		(r.ancor is not Arr) throws InvalidArgument("AwsSecGroup's ancor must be an array")
		('description' not in r.desired_props) throws InvalidArgument("AwsSecGroup must have the 'description' property")
	}

	F vpc_id(r:AwsSecGroup) {
		if r.ancor[1] is not AwsResource returns r.ancor[1]
		assert(r.ancor[1].len() == 1, "AwsSecGroup expects exactly one vpc-id but passed resource ${r.ancor[1]} has zero or more than one")
		r.ancor[1].ids()[0]
	}

	F vpc_id_args(r:AwsSecGroup) ['--vpc-id', vpc_id(r)].nuke_null()

	F vpc_id_filter(r:AwsSecGroup) ['--filters', "Name=vpc-id,Values=${vpc_id(r)}"]

	F vpc_id_filter(r:AwsSecGroup) {
		guard vpc_id(r) is Null
		[]
	}

	F find(r:AwsSecGroup) {
		r.log('find', 'SG')
		# XXX: check with default VPC / EC2 classic
		# Can not use --group-names as it will assume default VPC / EC2 classic
		r.cur_props = ``aws ec2 describe-security-groups $*{vpc_id_filter(r)}``.filter(F(sg) sg.GroupName == r.ancor[0])
		assert(r.cur_props.len() <= 1, "Can only work with one security group at a time")
		r.cur_props .= map(F(props) {
			# Straighten Aws output to match CLI arguments
			translation = %{
				GroupName name
				GroupId id
				Description description

				IpPermissions ip-permissions-ingress
				IpPermissionsEgress ip-permissions-egress

				Tags tags
			}
			ret = collector/{}
				translation.each(F(k, v) {
					if k in props {
						collect(v, props[k])
					}
				})
			# echo("RET $ret")
			ret
		})
	}

	F create(r:AwsSecGroup) {
		r.log('create', 'SG')
		r.run('create SG', %(aws ec2 create-security-group --group-name ${r.ancor[0]} --description ${r.desired_props.description} $*{vpc_id_args(r)}))
		if not(r.dry_run) {
			r.find()
		}
	}

	type IpPermBox(FullBox)

	F empty_array(a) false
	F empty_array(a:Arr) not(a)

	F ==(a:IpPermBox, b:IpPermBox) {
		# echo("CMP1 a=${a} b=${b}")
		a = a.val.filter(F(k, v) not(empty_array(v)))
		b = b.val.filter(F(k, v) not(empty_array(v)))
		a.len() != b.len() returns false
		diff = cmp(a, b)
		not(diff.add or diff.remove or diff.change)
	}

	F update(r:AwsSecGroup, cur_props:Hash) {
		r.log('update', 'SG')
		# echo("CUR: $cur_props")

		if 'ip-permissions-ingress' in r.desired_props {
			diff = compare(cur_props['ip-permissions-ingress'].map(IpPermBox), r.desired_props['ip-permissions-ingress'].map(IpPermBox))
			# echo("DIFF: $diff")
			diff.add.each(F(perm) {
				r.run('add SG ingress rule', %(aws ec2 authorize-security-group-ingress --group-id ${cur_props.id} --ip-permissions $*{diff.add.val.map(encode_json)}))

			})
			diff.remove.each(F(perm) {
				r.run('remove SG ingress rule', %(aws ec2 revoke-security-group-ingress --group-id ${cur_props.id} --ip-permissions $*{diff.remove.val.map(encode_json)}))

			})

		}
	}

	F delete(r:AwsSecGroup, resource:Hash) {
		# TODO: handle EC2 classic / default vpc - deletion by group name, not by id
		r.log('delete', 'SG')
		r.run('delete SG', %(aws ec2 delete-security-group --group-id ${r.cur_props[0].id}))
	}

	F code(r:AwsSecGroup, resource:Hash) "AwsSecGroup(\n\t${r.ancor.code()},\n\t${resource.code()}\n).converge()"

	# --------------------------------------------------
	type AwsVpc(AwsResource)
	F _find_cmd(r:AwsVpc) AwsCommand(%[aws ec2 describe-vpcs], true)
	F ids(r:AwsVpc) r.cur_props.VpcId

	F Str(r:AwsVpc) {
		t = if r.cur_props is Null {
			''
		} else {
			" ids=${r.ids().join(',')}"
		}
		"<AwsVpc ancor=${r.ancor}${t}>"
	}

}
