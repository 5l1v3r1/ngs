# For autoload
ArgvMatcher = true

{
	type MatchedParam(FullBox)
	type UnmatchedParam(EmptyBox)
}

# TODO: *args, **kwargs
# TODO: replace '-' in argv parameters names with '_' when matching
F ~(argv:Arr, c:Closure) {

	LONG_SW_PFX = Pfx('--')
	SHORT_SW_PFX = Pfx('-')
	NEG_PFX = Pfx('no-')

	params_by_pos = c.params()

	have_arr_splat = false
	rest = []
	if params_by_pos and ('splat' in params_by_pos[-1]) {
		assert(params_by_pos[-1].splat == '*', 'ArgvMatcher does not support **kwargs')
		have_arr_splat = true
		params_by_pos.pop()
	}

	params_by_name = params_by_pos.Hash('name')
	params_by_name.each_idx_key_val(F(idx, k, v) v.idx = idx)
	matches = UnmatchedParam * params_by_name.len()

	F set_match(v) matches[params_by_name[param_name].idx] = MatchedParam(v)

	F convert(v, t:Type) {
		throw InvalidArgument("Don't know how to convert value ${v} to type ${t}")
	}

	F convert(v:Str, t:Type) {
		guard t in [Int, Real]
		t(v)
	}

	F convert(v, t:Type) {
		guard v is t
		v
	}

	accepting_named_arguments = true
	argv_iter = Iter(argv)
	while(argv_iter) {
		param_name = null
		arg = argv_iter.next()
		# TODO: process -xyz arg as -x -y -z ?
		# TODO: SHORT_SW_PFX & handle len() != 2
		if accepting_named_arguments {
			cond {
				arg == '--' { accepting_named_arguments = false; continue }
				(m = arg ~ LONG_SW_PFX) { param_name = m.after }
				(m = arg ~ SHORT_SW_PFX) and arg.len() == 2 { param_name = m.after }
			}
		}
		if param_name {
			# named parameter
			if (negated = param_name ~ NEG_PFX) {
				param_name = negated.after
			}

			param_name not in params_by_name returns MatchN().set('message', "Unknown parameter '${param_name}'")

			if params_by_name[param_name].type == Bool {
				set_match(not(negated))
			} else {
				if negated  {
					return MatchN().set('message', "Parameter '${param_name}' is not a boolean but used with 'no-'")
				}
				try
					arg = argv_iter.next()
				catch(nn:NoNext)
					throw MatchN().set('message', "Parameter '${param_name}' was not followed by parameter value")
				set_match(arg.convert(params_by_name[param_name].type))
			}
		} else {
			# positional parameter
			idx = matches.index(is, UnmatchedParam)
			if idx is Null {
				if have_arr_splat {
					matches.push(MatchedParam(arg))
				} else {
					return MatchN().set('message', "Too many arguments")
				}
			}
			matches[idx] = MatchedParam(arg.convert(params_by_pos[idx].type))
		}
	}

	for(i;matches.len()) {
		matches[i] continues
		p = params_by_pos[i]
		'dflt' not in p returns MatchN().set('message', "Parameter '${p.name}' missing")
		matches[i] = MatchedParam(p.dflt)
	}

	MatchY().set('matches', matches.val)
}
