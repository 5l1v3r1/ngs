{
	doc ArgvMatcher internal type, do not use!
	type MatchedParam(FullBox)

	doc ArgvMatcher internal type, do not use!
	type UnmatchedParam(EmptyBox)

}

# Decorator. TODO: Consider generice attributes-setting decorator
doc Sets ARGV matching option.
doc option - Option name. The only supported option at this time is "positionals".
doc value - Option value.
doc %EX - # Any command line argument that is not "allreg" goes to "filters" parameters.
doc %EX - ArgvMatcher('positionals', 'filters') do
doc %EX - F main(filters:Arr, allreg:Bool=false) ...
F ArgvMatcher(option:Str, value, f:Closure) {
	h = f.attrs()
	assert(h is Hash)
	h.dflt('ArgvMatcher', {})
	h.ArgvMatcher[option] = value
	f
}


# --- "~" matcher ---

# TODO: *args, **kwargs
# TODO: replace '-' in argv parameters names with '_' when matching
doc Tries to match command line arguments with closure parameters.
doc argv - Command line arguments, typically ARGV
doc c - Closure to match with
doc %RET - Match (MatchY on success, MatchN on failure). If MatchY is returned it has "matches" property with values is suitable order to call c. If MatchN is returned, it has "message" property explaining why there was no match. Currently it's not printed anywhere.
doc %EX - ArgvMatcher; (["--b", "B", "A", "C"] ~ F(a,b,c) 7).matches  # %[A B C]
doc %EX - (["A", "C", "D", "--b", "B"] ~ ArgvMatcher("positionals", "a") do F(a,b) 7).matches  # %[%[A C D] B]
F ~(argv:Arr, c:Closure) {

	LONG_SW_PFX = Pfx('--')
	SHORT_SW_PFX = Pfx('-')
	NEG_PFX = Pfx('no-')

	match_ret = Return()

	params_by_pos = c.params()

	have_arr_splat = false
	rest = []
	if params_by_pos and ('splat' in params_by_pos[-1]) {
		assert(params_by_pos[-1].splat == '*', 'ArgvMatcher does not support **kwargs')
		have_arr_splat = true
		params_by_pos.pop()
	}

	params_by_name = params_by_pos.Hash('name')
	params_by_name.each_idx_key_val(F(idx, k, v) v.idx = idx)
	matches = UnmatchedParam * params_by_name.len()

	F set_match(v) matches[params_by_name[param_name].idx] = MatchedParam(v)

	F convert(v, t:Type) {
		throw InvalidArgument("Don't know how to convert value ${v} to type ${t}")
	}

	F convert(v:Str, t:Type) {
		guard t in [Int, Real]
		t(v)
	}

	F convert(v, t:Type) {
		guard v is t
		v
	}

	accepting_named_arguments = true
	argv_iter = Iter(argv)
	positionals = []
	while(argv_iter) {
		param_name = null
		arg = argv_iter.next()
		# TODO: process -xyz arg as -x -y -z ?
		# TODO: SHORT_SW_PFX & handle len() != 2
		if accepting_named_arguments {
			cond {
				arg == '--' { accepting_named_arguments = false; continue }
				(m = arg ~ LONG_SW_PFX) { param_name = m.after }
				(m = arg ~ SHORT_SW_PFX) and arg.len() == 2 { param_name = m.after }
			}
		}
		if param_name {
			# named parameter
			if (negated = param_name ~ NEG_PFX) {
				param_name = negated.after
			}

			param_name not in params_by_name returns MatchN().set('message', "Unknown parameter '${param_name}'")

			if params_by_name[param_name].type == Bool {
				set_match(not(negated))
			} else {
				if negated {
					return MatchN().set('message', "Parameter '${param_name}' is not a boolean but used with 'no-'")
				}
				try
					arg = argv_iter.next()
				catch(nn:NoNext)
					throw MatchN().set('message', "Parameter '${param_name}' was not followed by parameter value")
				set_match(arg.convert(params_by_name[param_name].type))
			}
		} else {
			# positional parameter
			positionals.push(arg)
		}
	}

	if (param_name = try c.attrs().ArgvMatcher.positionals) {
		set_match(positionals)
		positionals = []
	}

	positionals.each(F(arg) {
		idx = matches.index(UnmatchedParam)
		if idx is Null {
			if have_arr_splat {
				matches.push(MatchedParam(arg))
				return null
			} else {
				throw match_ret(MatchN().set('message', "Too many arguments"))
			}
		}
		matches[idx] = MatchedParam(arg.convert(params_by_pos[idx].type))
	})

	for(i;matches.len()) {
		matches[i] continues
		p = params_by_pos[i]
		'dflt' not in p returns MatchN().set('message', "Parameter '${p.name}' missing")
		matches[i] = MatchedParam(p.dflt)
	}

	MatchY(matches.val)
}

TEST ArgvMatcher; (["--b", "B", "A", "C"] ~ F(a,b,c) 7).matches == %[A B C]
TEST ArgvMatcher; (["--b", "B", "A", "C", "D"] ~ F(a,b,c) 7) is MatchN
TEST ArgvMatcher; (["--b", "B", "A", "C", "D"] ~ F(a,b,c, *d) 7).matches == %[A B C D]
TEST ArgvMatcher; (["A", "C", "D", "--b", "B"] ~ F(a,b,c, *d) 7).matches == %[A B C D]
TEST (["A", "C", "D", "--b", "B"] ~ ArgvMatcher("positionals", "a") do F(a,b) 7).matches == %[%[A C D] B]
