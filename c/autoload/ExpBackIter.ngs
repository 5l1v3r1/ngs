{
	# Based on https://en.wikipedia.org/wiki/Exponential_backoff
	type ExpBackIter(Iter)
	
	F init(eb:ExpBackIter, base=2, ceiling=null, factor=1, fuzz=rand) {
		guard ceiling is Int or ceiling is Null
		init(args())
		eb.current = 1
		eb.cycle = 0
	}

	F next(eb:ExpBackIter) {
		eb.cycle += 1
		if eb.ceiling is not Null {
			eb.cycle > eb.ceiling returns (eb.fuzz)(eb.current*eb.factor)
		}
		eb.current *= eb.base
		(eb.fuzz)(eb.current*eb.factor)
	}

	F Bool(eb:ExpBackIter) true

}
TEST ExpBackIter(fuzz=identity).drop(5).take(3) == [64, 128, 256]
TEST ExpBackIter(fuzz=identity, ceiling=3).drop(5).take(2) == [8, 8]
