# === Stats ===

{
	doc A group of named counters
	doc h - The underlying Hash, expose()d
	type Stats(HashLike)
}

doc Stats constructor
doc %EX - Stats().push('a').push('a').push('b').h  # {'a': 2, 'b': 1}
F init(s:Stats) super(s, 'h')

doc Makes Stats, with each element in the array counted as if push()ed
doc %EX - Stats(['a', 'a', 'b']).h  # {'a': 2, 'b': 1}
F init(s:Stats, a:Arr) {
	init(s)
	a.each(push(s, X))
}

doc Increment the named counter
doc k - the name of the counter to increment
doc %EX - Stats().push("a").push("a").push("b")["a"]  # 2
F push(s:Stats, k) {
	s.h[k] = s.h.get(k, 0) + 1
	s
}

TEST Stats().push('a').push('a').push('b').h == {'a': 2, 'b': 1}
TEST Stats(['a', 'a', 'b']).h == {'a': 2, 'b': 1}
TEST Stats(['a', 'a', 'b'])['a'] == 2
