# === Table ======================================

{
	doc Manipulates tabular data
	doc name - Table name to display and for configuration lookup
	doc col_name_to_idx - Columns names' indexes (ex: id:0, name:1, age:2)
	doc col_idx_to_name - Columns indexes' names (ex: 0:id, 1:name, 2:age)
	type Table

	doc Additional information to be used when processing a Table
	doc data - underlying data
	type TableMeta

	doc Do not show the data below if the named column is present
	type TableMetaNotIfCol
	TableMetaNotIfCol.inherit(TableMeta)
}

F StrForTable(x) Str(x)
F StrForTable(x, width:Int) Str(x, width)
F StrForTable(x:Null) "-"
F StrForTable(x:Null, width:Int) Str("-", width)

F init(x:TableMetaNotIfCol, col_name:Str, data) {
	x.col_names = [col_name]
	x.data = data
}

F init(x:TableMetaNotIfCol, col_names:Arr, data) {
	guard col_names.all(Str)
	x.col_names = col_names
	x.data = data
}

F Str(x:TableMetaNotIfCol) x.data.Str()

doc Calculate cell display width - any Str()-able instance
F cell_display_width(x) StrForTable(x).len()

doc Calculate cell display width for an array
F cell_display_width(x:Arr) x.map(StrForTable).max(len)

doc Calculate cell display width for an empty array
F cell_display_width(x:Arr) { guard x.len()==0; 0 }

doc Initialize rows to an empty array
F init(t:Table) {
	if not(try t.name) {
		t.name = null
	}
	# name -> column number
	t.col_name_to_idx = {}
	# column number -> name
	t.col_idx_to_name = {}
	# data
	t.rows = []
}

doc Create named table containing provided rows
doc name - name of the table for display and for configuration purposes
doc rows_hashes - rows, each row is a Hash
F init(t:Table, name:Str, rows_hashes:Arr) {
	guard rows_hashes.all(Hash)
	t.name = name
	t.init(rows_hashes)
}

F init(t:Table, rows_hashes:Arr) {
	t.init()
	conf = config(if t.name "table_${t.name}" "table")
	debug("Table config is $conf")
	idx = 0
	# Build table info
	F register_column(k) {
		t.col_name_to_idx[k] = idx
		t.col_idx_to_name[idx] = k
		idx += 1
	}
	F register_column(k) {
		guard k in t.col_name_to_idx
		null
	}
	if conf {
		# conf.each(register_column)
		conf % register_column
	} else {
		rows_hashes.each(F(row_hash) {
			# row_hash.keys().each(register_column)
			row_hash.keys() % register_column
		})
	}
	debug("Table created with fields: ${t.col_idx_to_name}")
	# hashes to arrays
	# rows_hashes.each(partial(push, t))
	rows_hashes % push(t, X)
}

F push(t:Table, row_arr:Arr) {
	# TODO: handle mismatch in number of columns
	t.rows.push(row_arr)
	t
}

F push(t:Table, row_hash:Hash) {
	# TODO: handle mismatch of columns
	row = t.col_name_to_idx / get(row_hash, X, null)
	t.push(row)
	t
}

F width(t:Table) t.col_idx_to_name.len()
F column(t:Table, k:Str) t.column(t.col_name_to_idx[k])
F column(t:Table, n:Int) t.rows.map(X[n])
# F columns(t:Table) t.width().map(F(idx) t.column(idx))
F columns(t:Table) t.width() / t.column(X)
F each(t:Table, cb:Fun) throw NotImplemented()

# --- Conversions ---

F len(t:Table) t.rows.len()
F Bool(t:Table) t.len().Bool()

F Hash(t:Table, row_number:Int) {
	throw NotImplemented()
}

F Hashes(t:Table) {
	throw NotImplemented()
}

F should_display_cell_item(t:Table, item) true

F should_display_cell_item(t:Table, item:TableMetaNotIfCol) {
	item.col_names.none(X in t.col_name_to_idx)
}

doc Preprocess a Table just before output
F preprocess(t:Table) {
	t.rows.each(F(row) {
		row.each_idx_val(F(idx, cell) {
			if cell is Arr {
				row[idx] = cell ? should_display_cell_item(t, X)
			}
		})
	})
}

F calculate_num_cols_to_show(t:Table, max_colums_widths:Arr, available_cols:Int) {
	cols_to_show = 0
	for(i; max_colums_widths.len()) {
		# TODO: unhardcode the "+1" spacing width
		cols_to_show += max_colums_widths[i] + 1
		cols_to_show > available_cols returns i
	}
	i
}

doc Displays a table. Implemented only for tty output (or output_format=text configuration)
F echo(t:Table) {
	guard 1.isatty() or (config('output_format') == 'text')
	lines = (ENV.get('LINES')   or `tput lines`).Int()
	cols  = (ENV.get('COLUMNS') or `tput cols`).Int()
	# TODO: special treatment for tmux? can print any width and tmux can be adjusted later.
	# TODO: support Arr in headers
	# TODO: handle Hash type of cell (maybe allow configuring order of keys etc)
	# TODO: handle limiting width of a cell, probably using subtype of TableMeta

	preprocess(t)

	do_output_headers = config('output_headers') in [null, true]
	max_colums_widths = t.col_idx_to_name.map(F(idx, k) {
		col = t.column(idx)
		((if do_output_headers [k] [])+ col).max(cell_display_width)
	})

	# How much full table columns fit on the screen
	showing_n_columns = t.calculate_num_cols_to_show(max_colums_widths, cols)

	# Setup line spacing
	do_line_spacing = t.rows.any(F(row) {
		row.any(F(cell) cell is Arr and len(cell)>1)
	})
	do_line_spacing = if do_line_spacing F() echo('') else F() null

	# Title
	if t.name and (config('output_title') in [null, true]) {
		echo("=== ${t.name} ===")
		do_line_spacing()
	}

	# Headers
	if(do_output_headers) {
		t.col_idx_to_name.limit(showing_n_columns).map(F(idx, k) StrForTable(k, max_colums_widths[idx])).join(' ').echo()
		do_line_spacing()
	}

	# Rows
	t.rows.each(F(row) {
		done = false
		subrow_idx = 0
		while not(done) {
			done = true
			subrow_content_arr = t.col_idx_to_name.limit(showing_n_columns).map(F(idx, k) {
				subrow_content = if row[idx] is Arr {
					if len(row[idx]) > subrow_idx {
						done = false
						row[idx][subrow_idx]
					} else {
						''
					}
				} else {
					if subrow_idx == 0 {
						done = false
						row[idx]
					} else {
						''
					}
				}
				# Format later maybe? Just before printing?
				StrForTable(subrow_content, max_colums_widths[idx])
			})
			if not(done) {
				subrow_content_arr.join(' ').echo()
			}
			subrow_idx += 1
		}
		do_line_spacing()
	})
}

TEST Table([{"a": 1}, {"a": 2}]).column("a") == [1,2]
TEST Table([{"a": 1}, {"a": 2}]).columns() == [[1,2]]
TEST Table([{"a": 1}, {"a": 2}]).len() == 2
