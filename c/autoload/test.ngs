{
	Test = true
	type TestFail(Error)
	type TestMessage(FullBox)

	F init(tf:TestFail, message:Str) init(args())

}

# TODO show standard error output on one changing line instead of occupying a lot of space

F test(name:Str, f:Fun) {
	echo("")
	echo("==================== TEST: $name ====================")
	msg = f()
	if msg is TestMessage {
		echo("  OK: ${msg.val}")
	}
}

F log_test_ok(s:Str) {
	echo("  $s")

}

F assert_base(actual, expected, comparison, display_comparison, title, ok_prefix='') {
	ok = comparison(actual, expected)
	if ok {
		log_test_ok("$title: OK ($ok_prefix$expected)")
	} else {
		throw TestFail("$title: actual value is $actual while expected $display_comparison $expected")
	}
	actual
}

F assert_eq(actual, expected, title) {
	assert_base(actual, expected, (==), "to be equal to", title)
	# if not(actual == expected) {
	# 	throw TestFail("$title: actual value is $actual while expected $expected")
	# }
}

F assert_type(data, expected_type, title) {
	assert_base(data, expected_type, is, "to be of type")
}

F assert_hash(actual, title=null) {
	assert_base(actual, "a Hash", is(X, Hash), "to be", title or "Data type (mis)match")
	actual
}

F assert_array(actual, title=null) {
	assert_base(actual, "an Arr", is(X, Arr), "to be", title or "Data type (mis)match")
	actual
}

F assert_hash_keys(actual, expected:Arr, title=null) {
	assert_hash(actual, title)
	expected.each(F(k) {
		assert_base(actual, "key '$k' exists", {has(actual, k)}, "to have", title or "Must be a hash with keys")
	})
	actual
}

F assert_hash_keys_values(actual, expected:Hash, title=null) {
	assert_hash(actual, title)
	expected.each(F(k, v) {
		assert_base(actual, "key '$k' with value '$v'", {has(actual, k) and actual[k] == v}, "to have", title or "Must be a hash with keys and values")
	})
	actual
}

F assert_min_len(actual, expected, title=null) {
	assert_base(actual, expected, { len(A) >= expected }, "to have at least", title or "Data items count", ok_prefix="at least ")
	actual
}

F assert_exit_code(p:Process, expected:Int, title=null) {
	p.wait()
	assert_base(p.exit_code, expected, (==), "to be equal to", title or "Exit code of process '${p.command.argv.join(' ')}'")
	p
}

F assert_output_has(p:Process, expected, title=null) {
	guard (expected is Str) or (expected is RegExp)
	p.wait()
	assert_base(p.stdout, expected, has, "to contain", title or "Output of process '${p.command.argv.join(' ')}'")
	p
}

F assert_has(actual, expected, title=null) {
	assert_base(actual, expected, has, "to contain", title or "Data subset")
}

F assert_resolvable(h:Str, title="Resolve host", times=45, sleep=2) {
	retry(times=times, sleep=sleep, title=title)
		body       => { `dig "+short" $h`.lines() }
		success_cb => { log_test_ok("$title: $h resolves to ${A[-1]}") }
		fail_cb    => { throw TestFail("$title: no resolve for $h").set('host', h) }
}

F assert_path_exists(p, title="Path exists") {
	guard (p is Str) or (p is Path)
	path = p
	if path is not Path {
		path .= Path()
	}
	if path {
		log_test_ok("$title: Path ${path.path} exists")
		return p
	}
	throw TestFail("$title: Path ${path.path} does not exist").set('path', p)
}

# --- $(nofail ...) ---

F finished_ok(p:Process) {
	guard 'nofail' in p.command.options
	true
}

F '$()'(c:Command) {
	guard c.argv[0] == 'nofail'
	c.options.push('nofail')
	c.argv.shift()
	$($c)
}
