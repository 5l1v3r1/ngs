#!/usr/bin/env ngs

# Running example: ./demo/ec2din.ngs
# Running example: NGS_table_Instances='["InstanceId", "PublicIpAddress", "PrivateIpAddress", "State", "KeyName", "SecurityGroups"]' ./demo/ec2din.ngs

{
	Table

	config('table_Instances', ['InstanceId', 'tag_Name', 'tag_env', 'tag_role', 'IPs', 'InstanceType', 'State', 'KeyName', 'SecurityGroups', 'AZ', 'RestOfTags'])

	F limit_len(s:Str, l:Int) {
		s.len() <= l returns s
		s[0..(l-3)] + '...'
	}

	# TODO: tags order: "Name" and then all others sorted
	# TODO: move limit_len() functionlity to stdlib so it could be
	#       centrally configured and be affected by
	#       displaying conditions such as available console width

	instances = ``aws ec2 describe-instances``
	instances.each(F(i) {
		i.State = i.State.Name
		i.SecurityGroups = i.SecurityGroups.map(F(sg) "${limit_len(sg.GroupName, 15)}(${sg.GroupId})")
		i.AZ = i.Placement.AvailabilityZone
		# Tags here is a Hash (after straightening by stdlib)
		i.Name = i.Tags.get('Name', '-').limit_len(20)
		i.IPs = [i.PublicIpAddress, i.PrivateIpAddress]
		i.Tags.each(F(k, v) {
			i["full_tag_${k}"] = v
			i["tag_${k}"] = v.limit_len(20)
		})
		# TODO: Move layout management to Table, don't limit_len() here
		i.RestOfTags = i.Tags.map(F(k, v) TableMetaNotIfCol(["full_tag_$k", "tag_$k"], KV(k.limit_len(10), v.limit_len(15))))
	})
	t = Table('Instances', instances)
	echo(t)
}
