#!/usr/bin/env ngs

# Running example: ./demo/ec2din.ngs
# Running example: NGS_table_Instances='["InstanceId", "PublicIpAddress", "PrivateIpAddress", "State", "KeyName", "SecurityGroups"]' ./demo/ec2din.ngs

{
	Table

	config('table_Instances', %[InstanceId tag_Name tag_env tag_role IPs InstanceType State KeyName SecurityGroups AZ RestOfTags])

	F limit_len(s:Str, l:Int) limit(s, l, '...')

	# Poor man's arguments parsing till the NGS library is ready
	allreg = '--allreg' in ARGV
	if allreg {
		ARGV .= without('--allreg')
	}

	filters = ARGV.map(F(arg) {
		kv = arg.split('=')
		econd {
			arg.starts_with('vpc-') "Name=vpc-id,Values=$arg"
			arg.starts_with('i-')   "Name=instance-id,Values=$arg"
			kv.len() == 2           "Name=tag-key,Values=${kv[0]},Name=tag-value,Values=${kv[1]}"
		}
	})

	if filters {
		filters = ['--filters', *filters]
	}

	instances = if allreg {
		AWS
		# AZ is now important so moving it to be first
		config('table_Instances', ['AZ'] + config('table_Instances').without('AZ'))
		aws_regions({ ``aws ec2 describe-instances --region $A $*filters`` })
	} else {
		``aws ec2 describe-instances $*filters``
	}
	instances .= sort('LaunchTime')
	instances % F(i) {
		i.State = i.State.Name
		i.SecurityGroups = i.SecurityGroups.map(F(sg) "${limit_len(sg.GroupName, 15)}(${sg.GroupId})")
		i.AZ = i.Placement.AvailabilityZone
		# Tags here is a Hash (after straightening by stdlib)
		if 'Tags' not in i {
			i.Tags = {}
		}
		i.Name = i.Tags.get('Name', '-').limit_len(20)
		i.IPs = [try i.PublicIpAddress, try i.PrivateIpAddress]
		i.Tags.each(F(k, v) {
			i["full_tag_${k}"] = v
			i["tag_${k}"] = v.limit_len(20)
		})
		# TODO: Move layout management to Table, don't limit_len() here
		i.RestOfTags = i.Tags.map(F(k, v) TableMetaNotIfCol(["full_tag_$k", "tag_$k"], KV(k.limit_len(10), v.limit_len(15))))
	}
	t = Table('Instances', instances)
	echo(t)
}
