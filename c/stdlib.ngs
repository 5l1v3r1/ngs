# === Misc functional ============================


F identity(x) x

# TEST: identity(10) == 10


# === Syntactic sugar ============================


F '!='(a,b) not(a==b)

# TEST: 1 != 2
# TEST: (1 != 1) == false


F has(container, element) element in container

# TEST: [1,2,3].has(1)
# TEST: [1,2,3].has(10) == false


# === Array ======================================


# Checks whether element x is in array arr
F in(x, arr:Arr) {
	local l = arr.len()
	for(i;l) arr[i] == x returns true
	false
}

# Tested by has() tests


# XXX BUG: the dot precedence is incorrect
# temporary workaround - parenthesis
F '=='(a:Arr, b:Arr) {
	local l = a.len()
	l != (b.len()) returns false
	for(i;l) a[i] != b[i] returns false
	true
}

# TEST: [1, 2] == [1, 2]
# TEST: [1, 3] != [1, 2]
# TEST: [1] != [1, 2]


F map(arr:Arr, mapper:Fun) {
	local l = arr.len()
	collector
		for(i;l) collect mapper(arr[i])
}

# TEST: [1,2,3].map(F(x) x*3) == [3,6,9]


F each(arr:Arr, cb:Fun) {
	local l = arr.len()
	for(i;l) cb(arr[i])
}


F Arr(h:Hash)
	h.keys().map(F(k) [k, h[k]])

# TEST: Arr({'x': 7, 'y': 8}) == [['x', 7], ['y', 8]]


# === Hash =======================================


# Make it built in for speed?
F map(h:Hash, mapper:Fun)
	h.keys().map(F(k) mapper(k, h[k]))

# TEST: {'a': 1, 'b': 2}.map(F(k, v) "${k}-$v") == ['a-1', 'b-2']


F '=='(a:Hash, b:Hash) Arr(a) == Arr(b)


F Hash(a:Arr) {
	ret = {}
	a.each(F(x) ret[x[0]] = x[1])
	ret
}

# TEST: Hash([['a', 1], ['c', 3]]) == {'a': 1, 'c': 3}


# === Integer ====================================


F map(n:Int, mapper:Fun)
	collector
		for(i;n) collect mapper(i)

# TEST: 3.map(identity) == [0, 1, 2]
# TEST: 3.map(F(x) x*2) == [0, 2, 4]
