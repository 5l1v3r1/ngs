# === Misc functional ============================


F identity(x) x

TEST identity(10) == 10


# TODO: Add more info about the newly created function - useful for debugging
#       See https://docs.python.org/2/library/functools.html#partial-objects
F partial(f:Fun, *bind_args)
	F(*args) f(*bind_args, *args)

TEST p = partial((-), 10); p(7) == 3


F partial_tail(f:Fun, *bind_args)
	F(*args) f(*args, *bind_args)

TEST p = partial_tail((-), 10); p(7) == -3


# === Type =======================================

STDLIB_EXPOSE = {}

# TODO: better exceptions (use correct type, not string, provide offending type and attribute)
F expose(child:NormalType, attr:Str) {
	STDLIB_EXPOSE[child] = STDLIB_EXPOSE.get(child, []).push(attr)
	if STDLIB_EXPOSE[child].len() > 1 {
		local e = NotImplemented("expose() does not support exposing more than one attribute at this time")
		e.type = child
		e.attr = attr
		throw e
	}
	child
}

# * if there is no appropriate mymethod(...,my_type_instance,...) and the type of my_type_instance
#   has expose()d attribute, retry the call with mymethod(...,my_type_instance.exposed_attribute,...)
# * This is called by the VM when a method was called but none of the implementations matched
#   the parameters (or failed "guard" statements).
# TODO: make it faster
# TODO: support trying all attributes listed in STDLIB_EXPOSE, not just first
# TODO: check and solve usage by inheriting types
F impl_not_found_hook(callable:Fun, *args) {
	local l = args.len()
	local exposed_attr_name = null, change_idx, arg
	for(i;l) {
		arg = args[i]
		if typeof(arg) in STDLIB_EXPOSE {
			exposed_attr_name = STDLIB_EXPOSE[typeof(arg)][0]
			change_idx = i
			break
		}
	}
	guard exposed_attr_name
	local new_args = copy(args)
	new_args[change_idx] = (.)(new_args[change_idx], exposed_attr_name)
	callable(*new_args)
}

# === auto-load ==================================

F global_not_found_hook(name:Str) {
	require("${NGS_DIR}/autoload/${name}.ngs")
}

# === Range ======================================

F stdlib_mkrange(t:Type, start, end) {
	r = t()
	r.start = start
	r.end = end
	r
}

F ..(start, end)  stdlib_mkrange(ExclusiveRange, start, end)
F ...(start, end) stdlib_mkrange(InclusiveRange, start, end)

F each(r:ExclusiveRange, cb:Fun, *args)
	for(i=r.start; i<r.end; i=i+1)
		cb(i, *args)

F each(r:InclusiveRange, cb:Fun, *args)
	for(i=r.start; i<=r.end; i=i+1)
		cb(i, *args)

# Needed? Maybe provide some exception to stop the iteration?
F each(r:Range, cb:Fun, *args) {
	guard r.end is Null
	local i=r.start
	while true {
		cb(i, *args)
	}
}

F map(r:Range, mapper:Fun, *args)
	collector
		r.each(F(elt) collect(mapper(elt, *args)))

TEST (1..3).map((*), 2) == [2, 4]
TEST (1...3).map((*), 2) == [2, 4, 6]

# === Syntactic sugar ============================

F not(x) { guard (x is Bool) == false; x.Bool().not() }

F !=(a,b) not(a==b)

TEST 1 != 2
TEST (1 != 1) == false


F 'not in'(a,b) not(a in b)

TEST (1 not in [1,2,3]) == false
TEST 10 not in [1,2,3]


F 'is not'(a,b) not(a is b)

TEST 1 is not Null
TEST (null is not Null) == false


F has(container, element) element in container

TEST [1,2,3].has(1)
TEST [1,2,3].has(10).not()


# Return the "collect" function for the given initial object (defaults to [])
F collector(a:Arr, code:Fun) {
	code(F(elt) a.push(elt))
	a
}

F collector(h:Hash, code:Fun) {
	code(F(k, v) h[k] = v)
	h
}

F collector(n:Int, code:Fun) {
	code(F(incr) n=n+incr)
	n
}

F ==(a:Null, b) false
F ==(a, b:Null) false
F ==(a:Null, b:Null) true

# --- Hash ---
F .(h:Hash, attr:Str) h[attr]
F .=(h:Hash, attr:Str, v) h[attr] = v
F get(h:Hash, k) get(h, k, null)

# --- Arr ---
F .(a:Arr, attr:Str) a.map((.), attr)

TEST [{"x": 1}, {"x": 2}].x == [1, 2]

F +(s1:Str, s2:Str) "${s1}${s2}"

TEST "ab" + "cd" == "abcd"

# === Array ======================================


# Checks whether element x is in array arr
F in(x, arr:Arr) {
	local l = arr.len()
	for(i;l) arr[i] == x returns true
	false
}

# Tested by has() tests


F ==(a:Arr, b:Arr) {
	local l = a.len()
	l != b.len() returns false
	for(i;l) a[i] != b[i] returns false
	true
}

TEST [1, 2] == [1, 2]
TEST [1, 3] != [1, 2]
TEST [1] != [1, 2]


F any(arr:Arr, predicate:Fun, *args) {
	local l = arr.len()
	for(i;l)
		predicate(arr[i], *args) returns true
	false
}

TEST [1,2,10].any(F(elt) elt > 5)
TEST [1,2,3].any(F(elt) elt > 5).not()


F all(arr:Arr, predicate:Fun, *args) {
	local l = arr.len()
	for(i;l)
		not(predicate(arr[i], *args)) returns false
	true
}

TEST [1,2,3].all((<), 10)
TEST [1,2,10].all((>), 5).not()


F map(arr:Arr, mapper:Fun, *args)
	collector
		arr.each(F(elt) {
			collect(mapper(elt, *args))
		})

TEST [1,2,3].map((*), 4) == [4,8,12]


F each(arr:Arr, cb:Fun, *args) {
	local l = arr.len()
	for(i;l) cb(arr[i], *args)
	arr
}


# Tested by flatten() tests

F filter(arr:Arr, predicate:Fun, *args)
	collector
		arr.each(F(elt) {
			if predicate(elt, *args)
				collect(elt)
		})

# Tested by without() tests


F without(arr:Arr, without_elt)
	arr.filter((!=), without_elt)

TEST [1,2,3,2].without(2) == [1,3]


F filter(arr:Arr) filter(arr, (is not), Null)

TEST [1,2,null,3].filter() == [1,2,3]


F count(arr:Arr, predicate:Fun, *args) {
	collector/0
		arr.each(F(elt) {
			if predicate(elt, *args)
				collect(1)
		})
}

TEST [1,2,3,11,12].count((>), 10) == 2


F flatten(arr:Arr)
	collector
		arr.each(F(subarr) {
			subarr.each(collect)
		})

TEST [[1], [2,3]].flatten() == [1,2,3]


F uniq(arr:Arr)
	(collector/{}
		arr.each(collect, 1)
	).keys()

TEST [1,2,2,3,4,4].uniq() == [1,2,3,4]


F first(arr:Arr) first(arr, identity)

TEST [null, false, 10, 20].first() == 10


F first(arr:Arr, predicate:Fun, *args) {
	local l = arr.len()
	for(i;l)
		predicate(arr[i], *args) returns arr[i]
	null
}

TEST [5,10,15].first((>), 7) == 10
TEST [5,10,15].first((>), 20) == null

# --- Conversions ---

F Arr(h:Hash)
	h.map(F(*pair) pair)

TEST Arr({'x': 7, 'y': 8}) == [['x', 7], ['y', 8]]


F Arr(arr:Arr) arr


F zip(*args) {
	local arrays = args.map(Arr)
	local max_len = arrays.map(len).max()
	collector
		for(i;max_len)
			collect(arrays.map(get, i, null))
}

TEST zip([1,2,3], [4,5,6]) == [[1,4], [2,5], [3,6]]

F Arr(r:Range) r.map(identity)

TEST Arr(1..3) == [1,2]
TEST Arr(1...3) == [1,2,3]


# --- Access elements ---

F '[]'(arr:Arr, indexes:Arr)
	collector
		indexes.each(F(idx) collect(arr[idx]))

TEST [10,20,30,40][[0,3]] == [10, 40]

# --- Misc ---

{
	F() {
		F most(arr:Arr, f:Fun) {
			guard arr
			ret = arr[0]
			arr.each(F(elt) if f(elt, ret) { ret = elt })
			ret
		}

		# XXX: find something that looks better. options:
		#      global F min() ...
		#      F global min() ...
		#      ?
		min = F(arr:Arr) most(arr, (<))
		max = F(arr:Arr) most(arr, (>))
	}()
}

F *(arr:Arr, n:Int)
	collector
		for(i;n)
			arr.each(collect)

TEST [10,20] * 2 == [10,20,10,20]


F echo(x) {
	guard x is not Str
	echo(Str(x))
}

# === Hash =======================================


# --- Comparisons ---

F ==(a:Hash, b:Hash) Arr(a) == Arr(b)


# --- Functional ---

# Make it built in for speed?
F each(h:Hash, cb:Fun, *args) {
	h.keys().each(F(k) cb(k, h[k], *args))
	h
}

F map(h:Hash, mapper:Fun, *args)
	collector
		h.each(F(k, v) {
			collect(mapper(k, v, *args))
		})

TEST {'a': 1, 'b': 2}.map(F(k, v) "${k}-$v") == ['a-1', 'b-2']
TEST {'a': 1, 'b': 2}.map(F(k, v, sep) "${k}${sep}${v}", '+') == ['a+1', 'b+2']


F filter(h:Hash, predicate:Fun, *args)
	collector/{}
		h.each(F(k, v) {
			if predicate(k, v, *args)
				collect(k, v)
		})

TEST {'a': 1, 'b': 2}.filter(F(k, v, k_eq) k == k_eq, 'a') == {'a': 1}


F count(h:Hash, predicate:Fun, *args)
	collector/0
		h.each(F(k, v) {
			if predicate(k, v, *args)
				collect(1)
		})

TEST {'a': 1, 'b': 2, 'c': 11}.count(F(k, v) v>10) == 1

# --- Conversions ---

F Hash(arr:Arr)
	collector/{}
		arr.each(F(pair) {
			collect(*pair)
		})

TEST Hash([['a', 1], ['c', 3]]) == {'a': 1, 'c': 3}


F Hash(arr:Arr, v)
	collector/{}
		arr.each(collect, v)

TEST Hash([1,2], 'x') == {1: 'x', 2: 'x'}


F Hash(tuple:Arr, names:Arr)
	collector/{}
		tuple.len().each(F(idx) collect(names[idx], tuple[idx]))

TEST [1,2,3].Hash(["a", "b", "c"]) == {"a": 1, "b": 2, "c": 3}


# --- Misc ---


F without(h:Hash, without_k)
	h.filter(F(k, v) k != without_k)

TEST {'a': 1, 'b': 2, 'c': 3}.without('a') == {'b': 2, 'c': 3}


F +(a:Hash, b:Hash) {
	{**a, **b}
}


TEST {'a': 1, 'b': 2, 'c': 3} + {'b': 20, 'd': 40} == {'a': 1, 'b': 20, 'c': 3, 'd': 40}


F Strs(h:Hash) h.map(F(k, v) "${k}=${v}")


# === Integer ====================================

# --- Functional ---

F each(n:Int, cb:Fun, *args) {
	for(i;n) cb(i, *args)
	n
}

F map(n:Int, mapper:Fun, *args)
	collector
		for(i;n) collect(mapper(i, *args))

TEST 3.map(identity) == [0, 1, 2]
TEST 3.map((*), 3) == [0, 3, 6]

# === String =====================================


# --- Constructors ---

# TODO: escaping?
F Str(s:Str) "'$s'"


F Str(n:Null) "null"

TEST Str(null) == "null"


F Str(b:Bool) if b "true" "false"

TEST Str(true) == "true"
TEST Str(false) == "false"


F Str(a:Arr) "[${a.map(Str).join(',')}]"
F Str(h:Hash) "{" + h.map(F(k, v) "${k}=${v}").join(", ") + "}"

# --- Sugar ---

F pos(haystack:Str, needle:Str) pos(haystack, needle, 0)

TEST pos("abc", "cd") == null
TEST pos("abcdef", "cd") == 2

TEST pos("a:b:c", ":") == 1
TEST pos("a:b:c", ":", 2) == 3

F in(needle:Str, haystack:Str) pos(haystack, needle) is not Null

TEST "bc" in "abcd"
TEST "x" not in "abcd"

# --- Misc utilities ---

F split(s:Str, delim:Str) {
	local start = 0, p
	collector {
		while (p = pos(s, delim, start)) is not Null {
			collect(s[start..p])
			start = p + 1
		}
		collect(s[start..null])
	}
}

TEST ":a:bc:d:".split(":") == ["", "a", "bc", "d", ""]


F *(s:Str, n:Int) ([s]*n).join('')

# Tested with Str(Str,Int)

F Str(x, target_width:Int) x.Str().Str(target_width)

F Str(s:Str, target_width:Int) {
	local l = s.len()
	local pad_on_left = if target_width < 0 {
		target_width = 0 - target_width
		true
	} else {
		false
	}

	l >= target_width returns s

	local padding = ' ' * (target_width - l)
	if pad_on_left {
		padding + s
	} else {
		s + padding
	}
}

# Not sure about this, might be confusing behaviour
F Str(n:Int, target_width:Int) n.Str().Str(0-target_width)

TEST Str(10,  4) == '  10'
TEST Str(10, -4) == '10  '
TEST Str("x", 3) == 'x  '
TEST Str("x",-3) == '  x'


# === RegExp =====================================

# TODO

# === Ring buffer (WIP) ==========================

{ type RingBuffer }

F RingBuffer(max_size:Int) {
	r = RingBuffer()
	r.data = [null] * max_size
	r.max_size = max_size
	r.head = 0
	r.tail = 0
	r
}

F push(r:RingBuffer, x) {
	# (r.data)[r.head] = x
	# r.head = r.head + 1
	# (r.head) = (r.head) % (r.max_size)
	r
}

F len(r:RingBuffer) {
	if r.head > r.tail { r.head - r.tail } else { throw NotImplemented() }
}

F values(r:RingBuffer) {
	throw NotImplemented()
}

# === Logging and status reporting (WIP) =========

# TODO: allow control by facility and severity
#       and maybe source component or file.

# TODO: consider sending log, debug and error to stderr

F log(s:Str) {
	echo("[LOG   ] $s")
}

# Set DEBUG environment variable to any non-empty string to activate
F debug(s:Str) {
	# TODO: Use RingBuffer when debug is off and
	#       show last N debug messages on uncaught exception
	if try ENV['DEBUG'] {
		echo("[DEBUG ] $s")
	}
}

F error(s:Str) {
	echo("[ERROR ] $s")
}

F status(s:Str) {
	echo(s)
	log("(status) $s")
}

# === Path =======================================

{ type Path }

F Path(s:Str) {
	p = Path()
	p.path = s
	p
}

F Bool(p:Path) $(/usr/bin/test -e ${p.path}).Bool()

TEST Path('/').Bool()
TEST Path('/no-such-file').Bool() == false

# TODO: better exceptions (use correct type, not string, maybe use errno)
F find_in_path(executable_name:Str) {
	debug("[find_in_path] enter ${executable_name}")
	if "/" in executable_name {
		debug("[find_in_path] leave unprocessed ${executable_name}")
		return Path(executable_name)
	}
	local path = ENV.get('PATH', '/usr/local/bin:/usr/bin:/bin:/sbin:/usr/sbin').split(':')
	debug('[find_in_path] will search')
	local ret = path.map(F(elt) Path("${elt}/${executable_name}")).first()
	debug("[find_in_path] ret is ${executable_name} -> ${ret}")
	ret is Null throws "Executable '${executable_name}' was not found in path ${path}"
	debug("[find_in_path] leave ${executable_name} -> ${ret}")
	ret
}

F Str(p:Path) p.path

# === Commands and processes (WIP) ===============

# TODO: better exceptions (use correct type, not string, maybe use errno)
F dup2(oldfd:Int, newfd:Int) {
	while true {
		local status = c_dup2(oldfd, newfd)
		status != -1 returns newfd
		get_c_errno() != C_EINTR throws "dup2() failed"
	}
}

# TODO: Use some thread-local copy of the environment?
#       This would allow simple handling of modifications
#       for exec'ed processes.

# Reads all
# TODO: detect and process errors, throw exception(s)
# TODO: better exceptions (use correct type, not string, maybe use errno)
F read(fd:Int) {
	debug("[read] will read from fd $fd")
	local ret = []
	while true {
		local result = c_read(fd, 4096)
		debug("[read] read from fd $fd : <<${result}>>")
		result[0] == 0 returns ret.join('')
		if result[0] > 0 {
			ret.push(result[1])
		} else {
			get_c_errno() != C_EINTR throws "[read] failed to c_read()"
		}
	}
}

F isatty(fd:Int) {
	local ret = c_isatty(fd)
	local errno = get_c_errno()

	ret == 1 returns true
	ret != 0 throws "c_isatty($fd) - unknown response code $ret"

	errno in [C_EINVAL, C_ENOTTY] returns false
	errno == C_EBADF returns "c_isatty($fd) - invalid file descriptor"

	throw "c_isatty($fd) - unknown errno $errno"
}

# --- Pipe ---

# http://www.microhowto.info/howto/capture_the_output_of_a_child_process_in_c.html

{ type Pipe }

# TODO: better exceptions (use correct type, not string, maybe use errno)
F Pipe() {
	local pipe = Pipe.constructors[0]()
	local result = c_pipe()
	# result: [result_code, read_end, write_end]
	result[0] != 0 throws "Failed to create Pipe"
	pipe.read_fd = result[1]
	pipe.write_fd = result[2]
	debug("[Pipe] created pipe with read_fd=${pipe.read_fd} and write_fd=${pipe.write_fd}")
	pipe
}

F close_writing_end(p:Pipe) p.write_fd.c_close()
F close_reading_end(p:Pipe) p.read_fd.c_close()
F write(p:Pipe, s:Str) p.write_fd.c_write(s)
F read(p:Pipe) p.read_fd.read()
F dup2_writing_end(p:Pipe, newfd:Int) dup2(p.write_fd, newfd)
F dup2_reading_end(p:Pipe, newfd:Int) dup2(p.read_fd, newfd)

# --- Process ---

{ type ProcessFailed }

{ type Process }

# TODO: Inherit from Exception or a subtype of it
F ProcessFailed(p:Process) {
	pf = ProcessFailed()
	pf.process = p
	pf
}

F finished_ok(p:Process) p.exit_code == 0

F finished_ok(p:Process) {
	guard p.executable.path == '/bin/false'
	p.exit_code == 1
}

F finished_ok(p:Process) {
	guard p.executable.path == '/usr/bin/test'
	p.exit_code in [0, 1]
}

F Process(c:Command) {
	local p = Process()
	p.command = c
	p.executable = null
	p.pid = null
	p.exit_code = null
	p.exit_signal = null
	p
}

F Bool(p:Process) {
	p.wait()
	p.exit_code == 0
}

# TODO: better exceptions (use correct type, not string)
F wait(p:Process) {

	p.pid is Null throws "Can not wait() on Process without PID"

	p.exit_code is Int returns p

	debug("[wait] will waitpid(${p.pid})")
	local w = c_waitpid(p.pid)
	debug("[wait] waitpid(${p.pid}) -> ${w}")
	p.exit_code = C_WEXITSTATUS(w[1])
	p.exit_signal = C_WTERMSIG(w[1])
	not(finished_ok(p)) throws ProcessFailed(p)
	p
}

F to_exit_code(p:Process) p.wait().exit_code

F Str(p:Process) p.wait().stdout

# --- $() ---

# TODO: better exceptions (use correct type, not string)
# TODO: c_waitpid() - handle signals
# TODO: capture stdout
# TODO: capture stderr
# TODO: provide additional communication channel on additional fd?
# TODO: handle built-in commands: do not execve,
F '$()'(c:Command) {

	local debug_pfx = '[stdlib $()]', process, pid
	debug("$debug_pfx Parsed command: ${c.argv}")

	process = Process(c)
	process.executable = find_in_path(c.argv[0])
	local pipe = Pipe()
	pid = c_fork()

	pid == -1 throws "Failed to fork()"

	debug("$debug_pfx PID after fork: $pid")

	if pid == 0 {
		debug("$debug_pfx child will execve()")
		pipe.close_reading_end()
		pipe.dup2_writing_end(1)
		local result = c_execve(process.executable.path, c.argv, ENV.Strs())
		throw "$debug_pfx failed to execve()"
	}

	if pid > 0 {
		process.pid = pid
		debug("$debug_pfx closing writing end of the pipe")
		pipe.close_writing_end()
		debug("$debug_pfx reading all output of the child process")
		process.stdout = pipe.read()
		pipe.close_reading_end()
		# debug("$debug_pfx child output was <<${process.stdout}>>")
		process.wait()
	}

	process
}

TEST $(true).Bool()
TEST $(false).Bool() == false
TEST "$(/bin/echo -n abc)" == 'abc'

F ``(c:Command) ('$()')(c).Str()

F ````(c:Command) {
	p = ('$()')(c)
	p.stdout.parse({'process': p})
}

F parse(s:Str) parse(s, {})

F parse(s:Str, hints:Hash) s

F parse(s:Str, hints:Hash) {
	local ret
	try
		ret = parse_json(s)
	catch(e)
		guard false
	ret
}

# === Parse aws output ===========================
# TODO: move to separate auto-loaded file maybe?

F stdlib_aws_straighten_tags(a:Arr) a.each(stdlib_aws_straighten_tags)

F stdlib_aws_straighten_tags(h:Hash) {
	h['Tags'] = h.get('Tags', []).map(
		F(tag_pair) [tag_pair.Key, tag_pair.Value]
	).Hash()
}

TEST instances = [{"Tags": [{"Key": "k", "Value": "v"},{"Key": "k2", "Value": "v2"}]}]; stdlib_aws_straighten_tags(instances); instances.Tags == [{"k": "v", "k2": "v2"}]

F parse(s:Str, hints:Hash) {
	guard try hints['process'].command.argv[0] == 'aws'
	data = parse_json(s)
	if (try data.Reservations.Instances) is not Null {
		data = data.Reservations.Instances.flatten()
		data = data.stdlib_aws_straighten_tags()
	}
	data
}

# === config =====================================

STDLIB_CONFIG = {}

F config(k:Str) {
	# TODO: think, organize
	#       what about structured data? JSON?
	# TODO: read from config files
	# TODO: read from command line switches
	local v
	debug("[config] getting key '$k'")
	v = try ENV["NGS_$k"]
	if v {
		debug("[config] Value config for key '$k' found in the environment variable 'NGS_${k}': '$v'")
		return parse(v)
	}
	v = try STDLIB_CONFIG[k]
	if v is not Null {
		debug("Value config for key '$k' found in STDLIB_CONFIG: $v")
		return v
	}
	v
}

F config(s:Str, x) {
	debug("Configuring ${s}=${x}")
	STDLIB_CONFIG[s] = x
}

# === Misc tests =================================

TEST parse_json('{"a": 1, "b": [null, false, true]}') == {'a': 1, 'b': [null, false, true]}
TEST h={'a': 1, 'b': 2, 'c': 3}; h.update({'b': 20, 'd': 40}); h == {'a': 1, 'b': 20, 'c': 3, 'd': 40}
TEST F opt(a, b=10, *rest) [b, rest]; opt(1) == [10, []]
TEST F opt(a, b=10, *rest) [b, rest]; opt(1, 2) == [2, []]
TEST F opt(a, b=10, *rest) [b, rest]; opt(1, 2, 3) == [2, [3]]

# === Exceptions tests ===========================
TEST h={}; try h["a"] catch(e:KeyNotFound) true
TEST a=[]; try a[0] catch(e:IndexNotFound) true
TEST a=[]; try a[0]=1 catch(e:IndexNotFound) true
TEST type T; try T().xyz catch(e:AttrNotFound) true
TEST try NO_SUCH_GLOBAL catch(e:GlobalNotFound) true
TEST try c_lseek(0, 0, "bad arg") catch(e:InvalidArgument) true
TEST try compile("xyz(", "something") catch(e:CompileFail) true
TEST try 1(2, 3) catch(e:DontKnowHowToCall) true
TEST type T; try echo(T()) catch(e:ImplNotFound) true
