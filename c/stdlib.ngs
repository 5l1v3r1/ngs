# === Misc functional ============================


F identity(x) x

TEST identity(10) == 10


# TODO: Add more info about the newly created function - useful for debugging
#       See https://docs.python.org/2/library/functools.html#partial-objects
F partial(f:Fun, *bind_args)
	F(*args) f(*bind_args, *args)

TEST p = partial((-), 10); p(7) == 3


F partial_tail(f:Fun, *bind_args)
	F(*args) f(*args, *bind_args)

TEST p = partial_tail((-), 10); p(7) == -3


# === Syntactic sugar ============================


F !=(a,b) not(a==b)

TEST 1 != 2
TEST (1 != 1) == false


F 'not in'(a,b) not(a in b)

TEST (1 not in [1,2,3]) == false
TEST 10 not in [1,2,3]


F 'is not'(a,b) not(a is b)

TEST 1 is not Null
TEST (null is not Null) == false


F has(container, element) element in container

TEST [1,2,3].has(1)
TEST [1,2,3].has(10).not()


# Return the "collect" function for the given initial object (defaults to [])
F collector(a:Arr, code:Fun) {
	code(F(elt) a.push(elt))
	a
}

F collector(h:Hash, code:Fun) {
	code(F(k, v) h[k] = v)
	h
}

F collector(n:Int, code:Fun) {
	code(F(incr) n=n+incr)
	n
}

F ==(a:Null, b) false
F ==(a, b:Null) false
F ==(a:Null, b:Null) true


# === Array ======================================


# Checks whether element x is in array arr
F in(x, arr:Arr) {
	local l = arr.len()
	for(i;l) arr[i] == x returns true
	false
}

# Tested by has() tests


# XXX BUG: the dot precedence is incorrect
# temporary workaround - parenthesis
F ==(a:Arr, b:Arr) {
	local l = a.len()
	l != (b.len()) returns false
	for(i;l) a[i] != b[i] returns false
	true
}

TEST [1, 2] == [1, 2]
TEST [1, 3] != [1, 2]
TEST [1] != [1, 2]


F any(arr:Arr, predicate:Fun, *args) {
	local l = arr.len()
	for(i;l)
		predicate(arr[i], *args) returns true
	false
}

TEST [1,2,10].any(F(elt) elt > 5)
TEST [1,2,3].any(F(elt) elt > 5).not()


F all(arr:Arr, predicate:Fun, *args) {
	local l = arr.len()
	for(i;l)
		not(predicate(arr[i], *args)) returns false
	true
}

TEST [1,2,3].all((<), 10)
TEST [1,2,10].all((>), 5).not()


F map(arr:Arr, mapper:Fun, *args)
	collector
		arr.each(F(elt) {
			collect(mapper(elt, *args))
		})

TEST [1,2,3].map((*), 4) == [4,8,12]


F each(arr:Arr, cb:Fun, *args) {
	local l = arr.len()
	for(i;l) cb(arr[i], *args)
	arr
}


# Tested by flatten() tests

F filter(arr:Arr, predicate:Fun, *args)
	collector
		arr.each(F(elt) {
			if predicate(elt, *args)
				collect(elt)
		})

# Tested by without() tests


F without(arr:Arr, without_elt)
	arr.filter((!=), without_elt)

TEST [1,2,3,2].without(2) == [1,3]


F filter(arr:Arr) filter(arr, (is not), Null)

TEST [1,2,null,3].filter() == [1,2,3]


F count(arr:Arr, predicate:Fun, *args) {
	collector/0
		arr.each(F(elt) {
			if predicate(elt, *args)
				collect(1)
		})
}

TEST [1,2,3,11,12].count((>), 10) == 2


F flatten(arr:Arr)
	collector
		arr.each(F(subarr) {
			subarr.each(collect)
		})

TEST [[1], [2,3]].flatten() == [1,2,3]


F uniq(arr:Arr)
	(collector/{}
		arr.each(collect, 1)
	).keys()

TEST [1,2,2,3,4,4].uniq() == [1,2,3,4]


# --- Conversions ---

F Arr(h:Hash)
	h.map(F(*pair) pair)

TEST Arr({'x': 7, 'y': 8}) == [['x', 7], ['y', 8]]


F Arr(arr:Arr) arr


F zip(*args) {
	local arrays = args.map(Arr)
	local max_len = arrays.map(len).max()
	collector
		for(i;max_len)
			collect(arrays.map(get, i, null))
}

TEST zip([1,2,3], [4,5,6]) == [[1,4], [2,5], [3,6]]


# --- Access elements ---

F '[]'(arr:Arr, indexes:Arr)
	collector
		indexes.each(F(idx) collect(arr[idx]))

TEST [10,20,30,40][[0,3]] == [10, 40]

# --- Misc ---

{
	F() {
		F most(arr:Arr, f:Fun) {
			guard arr
			ret = arr[0]
			arr.each(F(elt) if f(elt, ret) { ret = elt })
			ret
		}

		# XXX: find something that looks better. options:
		#      global F min() ...
		#      F global min() ...
		#      ?
		min = F(arr:Arr) most(arr, (<))
		max = F(arr:Arr) most(arr, (>))
	}()
}

F *(arr:Arr, n:Int)
	collector
		for(i;n)
			arr.each(collect)

TEST [10,20] * 2 == [10,20,10,20]


F echo(x) {
	guard x is not Str
	echo(Str(x))
}

# === Hash =======================================


# --- Comparisons ---

F ==(a:Hash, b:Hash) Arr(a) == Arr(b)


# --- Functional ---

# Make it built in for speed?
F each(h:Hash, cb:Fun, *args) {
	h.keys().each(F(k) cb(k, h[k], *args))
	h
}

F map(h:Hash, mapper:Fun, *args)
	collector
		h.each(F(k, v) {
			collect(mapper(k, v, *args))
		})

TEST {'a': 1, 'b': 2}.map(F(k, v) "${k}-$v") == ['a-1', 'b-2']
TEST {'a': 1, 'b': 2}.map(F(k, v, sep) "${k}${sep}${v}", '+') == ['a+1', 'b+2']


F filter(h:Hash, predicate:Fun, *args)
	collector/{}
		h.each(F(k, v) {
			if predicate(k, v, *args)
				collect(k, v)
		})

TEST {'a': 1, 'b': 2}.filter(F(k, v, k_eq) k == k_eq, 'a') == {'a': 1}


F count(h:Hash, predicate:Fun, *args)
	collector/0
		h.each(F(k, v) {
			if predicate(k, v, *args)
				collect(1)
		})

TEST {'a': 1, 'b': 2, 'c': 11}.count(F(k, v) v>10) == 1

# --- Conversions ---

F Hash(arr:Arr)
	collector/{}
		arr.each(F(pair) {
			collect(*pair)
		})

TEST Hash([['a', 1], ['c', 3]]) == {'a': 1, 'c': 3}


F Hash(arr:Arr, v)
	collector/{}
		arr.each(collect, v)

TEST Hash([1,2], 'x') == {1: 'x', 2: 'x'}


# --- Misc ---


F without(h:Hash, without_k)
	h.filter(F(k, v) k != without_k)

TEST {'a': 1, 'b': 2, 'c': 3}.without('a') == {'b': 2, 'c': 3}


F +(a:Hash, b:Hash)
	collector/{} {
		a.each(collect)
		b.each(collect)
	}


TEST {'a': 1, 'b': 2, 'c': 3} + {'b': 20, 'd': 40} == {'a': 1, 'b': 20, 'c': 3, 'd': 40}


F update(dst:Hash, src:Hash)
	collector/dst
		src.each(collect)

TEST h={'a': 1, 'b': 2, 'c': 3}; h.update({'b': 20, 'd': 40}); h == {'a': 1, 'b': 20, 'c': 3, 'd': 40}


# === Integer ====================================

# --- Functional ---

F each(n:Int, cb:Fun, *args) {
	for(i;n) cb(i, *args)
	n
}

F map(n:Int, mapper:Fun, *args)
	collector
		for(i;n) collect(mapper(i, *args))

TEST 3.map(identity) == [0, 1, 2]
TEST 3.map((*), 3) == [0, 3, 6]

# === String =====================================


# --- Constructors ---

# TODO: escaping?
F Str(s:Str) "'$s'"


F Str(n:Null) "null"

TEST Str(null) == "null"


F Str(b:Bool) if b "true" "false"

TEST Str(true) == "true"
TEST Str(false) == "false"


F Str(a:Arr) "[${a.map(Str).join(',')}]"

# === RegExp =====================================

# TODO

# === Ring buffer (WIP) ==========================

{ type RingBuffer }

F RingBuffer(max_size:Int) {
	r = RingBuffer()
	r.data = [null] * max_size
	r.max_size = max_size
	r.head = 0
	r.tail = 0
	r
}

F push(r:RingBuffer, x) {
	# (r.data)[r.head] = x
	# r.head = r.head + 1
	# (r.head) = (r.head) % (r.max_size)
	r
}

F len(r:RingBuffer) {
	if r.head > r.tail { r.head - r.tail } else { LATER }
}

F values(r:RingBuffer) {
	LATER
}

# === Logging and status reporting (WIP) =========

# TODO: allow control by facility and severity
#       and maybe source component or file.

# TODO: consider sending log, debug and error to stderr

F log(s:Str) {
	echo("[LOG   ] $s")
}

# Set DEBUG environment variable to any non-empty string to activate
F debug(s:Str) {
	# TODO: Use RingBuffer when debug is off and
	#       show last N debug messages on uncaught exception
	if try ENV['DEBUG'] {
		echo("[DEBUG ] $s")
	}
}

F error(s:Str) {
	echo("[ERROR ] $s")
}

F status(s:Str) {
	echo(s)
	log("(status) $s")
}

# === Commands and processes (WIP) ===============

# TODO: better exceptions (use correct type, not string, maybe use errno)
F dup2(oldfd:Int, newfd:Int) {
	while true {
		local status = c_dup2(oldfd, newfd)
		if status != -1 { return newfd; }
		if get_errno() != C_EINTR { throw "dup2() failed" }
	}
}

# TODO: Use some thread-local copy of the environment?
#       This would allow simple handling of modifications
#       for exec'ed processes.
# TODO: better and consistent naming for this function?
F get_env_strings() ENV.map(F(k, v) "${k}=${v}")

# Reads all
# TODO: detect and process errors, throw exception(s)
# TODO: better exceptions (use correct type, not string, maybe use errno)
F read(fd:Int) {
	debug("[read] will read from fd $fd")
	local ret = []
	while true {
		local result = c_read(fd, 4096)
		debug("[read] read from fd $fd : <<${result}>>")
		if result is Str {
			if result {
				ret.push(result)
			} else {
				return ret.join('')
			}
		} else {
			throw "[read] failed to c_read()"
		}
	}
}

# --- Pipe ---

# http://www.microhowto.info/howto/capture_the_output_of_a_child_process_in_c.html

{ type Pipe }

# TODO: better exceptions (use correct type, not string, maybe use errno)
F Pipe() {
	# XXX: Pipe.constructors needs parenthesis because of a parser bug
	local pipe = (Pipe.constructors)[0]()
	local result = c_pipe()
	# result: [result_code, read_end, write_end]
	if result[0] != 0 { throw "Failed to create Pipe" }
	pipe.read_fd = result[1]
	pipe.write_fd = result[2]
	debug("[Pipe] created pipe with read_fd=${pipe.read_fd} and write_fd=${pipe.write_fd}")
	pipe
}

F close_writing_end(p:Pipe) p.write_fd.c_close()
F close_reading_end(p:Pipe) p.read_fd.c_close()
F write(p:Pipe, s:Str) p.write_fd.c_write(s)
F read(p:Pipe) p.read_fd.read()
F dup2_writing_end(p:Pipe, newfd:Int) dup2(p.write_fd, newfd)
F dup2_reading_end(p:Pipe, newfd:Int) dup2(p.read_fd, newfd)

# --- Process ---

{ type ProcessFailed }

{ type Process }

# TODO: Inherit from Exception or a subtype of it
F ProcessFailed(p:Process) {
	pf = ProcessFailed()
	pf.process = p
	pf
}

F finished_ok(p:Process) p.exit_code == 0

F finished_ok(p:Process) {
	guard ((p.command).argv)[0] == 'false'
	p.exit_code == 1
}

F Process(c:Command) {
	local p = Process()
	p.command = c
	p.pid = null
	p.exit_code = null
	p.exit_signal = null
	p
}

# TODO: better exceptions (use correct type, not string)
# TODO: better exceptions (use correct type, not string)
F wait(p:Process) {

	p.pid is Null throws "Can not wait() on Process without PID"

	p.exit_code is Int returns p.exit_code

	debug("[wait] will waitpid($p.pid)")
	local w = c_waitpid(p.pid)
	debug("[wait] waitpid($p.pid) -> $w")
	p.exit_code = C_WEXITSTATUS(w[1])
	p.exit_signal = C_WTERMSIG(w[1])
	not(finished_ok(p)) throws ProcessFailed(p)
	p
}

F to_exit_code(p:Process) {
	p.wait()
	p.exit_code
}

F Str(p:Process) p.stdout

# --- $() ---

# TODO: better exceptions (use correct type, not string)
# TODO: c_waitpid() - handle signals
# TODO: capture stdout
# TODO: capture stderr
# TODO: provide additional communication channel on additional fd?
F '$()'(c:Command) {

	local debug_pfx = '[stdlib $()]', process, pid
	debug("$debug_pfx Parsed command: ${c.argv}")

	process = Process(c)
	local pipe = Pipe()
	pid = c_fork()

	pid == -1 throws "Failed to fork()"

	debug("$debug_pfx PID after fork: $pid")

	if pid == 0 {
		debug("$debug_pfx child will execve()")
		pipe.close_reading_end()
		pipe.dup2_writing_end(1)
		local result = c_execve((c.argv)[0], c.argv, get_env_strings())
		throw "$debug_pfx failed to execve()"
	}

	if pid > 0 {
		process.pid = pid
		debug("$debug_pfx closing writing end of the pipe")
		pipe.close_writing_end()
		debug("$debug_pfx reading all output of the child process")
		process.stdout = pipe.read()
		# debug("$debug_pfx child output was <<${process.stdout}>>")
		process.wait()
	}

	process
}


# === Misc tests =================================

TEST parse_json('{"a": 1, "b": [null, false, true]}') == {'a': 1, 'b': [null, false, true]}
