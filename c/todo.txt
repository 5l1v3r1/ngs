Note that this started as internal document so things here are unformed, not final and fluid.

[inbox]

	* Delimited string, such as PATH

[roadmap]

	* Phase 1 - the language (will be v0.1.0) [in progress]

		* Milestone "programming"

			* exit hooks for both normal exit and exceptions (and generic pubsub?)
				* using decorators?

			* main() - match arguments and make it usable [in progress]

			* document scoping rules

			* commands syntax

				* & for background execution

				* io redirection - see F '$()'(c:Command) { ... } in stdlib.ngs [task is on hold]
					* basic redirections ( <x , >y , >>z ) [done]
					* tests for basic redirections
					* advanced redirections ( N>x , N<y, N>>z ), think of more
					* document redirections

				* pipes
					* between external commands
					* between internal commands/functions
					* between internal and external commands

			* array/string splice - check existing x[Range] methods

			* match, ematch - some way to get the match object?

				For example when RegExp is implmeneted in the code

					match mystring {
						/my_regex(.*)/ { my_code }
					}

				in my_code there should be access to the match object
				The syntax might be

					match mystring {
						/my_regex(.*)/ -> my_match { my_code }
					}

				or something alike, not sure yet.
				Maybe

					match my_string my_match {
						/my_regex(.*)/ { my_code }
					}

			* without(s:Str, del:Str)

			* Destructuring. Automatically declare the variables local, as for does.
				* [a,b=default,*some,c]
				* {'a','b':newvar,**some,'c'=default}
				+ Not sure about the syntax.
				+ Nested?
				+ Pattern matching like [a, *other1, 100, b, *other2] ?
					+ If yes, shouldn't the syntax be tilde (~) as for RegExp/Pfx/Sfx/... ?
				+ "xyz${myvar}www" = myvar syntax for regexes? ... for consistency.
				+ {[_, dst], **args} = h means also changing function arguments?

			* documentation [on hold]

				* Fix markdown escaping, including underscore
				* Make it look better in both man and html
				* Document that innner functions are declared local
				* Types documentation [on hold]

			* files globbing

		* Milestone "Mac OS support" (will be v0.2.0)

			+ Issue #15

		* Milestone "correct programming" (will be v0.3.0)

			* Fix test.ngs crash

			* Go over methods and make sure the method X types matrix is as full as possible

			* Usage of undefined local variable - add name of the variable in exception

			* Partial application syntax
				* Make sure it works correct in expressions such as 10 + X * 2
				* Check that this works: f(X, *something, **some_kw)

			* Fix segfault in case of comments between cond clauses

			* Go over naming convention, making sure it's consistent and can be easily described in the manual

			* Binary safe strings

			* Make sure not to leak FDs to processes that NGS runs
				+ See bash-4.3/execute_cmd.c, execute_in_subshell(), "fds_to_close"

			* Make sure STACK_DEPTH is correct everywhere and add tests

			* Fix "Function does not have result value" when compiling and running an empty string

			* Implement missing local/upvar/global functionality and add tests

			* Make sure local/upvar cause exceptions when used at top-level code

			* Check what happends with misplaced local/upvar/global. Example: "F f(); global f" - function declaration causes f to be local

			* Replace all compile asserts with exceptions

			* Make sure (uncaught) exceptions go to stderr, not stdout

			* Consider using some wrapping-all-code try...catch for/instead of uncaught_exception_hook implementation
				+ Currently having two different mechanisms (try...catch and uncaught_exception_hook) for roughly the same functionality

			* get rid of expose() ?
				+ Used in Stats
				+ Probably needs inheritance from builtin types

			* get rid of nuke_null() ?
				+ Not used in current stdlib
				+ Think of use cases justifying existence of nuke_null()

			* Low prioroty method MatchY[]

		* Milestone "threads" (will be v0.4.0)

			* Thread - Make pthread_attr_t accessible - get/set attributes

			* Thread local variables

			* Make ENV and current directory thread-local but allow access to the global ones


	* Phase 2 - the shell [not started]

		See beginning of CLI implementation in previous NGS implementation:
		https://github.com/ilyash/ngs/blob/0ed8455efe851e3c5a275290a71c38c4e718f15c/cli.ngs

		* Milestone "screen layout"

			* Processes have their own area on the screen
				+ Truncated stdout/stderr
				+ Option to view full stdout/stderr in a pager

		* Milestone "semantic output"

			* Allow navigation on the screen, choosing operations from a menu for the objects

	* Phase 3 - running code remotely

	* Phase 4 - nice to have

		* benchmarks - different tasks and languages
			+ There is one task benchmark in the Makefile (time-sum target)

		* RegExp
			* c_pcre_exec() - support options?
				PCRE_NOTBOL
				PCRE_NOTEOL
			* c_pcre_study()

[todo by priority]

	* unify and document where {} is Hash (expression) and where it's code
	* K M G suffixes for numbers
	* compile
		* exceptions instead of asserts
		* disallow duplicate name for an argument
	* doc
		* shorten everything, give example, make it tldr-compliant :)
		* "local" and for() auto-local
			Describe the "local myvar" behavior and make it clear that
			for(i=0;i<n;i=i+1) will automatically declare i as local.
		* constructors and init(), does not feel right. constructors as type convertors.
		* which exceptions are thrown where and their meanings
		* config()
		* other projects
			Explain how this project is different from other projects:
				+ There is a shell in Python, don't remember the name.
				( add more projects here )
	* tracing
	* think about serialization and remote execution
		Probably pushing a bytecode (which we already have because the code was compiled)
		of a function that does not reference any upper-level variables, only locals and globals,
		maybe like this:

			RF myfunc(param1:Str, param2:Int, ...)

		RF means remote function and compiler checks for absence of upper-level variables references.

	* push/pop/shift/unshift for Hash
		To be consistent with Arr, which has all of these.
		The push is regular h[k] = v while others need additional vm functionality.
	* decorators / wrappers ?
	* "local x" at top level - check behaviour
	* solve the inheritance (also for "expose")
	* comments that begin not at beginning of line
	* OP_PUSH_INT - check limits of the number
	* text templates (stdlib I guess)
	* yaml
		* parse
		* generate

	* strings / mb_strings

	* data structure walk / data query language
		+ See
			+ jq
			+ jmespath

	* Local variables values in backtrace

	* Compile time stack depth check?

	* bitwise operations? "bor", "band", "bxor", ...

	* documentation
		* Add introspection for method source locations
[debt]

	* break / continue - disable when not in for

	* -pedantic

	* check integer overflows everywhere

[consider]
	* include * (glob)

[types]
	* Bin (or Bytes, later, after Str is multibyte)
	* Cloud / Compute / etc ?
	* Host
		+ ip?, public_ip, private_ip, other ips?
		+ image_id
		+ instance_id
		+ ssh_user()
		+ ssh_key()
		+ cloud type / endpoint / ... ?
	* HostsGroup
		+ refresh() or get()?
	* FSObject
		* Path
			* File
			* Dir
	* Widget
		+ Command
		+ Status
		+ Progress
		+ Pipes
	* HistoryEntry

[functions]
	* parse()
		+ allow auto-load missing implementations by extension and mime type
	* write()
	* now() - timestamp, time functions
	* stat(), mtime(), ...
	* file.relative_to(root)

[later / safety]
	* assert n_globals
	* integer VALUE overflows check
