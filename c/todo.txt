Note that this started as internal document so things here are unformed, not final and fluid.

[inbox]

	* Delimited string, such as PATH

[roadmap]

	* Phase 1 - the language (will be v0.1.0) [in progress]

		* Milestone "programming"

			* main() - match arguments and make it usable [in progress]
				* allow positional parameters as in ec2din.ngs [done]
				* allow documentation of parameters for displaying help [already have it]
				* display help when no matching main or when --help is given
				+ think of @table_args decorator for main()

			* commands syntax

				* & for background execution

				* io redirection - see F '$()'(c:Command) { ... } in stdlib.ngs [task is on hold]
					* basic redirections ( <x , >y , >>z ) [done]
					* tests for basic redirections
					* advanced redirections ( N>x , N<y, N>>z ), think of more
					* document redirections

				* pipes
					* between external commands
					* between internal commands/functions
					* between internal and external commands

			* documentation [in progress]
				* Tutorial
					+ What is NGS?
					+ Running
					+ Basic syntax
					+ Common types and common operations
						+ Scalars
						+ Arr
						+ Hash
						+ RegExp
						+ Other common types
					+ Variable scoping
					+ Control structures (if, loops, cond)
					+ Common methods
						+ Boolean
						+ Math
						+ Strings
						+ Functional
					+ Defining own methods
					+ Inheritance
					+ Build an app - decide which
				* All types documentation
				* All methods documentation
				* Exit codes (see bootstrap.ngs)
				* Document that innner functions are declared local
				* Language reference, good example: https://golang.org/ref/spec

			* files globbing

		* Milestone "Mac OS support" (will be v0.2.0)

			+ Issue #15

		* Milestone "correct programming" (will be v0.3.0)

			* Move everything in "c" directory one level up

			* locals() - to complete globals()

			* Make sure attrs() are implemented on all possible types

			* OP_PUSH_INT - check limits of the number

			* Make comments that begin not at beginning of line work

			* Fix test.ngs crash

			* Go over methods and make sure the method X types matrix is as full as possible

			* Usage of undefined local variable - add name of the variable in exception

			* Partial application syntax
				* Make sure it works correct in expressions such as 10 + X * 2
				* Check that this works: f(X, *something, **some_kw)

			* Fix segfault in case of comments between cond clauses

			* Go over naming convention, making sure it's consistent and can be easily described in the manual

			* Binary safe strings

			* Make sure not to leak FDs to processes that NGS runs
				+ See bash-4.3/execute_cmd.c, execute_in_subshell(), "fds_to_close"

			* Make sure STACK_DEPTH is correct everywhere and add tests

			* Fix "Function does not have result value" when compiling and running an empty string

			* Implement missing local/upvar/global functionality and add tests

			* Make sure local/upvar cause exceptions when used at top-level code

			* Check what happends with misplaced local/upvar/global. Example: "F f(); global f" - function declaration causes f to be local

			* Replace all compile asserts with exceptions

			* Make sure (uncaught) exceptions go to stderr, not stdout

			* get rid of expose() ?
				+ Used in Stats
				+ Probably needs inheritance from builtin types

			* get rid of nuke_null() ?
				+ Not used in current stdlib
				+ Think of use cases justifying existence of nuke_null()

			* Low prioroty method MatchY[]

			* break / continue - disable when not in for

			* -pedantic

			* check integer overflows everywhere

			* compile
				* exceptions instead of asserts
				* disallow duplicate name for an argument

		* Milestone "threads" (will be v0.4.0)

			* Thread - Make pthread_attr_t accessible - get/set attributes

			* Thread local variables

			* Make ENV and current directory thread-local but allow access to the global ones


	* Phase 2 - the shell [not started]

		See beginning of CLI implementation in previous NGS implementation:
		https://github.com/ilyash/ngs/blob/0ed8455efe851e3c5a275290a71c38c4e718f15c/cli.ngs

		* Milestone "screen layout"

			* Processes have their own area on the screen
				+ Truncated stdout/stderr
				+ Option to view full stdout/stderr in a pager

		* Milestone "semantic output"

			* Allow navigation on the screen, choosing operations from a menu for the objects

	* Phase 3 - running code remotely

		* think about serialization and remote execution
			Probably pushing a bytecode (which we already have because the code was compiled)
			of a function that does not reference any upper-level variables, only locals and globals,
			maybe like this:

				RF myfunc(param1:Str, param2:Int, ...)

			RF means remote function and compiler checks for absence of upper-level variables references.

	* Phase 4 - assist developing

		* Local variables values in backtrace

		* tracing / debug

	* Phase 5 - nice to have

		* Go over "TODO"s in all *.ngs files

		* Better start time

		* benchmarks - different tasks and languages
			+ There is one task benchmark in the Makefile (time-sum target)

		* RegExp
			* c_pcre_exec() - support options?
				PCRE_NOTBOL
				PCRE_NOTEOL
			* c_pcre_study()

		* modules / namespaces

		* implement parse() wherever possible (example: IPAddr, IPNet)

		* push/pop/shift/unshift for Hash
			To be consistent with Arr, which has all of these.
			The push is regular h[k] = v while others need additional vm functionality.

		* match, ematch - some way to get the match object?

			+ Check if match is used before doing this task. Currently there is not single usage of match construct.

			For example when RegExp is implmeneted in the code

				match mystring {
					/my_regex(.*)/ { my_code }
				}

			in my_code there should be access to the match object
			The syntax might be

				match mystring {
					/my_regex(.*)/ -> my_match { my_code }
				}

			or something alike, not sure yet.
			Maybe

				match my_string my_match {
					/my_regex(.*)/ { my_code }
				}

		* Destructuring. Automatically declare the variables local, as for does.
			+ Check whether really needed. Currently would fit OK in several places in stdlib when returning few values from C calls:
				result = c_something(...)
				... result[0] ...
				... result[1] ...
				...
			* [a,b=default,*some,c]
			* {'a','b':newvar,**some,'c'=default}
			+ Not sure about the syntax.
			+ Nested?
			+ Pattern matching like [a, *other1, 100, b, *other2] ?
				+ If yes, shouldn't the syntax be tilde (~) as for RegExp/Pfx/Sfx/... ?
			+ "xyz${myvar}www" = myvar syntax for regexes? ... for consistency.
			+ {[_, dst], **args} = h means also changing function arguments?

		* text templates (stdlib with builtin parse I guess)

		* Nfile - NGS version of Makefile

		* Compile time stack depth check?

		* yaml
			* parse
			* generate

		* K M G suffixes for numbers

		* Optimize calling speed
			* Optimize obj_is_of_type()
			* Optimize vm_call matching algorithm
			* Optimize calling of unrelated methods
				+ such as F f(t:T1) and F f(t:T2) when T1 and T2 are unrelated types


[todo by priority]

	* doc
		* shorten everything, give example, make it tldr-compliant :)
		* "local" and for() auto-local
			Describe the "local myvar" behavior and make it clear that
			for(i=0;i<n;i=i+1) will automatically declare i as local.
		* which exceptions are thrown where and their meanings
		* config()
		* other projects
			Explain how this project is different from other projects:
				+ There is a shell in Python, don't remember the name.
				( add more projects here )
	* solve the inheritance (also for "expose")
	* strings / mb_strings

[types]
	* Bin (or Bytes, later, after Str is multibyte)
	* Cloud / Compute / etc ?
	* Host
		+ ip?, public_ip, private_ip, other ips?
		+ image_id
		+ instance_id
		+ ssh_user()
		+ ssh_key()
		+ cloud type / endpoint / ... ?
	* HostsGroup
		+ refresh() or get()?
	* FSObject
		* Path
			* File
			* Dir
	* Widget
		+ Command
		+ Status
		+ Progress
		+ Pipes
	* HistoryEntry

[functions]
	* parse()
		+ allow auto-load missing implementations by extension and mime type
	* write()
	* stat(), mtime(), ...
	* file.relative_to(root)
