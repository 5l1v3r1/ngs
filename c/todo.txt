Note that this started as internal document so things here are unformed, not final and fluid.

[inbox]
	* Fix segfault or disallow "continue" inside "catch"
	* Fix "Function does not have result value" when compiling and running empty string
	* Delimited string, such as PATH
	* Fix segfault F f(x:UndefinedType)
	* close_on_exec - not to leak fds
		~ilya/tmp/bash-4.3/execute_cmd.c:1478:0-1

	* callable name hint in error messages
	* $func(call) in command syntax

[roadmap]

	* Phase 1 - the language [in progress]

		* Milestone "programming"

			* +=, -=, etc syntax. Consider .= for a.b.c = a.b.c.method() -> a.b.c .= method()

			* A way to declare global function in another function
				F f()  { F g() 100 }
				g is now defined locally and there is no way to decare it globally.
				It is the common case but still the global declaration is needed sometimes.

			* commands syntax
				* io redirection - see F '$()'(c:Command) { ... } in stdlib.ngs [task is in hold]
					* basic redirections ( <x , >y , >>z ) [done]
					* tests for basic redirections
					* advanced redirections ( N>x , N<y, N>>z ), think of more
					* document redirections
				* pipes

			* RegExp
				+ The syntax for the regexp literal will be the usual /regexp/flags
				+ The match operator is ~ (tilde)
				+ synatx thoughts

					if m = s ~ /zzz/ { ... m[1] ... }

				* without(s:Str, r:Regex)
				* split(s:Str, r:Regex)
				* filter(a:Arr, r:Regex)

			* match, ematch - some way to get the match object?

				For example when Regex is implmeneted in the code

					match mystring {
						/my_regex(.*)/ { my_code }
					}

				in my_code there should be access to the match object
				The syntax might be

					match mystring {
						/my_regex(.*)/ -> my_match { my_code }
					}

				or something alike, not sure yet.
				Maybe

					match my_string my_match {
						/my_regex(.*)/ { my_code }
					}

			* without(s:Str, del:Str)

			* consider syntax: f(...) = v
				This could be used for example as follows:
					s = "abcd"
					len(s) = 2
					# s is now "ab"
				Function definitions might look like:
					F len(s:Str, =n:Int) ...
				or maybe
					F len(s:Str) = n:Int ...
				I like the first more but it still doesn't feel very right.

			* documentation [on hold]

				* Fix markdown escaping, including underscore
				* Make it look better in both man and html
				* Document that innner functions are declared local
				* Types documentation [on hold]

	* Phase 2 - the shell [not started]
		Starts and runs in parallel with Phase 1 as soon as the language is mature enough
		to implement the shell in it. See beginning of CLI implementation in previous NGS implementation:
		https://github.com/ilyash/ngs/blob/0ed8455efe851e3c5a275290a71c38c4e718f15c/cli.ngs

[todo by priority]

	* Consider https://github.com/ilyash/ngs/issues/8
		* F vs Fun naming inconsistency is a major issue
		* "local" is a minor issue, should probably stay

	* threads
		* Thread() [in progress]
			* Make pthread_attr_t accessible - get/set attributes

	* unify and document where {} is Hash (expression) and where it's code
	* K M G suffixes for numbers
	* compile
		* exceptions instead of asserts
		* disallow duplicate name for an argument
	* doc
		* shorten everything, give example, make it tldr-compliant :)
		* "local" and for() auto-local
			Describe the "local myvar" behavior and make it clear that
			for(i=0;i<n;i=i+1) will automatically declare i as local.
		* constructors and init(), does not feel right. constructors as type convertors.
		* which exceptions are thrown where and their meanings
		* config()
		* other projects
			Explain how this project is different from other projects:
				+ There is a shell in Python, don't remember the name.
				( add more projects here )
	* benchmarks - different tasks and languages
		There is one task benchmark in the Makefile (time-sum target)
	* tracing
	* think about serialization and remote execution
		Probably pushing a bytecode (which we already have because the code was compiled)
		of a function that does not reference any upper-level variables, only locals and globals,
		maybe like this:

			RF myfunc(param1:Str, param2:Int, ...)

		RF means remote function and compiler checks for absence of upper-level variables references.

	* push/pop/shift/unshift for Hash
		To be consistent with Arr, which has all of these.
		The push is regular h[k] = v while others need additional vm functionality.
	* decorators / wrappers ?
	* "local x" at top level - check behaviour
	* solve the inheritance (also for "expose")
	* comments that begin not at beginning of line
	* OP_PUSH_INT - check limits of the number
	* text templates (stdlib I guess)
	* yaml
		* parse
		* generate

	* strings / mb_strings

	* data structure walk / data query language
		+ See
			+ jq
			+ jmespath

	* Local variables values in backtrace

	* Compile time stack depth check?

	* bitwise operations? "bor", "band", "bxor", ...

	* documentation
		* Add introspection for method source locations
[debt]

	* break / continue - disable when not in for

	* -pedantic

	* check integer overflows everywhere

[consider]
	* include * (glob)
	* Enull type - expected null (another, simpler take on same problem that Option in Scala solves)
		f(x:Enull) -> Enull
		Bool(x:Enull) -> false

[types]
	* Bin (or Bytes, later, after Str is multibyte)
	* Cloud / Compute / etc ?
	* Host
		+ ip?, public_ip, private_ip, other ips?
		+ image_id
		+ instance_id
		+ ssh_user()
		+ ssh_key()
		+ cloud type / endpoint / ... ?
	* HostsGroup
		+ refresh() or get()?
	* FSObject
		* File
		* Dir
	* Widget
		+ Command
		+ Status
		+ Progress
		+ Pipes
	* HistoryEntry

[functions]
	* read()
		+ allow auto-load missing implementations by extension and mime type
	* write()
	* now() - timestamp, time functions
	* stat(), mtime(), ...
	* file.relative_to(root)

[later / safety]
	* assert n_globals
	* integer VALUE overflows check
	* green threads?
