#!/usr/bin/env ngs
{

	# Autoload
	AWS
	ArgvMatcher
	Counter
	Iter
	KV
	Lock
	Res
	ResDef
	Stats
	Table
	Thread
	test

	# Use anonymous function to exclude methods in this file
	# The inner functions are local
	ns {

		global Arr, Str, init, push, each

		mode = ARGV[0]
		assert(mode == 'methods' or mode == 'types')

		type TextCollector

		F init(t:TextCollector, pfx='', pfx_inc='\t', heading_level=1) {
			init(args())
			t.pfx_stack = []
			t.acc = []
		}

		F push(t:TextCollector, s:Str) t.acc.push(t.pfx + s)

		F indent(t:TextCollector) {
			t.pfx_stack.push(t.pfx)
			t.pfx += t.pfx_inc
		}

		F indent(t:TextCollector, body:Fun) {
			t.indent()
			body()
			t.outdent()
		}

		F outdent(t:TextCollector) {
			t.pfx = t.pfx_stack.pop()
		}

		F heading_inc(t:TextCollector) t.heading_level+=1
		F heading_dec(t:TextCollector) t.heading_level-=1

		F heading_inc(t:TextCollector, body:Fun) {
			t.heading_inc()
			body()
			t.heading_dec()
		}


		F Arr(t:TextCollector) t.acc
		F Str(t:TextCollector) t.acc.join('\n')
		F each(t:TextCollector, *args) t.acc.each(*args)

		tc = TextCollector()


		# --- DocNode ---

		type DocNode
		type TextDocNode(DocNode)
			type TopDocNode(DocNode)
				type TypesDocNode(DocNode)
					type TypeDocNode(DocNode)
				type ParentTypesDocNode(DocNode)
					type ParentTypeDocNode(DocNode)
				type MethodsDocNode(DocNode)
					type MethodDocNode(DocNode)
						type MethodImplDocNode(DocNode)
							type DescDocNode(TextDocNode)
							type ParamsDocNode(DocNode)
								type ParamDocNode(DocNode)
									type ParamTypeDocNode(TextDocNode)
									type ParamDfltDocNode(TextDocNode)
									type ParamSpecialDfltDocNode(TextDocNode)
							type RetDocNode(TextDocNode)
							type ExampleDocNode(TextDocNode)
							type LocationDocNode(DocNode)

		F init(dn:DocNode, children:Arr=null) {
			if not(children) children = []
			init(args())
		}

		F init(tdn:TextDocNode, text:Arr) init(args())
		F init(tdn:TextDocNode, text:Str) super(tdn, [text])

		F push(dn:DocNode, child:DocNode) dn.children.push(child)

		F process_children(dn:DocNode, options:Hash, filt={true}) {
			tc.indent({ dn.children.filter(filt).Html(options) })
		}

		# --- Html ---

		F method_permalink(s:Str) '<a class="section-link" title="Permalink to this definition" href="#' + s.encode_html_attr() + '">¶</a>'

		F type_permalink(s:Str) '<a class="type-link" title="Permalink to this type" href="#' + s.encode_html_attr() + '">¶</a>'

		F type_ref_link(s:Str) '<a class="type-ref-link" title="See type" href="types.html#type-' + s.encode_html_attr() + '">' + s.encode_html() + '</a>'

		commit = `git rev-parse HEAD`.lines()[0]
		# https://github.com/ilyash/ngs/blob/00e547caf492e3ac42d2aca8ef32a28f302c7287/c/stdlib.ngs#L3197
		F make_location_link(dn:LocationDocNode) {
			{
				'text': "${dn.file}:${dn.line}"
				'link': "https://github.com/ilyash/ngs/blob/$commit/c/${dn.file}#L${dn.line}"
			}
		}


		F Html(a:Arr, options:Hash) a.each(Html(X, options))

		F Html(dn:TopDocNode, options:Hash={'pfx': '', 'do_pfx': true}) {
			tc.push('<!DOCTYPE html>')
			tc.push('<html>')
			tc.push('<head>')
			tc.push('<meta charset="UTF-8">')
			tc.push('<link rel="stylesheet" href="methods.css" type="text/css" />')
			tc.push('</head>')
			tc.push('<body>')
			dn.process_children(options)
			tc.push('</body>')
			tc.push('</html>')
			tc
		}

		F Html(dn:MethodsDocNode, options:Hash) {
			tc.push("<!-- methods start -->")
			tc.push("<h${tc.heading_level}>Methods</h${tc.heading_level}>")
			tc.heading_inc() do {
				dn.process_children(options)
			}
			tc.push("<!-- methods end -->")
		}

		F Html(dn:TypesDocNode, options:Hash) {
			tc.push("<!-- types start -->")
			tc.push("<h${tc.heading_level}>Types</h${tc.heading_level}>")
			tc.heading_inc() do {
				dn.process_children(options)
			}
			tc.push("<!-- types end -->")
		}

		F Html(dn:MethodDocNode, options:Hash) {
			not(dn.children.filter(MethodImplDocNode)) returns null
			tc.push('<section class="method">')
			link = method_permalink('method-' + dn.name)
			tc.push("<h${tc.heading_level} id=\"method-${dn.name.encode_html_attr()}\" class=\"method-header\">${dn.name.encode_html()}$link</h${tc.heading_level}>")
			tc.heading_inc() do {
				dn.process_children(options + {'method': dn.name}, MethodImplDocNode)
			}
			tc.push('</section>')
		}

		F Html(dn:TypeDocNode, options:Hash) {
			tc.push('<section class="type">')
			tc.indent() do {
				link = type_permalink('type-' + dn.name)
				type_name = dn.name
				tc.push("<h${tc.heading_level} id=\"type-${dn.name.encode_html_attr()}\" class=\"type-header\">${dn.name.encode_html()}$link</h${tc.heading_level}>")
				tc.push('<section class="type-content">')
				tc.indent() do {
					tc.heading_inc() do {
						dn.children.the_one(DescDocNode) do F(dn) {
							dn.text / encode_html % tc.push(X)
						}
						dn.children.the_one(ParentTypesDocNode) do F(dn) {
							tc.push("<h${tc.heading_level} id=\"type-${type_name.encode_html_attr()}-parents\" class=\"type-parents-header\">Parent types</h${tc.heading_level}>")
							tc.push("<ul>")
							tc.heading_inc() do {
								dn.process_children(options + {'leaf': true}, TypeDocNode)
							}
							tc.push("</ul>")
						}
						dn.children.the_one(ExampleDocNode) do F(dn) {
							tc.push("<h${tc.heading_level} id=\"type-${type_name.encode_html_attr()}-example\" class=\"example-header\">Example</h${tc.heading_level}>")
							tc.push('<section class="type-example-content">')
							tc.push('<pre class="example">' + dn.text.map(encode_html).join('\n') + '</pre>')
							tc.push('</section>') # type-example-content
						}
						# dn.process_children(options)
					}
				}
				tc.push('</section>')
			}
			tc.push('</section>')
		}

		F Html(dn:TypeDocNode, options:Hash) {
			guard options.get('leaf')
			tc.indent() do {
				tc.push("<li>${type_ref_link(dn.name)}")
				tc.indent() do {
					tc.heading_inc() do {
						dn.children.the_one(DescDocNode) do F(dn) {
							tc.push(" - ")
							dn.text / encode_html % tc.push(X)
						}
					}
				}
				tc.push("</li>")
			}
		}

		F Html(dn:MethodImplDocNode, options) {
			tc.push('<section class="method-impl">')

			params_dn = dn.children.the_one(ParamsDocNode)
			# echo(pdn)
			params = params_dn.children.map() with F(param_dn) {
				html = ''
				if 'splat' in param_dn {
					html += param_dn.splat
				}
				html += param_dn.name.encode_html()
				typ = param_dn.children.the_one(ParamTypeDocNode).text[0]
				if typ == 'Any' {
					html += ":${typ.encode_html()}"
				} else {
					html += ":${type_ref_link(typ)}"
				}
				param_dn.children.the_one(ParamDfltDocNode) do F(dflt) {
					html += "=${dflt.text[0].encode_html()}"
				}
				param_dn.children.the_one(ParamSpecialDfltDocNode) do F(dflt) {
					html += "=<em>${dflt.text[0].encode_html()}</em>"
				}
				html
			}

			p = params.join(', ')

			types = ('-' + params_dn.children.map(F(param_dn) param_dn.children.the_one(ParamTypeDocNode).text[0])).join('')
			link = method_permalink('impl-' + options.method.encode_html_attr() + types)
			tc.push("<h${tc.heading_level} id=\"impl-${options.method.encode_html_attr()}$types\" class=\"method-impl-header\">${options.method.encode_html()}($p)$link</h${tc.heading_level}>")
			tc.indent() do {
				tc.push('<section class="method-impl-content">')
				tc.heading_inc() do {
					dn.children.the_one(DescDocNode) do F(dn) {
						dn.text / encode_html % tc.push(X)
					}
					dn.children.the_one(LocationDocNode) do F(dn) {
						l = make_location_link(dn)
						tc.push("<section class=\"method-source\">Source: <a href=\"${l.link.encode_html_attr()}\" style=\"source-link\">${l.text.encode_html()}</a></section>")
					}
					dn.children.the_one(ParamsDocNode).children.each(F(param_dn:ParamDocNode) {
						if param_dn.children.any(DescDocNode) {
							tc.push("<h${tc.heading_level} class=\"param-header\">${param_dn.name.encode_html()}</h${tc.heading_level}>")
							tc.push('<section class="method-param-content">')
							param_dn.children.the_one(DescDocNode).text / encode_html % tc.push(X)
							tc.push('</section>') # method-param-content
						}
					})
					dn.children.the_one(RetDocNode) do F(dn) {
						tc.push("<h${tc.heading_level} id=\"impl-${options.method.encode_html_attr()}-returns\" class=\"returns-header\">Returns</h${tc.heading_level}>")
						tc.push('<section class="method-returns-content">')
						tc.push(dn.text.map(encode_html).join('\n'))
						tc.push('</section>') # method-example-content
					}
					dn.children.the_one(ExampleDocNode) do F(dn) {
						tc.push("<h${tc.heading_level} id=\"impl-${options.method.encode_html_attr()}-example\" class=\"example-header\">Example</h${tc.heading_level}>")
						tc.push('<section class="method-example-content">')
						tc.push('<pre class="example">' + dn.text.map(encode_html).join('\n') + '</pre>')
						tc.push('</section>') # method-example-content
					}
				}
				tc.push('</section>') # method-impl-content
			}
			tc.push('</section>') # method-impl
		}

		F is_public_name(s:Str) s ~ /^[^_]/
		F is_phased_out_type(s:Str) s ~ Pfx('Aws')

		F to_lines(s:Str) [s]
		F to_lines(a:Arr) a

		F process_param(param:Hash, doc:Hash) {
			# echo("P $param")
			dn = ParamDocNode()
			dn.name = param.name
			if 'type' in param {
				dn.push(ParamTypeDocNode(param.type.name))
			}
			if 'dflt' in param {
				dn.push() do
					ematch param.dflt {
						Fun ParamSpecialDfltDocNode('(a function)')
						Any ParamDfltDocNode(param.dflt.Str())
					}
			}
			if 'splat' in param {
				dn.splat = param.splat
			}
			if param.name in doc {
				dn.push(DescDocNode(doc[param.name]))
			}
			dn
		}

		F process_method_impl_doc_attr(mi:Fun, dn:DocNode, doc_attr:Str, doc_node_type:Type) {
			d = mi.attrs().doc or {}
			if doc_attr in d {
				dn.push(doc_node_type(d[doc_attr].to_lines()))
			}
		}

		F process_type_impl_doc_attr(t:Type, dn:DocNode, doc_attr:Str, doc_node_type:Type) {
			a = t.attrs()
			'doc' not in a returns null
			d = t.attrs().doc or {}
			if doc_attr in d {
				dn.push(doc_node_type(d[doc_attr].to_lines()))
			}
		}

		pfx = Pfx("$NGS_DIR/")
		F process_method_impl(mi:Fun) {
			dn = MethodImplDocNode([])
			process_method_impl_doc_attr(mi, dn, '', DescDocNode)
			dn.push(ParamsDocNode(mi.params().map(process_param(X, mi.attrs().doc or {}))))
			process_method_impl_doc_attr(mi, dn, '%EX', ExampleDocNode)
			process_method_impl_doc_attr(mi, dn, '%RET', RetDocNode)

			if mi is Closure {
				# Handling Closure, not handling built-ins yet
				location_info = mi.ip().resolve_instruction_pointer()
				if m = location_info.file ~ pfx {
					dn.push(LocationDocNode().set('file', m.after).set('line', location_info.first_line))
				}
			}

			dn
		}

		F process_method(name, value) {
			dn = MethodDocNode(value.map(process_method_impl))
			dn.name = name
			dn
		}

		methods = MethodsDocNode()

		g = globals()

		eswitch mode {
			'methods' {
					g.filterk(is_public_name).sortk(lte).each(F(name, value) {
					cond {
						(value is Arr) and value.all(Fun)
							methods.push(process_method(name, value))
						value is Type {
							# process_type(name, value)
							c = value.constructors
							if value is NormalType {
								# NormalType has special constructor which we can't handle for now
								# so skipping that one
								c = c[1..null]
							}
							methods.push(process_method(name, c))
						}
					}
				})
				page = TopDocNode([methods])
			}
			'types' {
				
				F type_to_doc_node(value:Type, full:Bool) {
					# echo("N $name")
					# ret = TypeDocNode([ParentTypesDocNode(value.parents.map())])
					ret = TypeDocNode()
					ret.name = value.name
					# ret.full = full
					process_type_impl_doc_attr(value, ret, '', DescDocNode)
					if full {
						process_type_impl_doc_attr(value, ret, '%EX', ExampleDocNode)
						if value.parents {
							ret.push(ParentTypesDocNode(value.parents.map(type_to_doc_node(X, false))))
						}
					}
					ret
				}

				types = g.filterv(Type).filterk(is_public_name).filterk(not + is_phased_out_type).sortk(lte).map(F(name, value) {
					type_to_doc_node(value, true)
				})
				tdn = TypesDocNode(types)
				page = TopDocNode([tdn])
			}
		}

		echo(Html(page))

		# echo(methods.children[-100])
	}
}

