#!/usr/bin/env ngs
{

	# TODO: Get rid of global state (tc = TextCollector)

	# Autoload
	AWS
	ArgvMatcher
	DelimStr
	Iter
	KV
	Lock
	Res
	ResDef
	Stats
	Table
	Thread
	test

	# Use anonymous function to exclude methods in this file
	# The inner functions are local
	ns {

		global Arr, Str, init, push, each

		mode = ARGV[0]
		assert(mode == 'methods' or mode == 'types')

		type TextCollector

		F init(t:TextCollector, pfx='', pfx_inc='\t', heading_level=1) {
			init(args())
			t.pfx_stack = []
			t.acc = []
		}

		F push(t:TextCollector, s:Str) t.acc.push(t.pfx + s)

		F indent(t:TextCollector) {
			t.pfx_stack.push(t.pfx)
			t.pfx += t.pfx_inc
		}

		F indent(t:TextCollector, body:Fun) {
			t.indent()
			body()
			t.outdent()
		}

		F outdent(t:TextCollector) {
			t.pfx = t.pfx_stack.pop()
		}

		F heading_inc(t:TextCollector) t.heading_level+=1
		F heading_dec(t:TextCollector) t.heading_level-=1

		F heading_inc(t:TextCollector, body:Fun) {
			t.heading_inc()
			body()
			t.heading_dec()
		}


		F Arr(t:TextCollector) t.acc
		F Str(t:TextCollector) t.acc.join('\n')
		F each(t:TextCollector, *args) t.acc.each(*args)

		tc = TextCollector()

		# --- DocNode ---

		type DocNode
		type TextDocNode(DocNode)
			type TopDocNode(DocNode)
				type TypesDocNode(DocNode)
					type TypeDocNode(DocNode)
						type TypeFieldsDocNode(DocNode)
							type TypeFieldDocNode(TextDocNode)
						type TypeMethodsDocNode(DocNode)
							type TypeMethodDocNode(DocNode)
								type TypeMethodImplDocNode(DocNode)
						type TypeConstructorsDocNode(DocNode)
				type ParentTypesDocNode(DocNode)
				type ChildTypesDocNode(DocNode)
					type ParentTypeDocNode(DocNode)
				type MethodsDocNode(DocNode)
					type MethodDocNode(DocNode)
						type MethodImplDocNode(DocNode)
							type DescDocNode(TextDocNode)
							type ParamsDocNode(DocNode)
								type ParamDocNode(DocNode)
									type ParamDfltDocNode(TextDocNode)
									type ParamSpecialDfltDocNode(TextDocNode)
							type RetDocNode(TextDocNode)
							type ExampleDocNode(TextDocNode)
							type LocationDocNode(DocNode)

		F init(dn:DocNode, children:Arr=null) {
			if not(children) children = []
			init(args())
		}

		F init(tdn:TextDocNode, text:Arr) init(args())
		F init(tdn:TextDocNode, text:Str) super(tdn, [text])

		F push(dn:DocNode, child:DocNode) dn.children.push(child)

		F process_children(dn:DocNode, options:Hash, filt={true}) {
			tc.indent({ dn.children.filter(filt).Html(options) })
		}

		F encode_id(s:Str) s.replace(/[^-_a-zA-Z0-9]/, F(char) '%' + encode_hex(char))

		# --- Html ---

		# Method permalink points to the index page
		F method_permalink(s:Str) '<a class="section-link" title="Permalink to this definition" href="#method-' + s.encode_html_attr() + '">¶</a>'

		# Note that id is not unique! There can be several implementations with same parameters types
		F method_impl_id(name:Str, mi:Fun) (name + '-' + mi.params().type.name.join('-')).encode_id()

		# Method implementation permalink points to the index page
		F method_impl_permalink(name:Str, mi:Fun) {
			id = method_impl_id(name, mi)
			'<a class="method-impl-details-link" href="method-impl-' + id.encode_uri_component().encode_html_attr() + '.html">' + name.encode_html() + '</a>'
		}

		F type_permalink(t:Type)    '<a class="type-link" title="Permalink to this type" href="#type-' + t.name.encode_html_attr() + '">¶</a>'
		F type_details_link(t:Type) '<a class="type-details-link" href="type-' + t.name.encode_html_attr() + '.html">' + t.name.encode_html() + '</a>'

		F method_ref_link(display_name:Str, link_data:Str) '<a class="method-ref-link" title="See method" href="methods.html#impl-' + link_data.encode_html_attr() + '">' + display_name + '</a>'

		commit = `git rev-parse HEAD`.lines()[0]
		# https://github.com/ilyash/ngs/blob/00e547caf492e3ac42d2aca8ef32a28f302c7287/c/stdlib.ngs#L3197
		F make_location_link(dn:LocationDocNode) {
			{
				'text': "${dn.file}:${dn.line}"
				'link': "https://github.com/ilyash/ngs/blob/$commit/lib/${dn.file}#L${dn.line}"
			}
		}


		F Html(a:Arr, options:Hash) a.each(Html(X, options))

		F Html(dn:TopDocNode, options:Hash={'pfx': '', 'do_pfx': true}) {
			tc.push('<!DOCTYPE html>')
			tc.push('<html>')
			tc.push('<head>')
			tc.push('<meta charset="UTF-8">')
			tc.push('<link rel="stylesheet" href="methods.css" type="text/css" />')
			tc.push('</head>')
			tc.push('<body>')
			dn.process_children(options)
			tc.push('</body>')
			tc.push('</html>')
			tc
		}

		F Html(dn:MethodsDocNode, options:Hash) {
			tc.push("<!-- methods start -->")
			tc.push("<h${tc.heading_level}>Methods</h${tc.heading_level}>")
			tc.heading_inc() do {
				dn.process_children(options)
			}
			tc.push("<!-- methods end -->")
		}

		F Html(dn:TypeMethodsDocNode, options:Hash) {
			not(dn.children) returns null
			tc.push("<!-- type methods start -->")
			tc.push("<h${tc.heading_level}>Methods</h${tc.heading_level}>")
			tc.heading_inc() do {
				dn.process_children(options)
			}
			tc.push("<!-- type methods end -->")
		}

		F Html(dn:TypeConstructorsDocNode, options:Hash) {
			not(dn.children) returns null
			tc.push("<!-- type constructors start -->")
			tc.push("<h${tc.heading_level}>Constructors</h${tc.heading_level}>")
			tc.heading_inc() do {
				dn.process_children(options + {'method': dn.method}, TypeMethodImplDocNode)
			}
			tc.push("<!-- type constructors end -->")
		}

		F Html(dn:TypesDocNode, options:Hash) {
			tc.push("<!-- types start -->")
			tc.push("<h${tc.heading_level}>Types</h${tc.heading_level}>")
			tc.heading_inc() do {
				dn.process_children(options)
			}
			tc.push("<!-- types end -->")
		}

		F Html(dn:MethodDocNode, options:Hash) {
			not(dn.children.filter(MethodImplDocNode)) returns null
			tc.push('<section class="method">')
			link = method_permalink(dn.name)
			tc.push("<h${tc.heading_level} id=\"method-${dn.name.encode_html_attr()}\" class=\"method-header\">${dn.name.encode_html()}$link</h${tc.heading_level}>")
			tc.heading_inc() do {
				dn.process_children(options + {'method': dn.name}, MethodImplDocNode)
			}
			tc.push('</section>')
		}

		F Html(dn:TypeMethodDocNode, options:Hash) {
			dn.process_children(options + {'method': dn.method}, TypeMethodImplDocNode)
		}

		F Html(dn:TypeFieldsDocNode, options:Hash) {
			not(dn.children) returns null
			tc.push("<h${tc.heading_level} class=\"fields-header\">Fields</h${tc.heading_level}>")
			tc.push('<section class="type-fileds-content">')
			dn.process_children(options)
			tc.push('</section>') # type-field-content
		}

		F Html(dn:TypeFieldDocNode, options:Hash) {
			tc.push("<h${tc.heading_level} class=\"param-header\">${dn.name.encode_html()}</h${tc.heading_level}>")
			tc.push('<section class="type-field-content">')
			dn.text / encode_html % tc.push(X)
			tc.push('</section>') # type-field-content
		}

		F Html(dn:ParentTypesDocNode, options:Hash) {
			not(dn.children) returns null
			tc.push("<h${tc.heading_level} class=\"type-parents-header\">Parent types</h${tc.heading_level}>")
			tc.push("<ul>")
			dn.process_children(options + {'leaf': true}, TypeDocNode)
			tc.push("</ul>")
		}

		F Html(dn:ChildTypesDocNode, options:Hash) {
			not(dn.children) returns null
			tc.push("<h${tc.heading_level} class=\"type-parents-header\">Direct children types</h${tc.heading_level}>")
			tc.push("<ul>")
			dn.process_children(options + {'leaf': true}, TypeDocNode)
			tc.push("</ul>")
		}

		F Html(dn:TypeDocNode, options:Hash) {
			tc.push('<section class="type">')
			tc.indent() do {
				type_name = dn.type.name
				if options.get('detailed_type_page') {
					tc.push("<h${tc.heading_level} id=\"type-${dn.type.name.encode_html_attr()}\" class=\"type-header\">${dn.type.name.encode_html()}</h${tc.heading_level}>")
				} else {
					tc.push("<h${tc.heading_level} id=\"type-${dn.type.name.encode_html_attr()}\" class=\"type-header\">${type_details_link(dn.type)}</h${tc.heading_level}>")
				}
				tc.push('<section class="type-content">')
				tc.indent() do {
					tc.heading_inc() do {
						dn.children.the_one(DescDocNode) do F(dn) {
							dn.text / encode_html % tc.push(X)
						}
						if options.get('detailed_type_page') {
							dn.process_children(options, TypeFieldsDocNode)
							dn.children.the_one(ParentTypesDocNode).Html(options)
							dn.children.the_one(ChildTypesDocNode).Html(options)
							dn.children.the_one(ExampleDocNode) do F(dn) {
								tc.push("<h${tc.heading_level} id=\"type-${type_name.encode_html_attr()}-example\" class=\"example-header\">Example</h${tc.heading_level}>")
								tc.push('<section class="type-example-content">')
								tc.push('<pre class="example">' + dn.text.map(encode_html).join('\n') + '</pre>')
								tc.push('</section>') # type-example-content
							}
							dn.process_children(options, TypeConstructorsDocNode)
							dn.process_children(options, TypeMethodsDocNode)
						}
					}
				}
				tc.push('</section>')
			}
			tc.push('</section>')
		}

		F Html(dn:TypeDocNode, options:Hash) {
			guard options.get('leaf')
			tc.indent() do {
				tc.push("<li>${type_details_link(dn.type)}")
				tc.indent() do {
					tc.heading_inc() do {
						dn.children.the_one(DescDocNode) do F(dn) {
							tc.push(" - ")
							dn.text / encode_html % tc.push(X)
						}
					}
				}
				tc.push("</li>")
			}
		}

		F HtmlParams(dn:DocNode) {
			params_dn = dn.children.the_one(ParamsDocNode)
			# echo(pdn)
			params = params_dn.children.map() with F(param_dn) {
				html = ''
				if 'splat' in param_dn {
					html += param_dn.splat
				}
				html += param_dn.name.encode_html()
				html += ':'
				html += type_details_link(param_dn.type)
				param_dn.children.the_one(ParamDfltDocNode) do F(dflt) {
					html += "=${dflt.text[0].encode_html()}"
				}
				param_dn.children.the_one(ParamSpecialDfltDocNode) do F(dflt) {
					html += "=<em>${dflt.text[0].encode_html()}</em>"
				}
				html
			}
			params.join(', ')
		}

		F Html(dn:MethodImplDocNode, options) {
			tc.push('<section class="method-impl">')
			link = method_impl_permalink(options.method, dn.mi)

			if options.get('detailed_method_page') {
				tc.push("<h${tc.heading_level} class=\"method-impl-header\">${options.method.encode_html()}(${HtmlParams(dn)})</h${tc.heading_level}>")
			} else {
				tc.push("<h${tc.heading_level} class=\"method-impl-header\">$link(${HtmlParams(dn)})</h${tc.heading_level}>")
			}

			tc.indent() do {
				tc.push('<section class="method-impl-content">')
				tc.heading_inc() do {
					dn.children.the_one(DescDocNode) do F(dn) {
						dn.text / encode_html % tc.push(X)
					}
					if options.get('detailed_method_page') {
							dn.children.the_one(LocationDocNode) do F(dn) {
								l = make_location_link(dn)
								tc.push("<section class=\"method-source\">Source: <a href=\"${l.link.encode_html_attr()}\" style=\"source-link\">${l.text.encode_html()}</a></section>")
							}
							dn.children.the_one(ParamsDocNode).children.each(F(param_dn:ParamDocNode) {
								if param_dn.children.any(DescDocNode) {
									tc.push("<h${tc.heading_level} class=\"param-header\">${param_dn.name.encode_html()}</h${tc.heading_level}>")
									tc.push('<section class="method-param-content">')
									param_dn.children.the_one(DescDocNode).text / encode_html % tc.push(X)
									tc.push('</section>') # method-param-content
								}
							})
							dn.children.the_one(RetDocNode) do F(dn) {
								tc.push("<h${tc.heading_level} id=\"impl-${options.method.encode_html_attr()}-returns\" class=\"returns-header\">Returns</h${tc.heading_level}>")
								tc.push('<section class="method-returns-content">')
								tc.push(dn.text.map(encode_html).join('\n'))
								tc.push('</section>') # method-example-content
							}
							dn.children.the_one(ExampleDocNode) do F(dn) {
								tc.push("<h${tc.heading_level} id=\"impl-${options.method.encode_html_attr()}-example\" class=\"example-header\">Example</h${tc.heading_level}>")
								tc.push('<section class="method-example-content">')
								tc.push('<pre class="example">' + dn.text.map(encode_html).join('\n') + '</pre>')
								tc.push('</section>') # method-example-content
							}
					}
					tc.push('</section>') # method-impl-content
				}
			}
			tc.push('</section>') # method-impl
		}

		F Html(dn:TypeMethodImplDocNode, options) {
			tc.push('<section class="type-method-impl">')
			tc.push(method_impl_permalink(options.method, dn.mi) + "(${HtmlParams(dn)})")
			dn.children.the_one(DescDocNode) do F(dn) {
				tc.push('<section class="type-method-impl-desc">')
				dn.text / encode_html % tc.push(X)
				tc.push('</section>') # type-method-impl
			}
			tc.push('</section>') # type-method-impl
		}

		F is_public_name(s:Str) s ~ /^[^_]/
		F is_phased_out_type(s:Str) s ~ Pfx('Aws')

		F to_lines(s:Str) [s]
		F to_lines(a:Arr) a

		F list_methods()
			collector/{}
				globals().filterk(is_public_name).sortk(lte).each(F(name, value) {
					cond {
						(value is Arr) and value.all(Fun) {
							collect(name, value)
						}
						value is NormalType {
							# NormalType has special constructor which we can't handle for now
							# so skipping that one
							collect(name, value.constructors[1..null])
						}
						value is Type {
							collect(name, value.constructors)
						}
					}
				})

		F process_param(param:Hash, doc:Hash) {
			# echo("P $param")
			dn = ParamDocNode()
			dn.name = param.name
			dn.type = param.get('type', Any)
			if 'dflt' in param {
				dn.push() do
					ematch param.dflt {
						Fun ParamSpecialDfltDocNode('(a function)')
						Any ParamDfltDocNode(param.dflt.Str())
					}
			}
			if 'splat' in param {
				dn.splat = param.splat
			}
			if param.name in doc {
				dn.push(DescDocNode(doc[param.name]))
			}
			dn
		}

		F process_method_impl_doc_attr(mi:Fun, dn:DocNode, doc_attr:Str, doc_node_type:Type) {
			d = mi.attrs().doc or {}
			if doc_attr in d {
				dn.push(doc_node_type(d[doc_attr].to_lines()))
			}
		}

		F process_type_impl_doc_attr(t:Type, dn:DocNode, doc_attr:Str, doc_node_type:Type) {
			a = t.attrs()
			'doc' not in a returns null
			d = t.attrs().doc or {}
			if doc_attr in d {
				dn.push(doc_node_type(d[doc_attr].to_lines()))
			}
		}

		method_impls_by_id = {}

		pfx = Pfx("$NGS_DIR/")
		F process_method_impl(name:Str, mi:Fun) {
			method_impls_by_id.dflt(method_impl_id(name, mi), [name]).push(mi)

			dn = MethodImplDocNode([])
			dn.mi = mi
			process_method_impl_doc_attr(mi, dn, '', DescDocNode)
			dn.push(ParamsDocNode(mi.params().map(process_param(X, mi.attrs().doc or {}))))
			process_method_impl_doc_attr(mi, dn, '%EX', ExampleDocNode)
			process_method_impl_doc_attr(mi, dn, '%RET', RetDocNode)

			if mi is UserDefinedMethod {
				# Handling UserDefinedMethod, not handling built-ins yet
				location_info = mi.ip().resolve_instruction_pointer()
				if m = location_info.file ~ pfx {
					dn.push(LocationDocNode().set('file', m.after).set('line', location_info.first_line))
				}
			}
			dn
		}

		F process_method(name, value) {
			dn = MethodDocNode(value.map(process_method_impl(name, X)))
			dn.name = name
			dn
		}

		eswitch mode {

			'methods' {

				# Index page
				page = TopDocNode([ MethodsDocNode(list_methods() / process_method) ])

				# Detailed method implementations pages
				method_impls_by_id.each(F(id, impls) {
					assert('/' not in id)
					assert('.' not in id)
					tc = TextCollector()
					local mdn = MethodsDocNode([process_method(impls[0], impls[1..null])])
					local page = TopDocNode([mdn])
					local html = Html(page, {'detailed_method_page': true})
					html.Str().write("method-impl-${id}.html")
				})

			}

			'types' {

				# TODO: methods with this type
				# TODO: constructors
				# TODO: child types

				# Splat params will be Arr or Hash but they are not interesting
				F method_impl_has_arg_of_type(mi:Fun, t:Type) mi.params().reject(X.get('splat')).type.has(t)

				# We'll use it to list methods that have given
				# type as type of one of the parameters.
				methods = list_methods()

				types = globals().filterv(Type).filterk(is_public_name).filterk(not + is_phased_out_type).sortk(lte)

				# Init with ( type -> [] ) pairs
				types_direct_children = types.values().Hash({ [] })

				types.values().each(F(t) {
					t.parents.each(F(p) {
						types_direct_children[p].push(t)
					})
				})


				# TODO: straighten by using ParentTypeDocNode instead of 'full' / 'leaf' option.
				F type_to_doc_node(value:Type, full:Bool) {
					# echo("N $name")
					# ret = TypeDocNode([ParentTypesDocNode(value.parents.map())])
					ret = TypeDocNode()
					ret.type = value
					# ret.full = full
					process_type_impl_doc_attr(value, ret, '', DescDocNode)
					type_attrs_dns = ((try value.attrs().doc) or {}).without('').reject(X ~ /^%/).map(F(k, v) {
						TypeFieldDocNode(v.to_lines()).set('name', k)
					})
					ret.push(TypeFieldsDocNode(type_attrs_dns))

					if full {
						process_type_impl_doc_attr(value, ret, '%EX', ExampleDocNode)
						ret.push(ParentTypesDocNode(value.parents.map(type_to_doc_node(X, false))))
						ret.push(ChildTypesDocNode(types_direct_children[value].map(type_to_doc_node(X, false))))
						methods_of_type_dns = collector
							methods.each() do F(name, impls) {
								relevant_impls = impls.filter(method_impl_has_arg_of_type(X, value)).map() do F(mi) {
									dn = TypeMethodImplDocNode([])
									dn.mi = mi
									process_method_impl_doc_attr(mi, dn, '', DescDocNode)
									dn.push(ParamsDocNode(mi.params().map(process_param(X, mi.attrs().doc or {}))))
									dn
								}
								if relevant_impls {
									dn = TypeMethodDocNode(relevant_impls)
									dn.method = name
									collect(dn)
								}
							}
						constructors_dns = value.constructors.reject(NormalTypeConstructor).map() do F(c) {
							dn = TypeMethodImplDocNode([])
							# dn.method = value.name
							dn.mi = c
							process_method_impl_doc_attr(c, dn, '', DescDocNode)
							dn.push(ParamsDocNode(c.params().map(process_param(X, c.attrs().doc or {}))))
							dn
						}
						ret.push(TypeMethodsDocNode(methods_of_type_dns))
						ret.push(TypeConstructorsDocNode(constructors_dns).set('method', value.name))
					}
					ret
				}

				types .= map(F(name, value) {
					type_to_doc_node(value, true)
				})

				# Index page
				tdn = TypesDocNode(types)
				page = TopDocNode([tdn])

				# Detailed types pages
				types.each(F(t) {
					assert('/' not in t.type.name)
					assert('.' not in t.type.name)
					tc = TextCollector()
					local tdn = TypesDocNode([t])
					local page = TopDocNode([tdn])
					local html = Html(page, {'detailed_type_page': true})
					html.Str().write("type-${t.type.name}.html")
				})
			}

		}

		tc = TextCollector()
		echo(Html(page))

		# echo(methods.children[-100])
	}
}

