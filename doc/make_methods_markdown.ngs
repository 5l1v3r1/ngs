#!/usr/bin/env ngs
{
	# Autoload
	Table
	Stats

	# Use anonymous function to exclude methods in this file
	# The inner functions are local
	F(){


		# TODO: consider introducing Param type
		# TODO: improve escaping
		F escape_markdown(s:Str) "`$s`"
		F escape_markdown(s:Str) {
			guard s == '``'
			'```` `` ````'
		}
		F escape_markdown(s:Str) {
			guard s == '````'
			'```````` ```` ````````'
		}

		F param_to_str(p:Hash) {
			ret = "${p.name}:${p.type.name}"
			if 'splat' in p
				ret = "${p.splat}${ret}"
			if 'dflt' in p
				ret = "${ret}=${p.dflt}"
			ret
		}

		F print_doc_val(v:Str, pfx:Str) {
			echo("${pfx}${v}")
		}

		F doc_has_key(doc:Hash, k:Str) k in doc

		F doc_has_key(doc:Null, k:Str) false

		F print_doc_key(doc:Hash, pfx:Str, k:Str) {
			econd {
				k not in doc
					null
				doc[k] is Arr
					doc[k].each(print_doc_val, pfx)
				doc[k] is Str
					print_doc_val(doc[k], pfx)
			}
		}

		F print_doc_key(doc:Null, pfx:Str, k:Str) null

		F print_method_doc(name:Str, value) {
			guard value is Arr
			guard value.all((is), Fun)
			not(value) returns null
			echo("# Methods: ${name.escape_markdown()}")
			value.each(F(method_implementation) {
				local doc = method_implementation.attrs().doc
				local params_strings = method_implementation.params().map(param_to_str)
				local header_name = escape_markdown("${name}(${params_strings.join(', ')})")
				echo("## $header_name")
				if doc_has_key(doc, "") {
					echo("### Description")
					print_doc_key(doc, "    ", "")
				}
				# if method_implementation.params().any(F(param) {doc_has_key(doc, param.name)}) {
				# 	echo("### Parameters")
				# }
				method_implementation.params().each(F(param) {
					local param_string = param_to_str(param)
					if doc_has_key(doc, param.name) {
						echo("### Parameter ${param_string}")
						print_doc_key(doc, "    ", param.name)
					}
				})
				if doc_has_key(doc, '%RET') {
					echo("### Returns")
					print_doc_key(doc, "    ", '%RET')
				}
				if doc_has_key(doc, '%EX') {
					echo("### Example")
					print_doc_key(doc, "    ", '%EX')
				}
			})
		}

		F print_type_doc(name:Str, value) {
			local doc = try value.attrs().doc
			not(doc) returns null
			echo("# Type: ${name.escape_markdown()}")
			if doc_has_key(doc, "") {
				echo("## Description")
				print_doc_key(doc, "    ", "")
			}
			if doc is Hash {
				doc.keys().each(F(k) {
					if k != "" {
						echo("## Field ${k.escape_markdown()}")
						print_doc_key(doc, "    ", k)
					}
				})
			}
		}

		local g = globals()
		g.keys().sort(lte).each(F(name) {
			value = g[name]
			cond {
				value is Arr
					print_method_doc(name, value)
				value is BasicType
					print_method_doc(name, value.constructors)
				value is NormalType {
					print_type_doc(name, value)
					print_method_doc(name, value.constructors[1..null])
				}
			}
		})

	}()
}
