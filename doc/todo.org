#+STARTUP: indent
#+TODO: TODO PROGRESS PENDING | DONE

* Now
** TODO Fix incorrect order in expr: 10-1-2
** DONE Syntax - add parentheses
** TODO __get_item() / __set_item() for accessing array indexes
** TODO examples folder with snippets + tests for the snippets
** TODO Special-case (non-native!) "-..." execs: "test -.... "
** Add comments
*** TODO "#"
*** TODO "//"
** TODO Exceptions
** TODO Failing spawn should generate exception
... and some convenient mechanism to ignore that
** TODO Native code calling user-land
** TODO case
** TODO String interpolation: "xyz${expr}ww"
also "xyz$(cmd)ww"
* Type system
** TODO Refactor objects creation
from [type, val] expr
to make_TYP(val)
** Function call
*** DONE Call
*** Arguments
**** DONE Positional
***** DONE Pass
***** DONE Receive
***** TODO Splice positional
***** TODO Splice keywords
**** TODO Named
**** TODO Default value
** TODO Convenience obj.method() syntax
** TODO Fields access for composite types
** TODO Function: last evaluated expr is the return value
** TODO Generate constructor function
** TODO Inheritance (also: mixins, runtime inheritance change?)
** TODO Casting
** Multi-method
*** PROGRESS Guards
*** Equality testing in params
*** Consider "fake" params
** TODO Parametrized types
** TODO [think] Runtime type change: RunningProcess -> FinishedProcess
* Error reporting
** TODO Backtraces, do not "throw"
+ Method not found
+ "inspect" function to print objects
* Local vars / lexical scope
* Modules - load, user defined load, etc
+ Like nodejs with json
* Get exec output and status (field access)
* Commands one by one from CLI (solve globals, etc)
* Session
* Pubsub
* Polling for CLI
* Echo function
* Host groups and target host
* Security for code (permissions)
