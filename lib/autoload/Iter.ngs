{
	doc Iterator. Parent type for all specific iterator types.
	type Iter

	doc Represents attempt to fetch next value of an iterator when it's exhausted
	doc %EX - { Iter([]).next() }
	doc %EX - # ... Exception of type NoNext ...
	type NoNext(Exception)

	doc Arr (array) iterator.
	doc %EX -
	doc %EX - my_args = %[--switch val some other positional --sw2 val2]
	doc %EX - i = Iter(my_args)
	doc %EX -
	doc %EX - named = {}
	doc %EX - positional = []
	doc %EX -
	doc %EX - while i {
	doc %EX - 	t = i.next()
	doc %EX - 	m = t ~ Pfx('--')
	doc %EX - 	if m {
	doc %EX - 		named[m.after] = i.next()
	doc %EX - 	} else {
	doc %EX - 		positional.push(t)
	doc %EX - 	}
	doc %EX - }
	doc %EX -
	doc %EX - echo(named)
	doc %EX - echo(positional)
	doc %EX - # Output:
	doc %EX - #   {switch=val, sw2=val2}
	doc %EX - #   ['some','other','positional']
	type ArrIter([Iter, Eachable1])

	doc EXPERIMENTAL Hash iterator.
	type HashIter(Iter)

	doc Iterator that returns given value forever.
	doc %EX - { Iter }
	doc %EX - i = ConstIter(10)
	doc %EX - echo(i.next())
	doc %EX - echo(i.next())
	doc %EX - # Output:
	doc %EX - #   10
	doc %EX - #   10
	type ConstIter([Iter, Eachable1])

	doc Iterates over a Range
	doc %EX - { Iter }
	doc %EX - i = RangeIter(10..20)
	doc %EX - echo(i.next())
	doc %EX - echo(i.next())
	doc %EX - # Output:
	doc %EX - #   10
	doc %EX - #   11
	type RangeIter([Iter, Eachable1])
}

doc Private method of Iter.ngs, will be hidden in future.
F throw_if_no_next(i:Iter) {
	not(i) throws NoNext("No next element in iterator").set('iter', i)
}

doc Fetch and drop next n values from iterator i.
doc %EX - i = Iter([10,20,30])
doc %EX - drop(i, 1)
doc %EX - echo(i.next())
doc %EX - #   20
F drop(i:Iter, n:Int) { n.times({ i.next()}); i }

doc Fetch and convert to array next n values from iterator i.
doc %EX - i = Iter([10,20,30])
doc %EX - echo(i.take(2))
F take(i:Iter, n:Int) n.map({ i.next() })

doc Supports "for i in existing_iterator"
doc %RET - i
F Iter(i:Iter) i

doc Calls cb with each element from i
doc %RET - i
F each(i:Iter, cb:Fun) {
	for elt in i {
		cb(elt)
	}
	i
}

TEST s=0; NumRange(1,10,true,true).Iter().each({ s+= A }); s==55

# ---------- ConstIter ----------
doc Constant iterator constructor.
doc val - the constant value to use in next() and peek()
F init(i:ConstIter, val) init(args())

doc Return the constant iterator value
F next(i:ConstIter) i.val

doc Return the constant iterator value
F peek(i:ConstIter) i.val

doc %RET - true
F Bool(i:ConstIter) true

TEST ConstIter(7).drop(10).take(2) == [7,7]

# ---------- RangeIter ----------
F Iter(r:NumRange) RangeIter(r)

F init(i:RangeIter, r:NumRange) {
	r.start is not Int throws NotImplemented("start must be Int for now").set('value', r)
	r.step is not Int throws NotImplemented("step must be Int for now").set('value', r)
	i.val = r
	i.elt = r.start + if r.include_start then 0 else r.step
}

F next(i:RangeIter) {
	throw_if_no_next(i)
	ret = i.elt
	i.elt += i.val.step
	ret
}

F Bool(i:RangeIter) {
	r = i.val
	# Copy+paste from each(r:NumRange, cb:Fun) from stdlib
	# TODO: deduplicate the code
	econd {
		(r.end is NoData) or (r.step == 0) {
			cmp = F(a,b) true
		}
		r.step > 0 {
			cmp = if r.include_end (<=) (<)
		}
		r.step < 0 {
			cmp = if r.include_end (>=) (>)
		}
	}
	cmp(i.elt, r.end)
}

TEST NumRange(1, 4, false, false).Iter().Arr() == [2,3]
TEST NumRange(1, 4, false, true).Iter().Arr() == [2,3,4]
TEST NumRange(1, 4, true, false).Iter().Arr() == [1,2,3]
TEST NumRange(1, 4, true, true).Iter().Arr() == [1,2,3,4]

# ---------- ArrIter ----------
doc Calls ArrIter constructor.
doc %EX - i = Iter([10, 20, 30])
doc %RET - ArrIter
F Iter(arr:Arr) ArrIter(arr)

doc ArrIter constructor.
doc %EX - i = ArrIter([10, 20, 30])
F init(i:ArrIter, arr:Arr) {
	i.val = arr
	i.idx = 0
}

doc Textual representation of ArrIter.
doc %RET - Str
F Str(i:ArrIter) "<ArrIter ${i.idx}/${i.val.len()}>"

doc Check whether there are more array elements to iterate over.
doc true: next() will return next element. false: next() will throw NoNext
doc %RET - Bool
F Bool(i:ArrIter) i.idx < i.val.len()

doc Get value of the next element of the array iterated over.
doc %RET - Any
F next(i:ArrIter) {
	throw_if_no_next(i)
	ret = i.val[i.idx]
	i.idx += 1
	ret
}

doc Preview value of the next element of the array iterated over.
doc Does not affect internal pointer which means it does not affect of value returned by next().
doc %RET - Any
F peek(i:ArrIter) {
	throw_if_no_next(i)
	i.val[i.idx]
}

TEST i = Iter([1,2]); [i.next(), i.peek()] == [1,2]
TEST try [].Iter().next() catch(nn:NoNext) true

# EXPERIMENTAL
# Not sure it's needed but it's good to have it for completeness
# ---------- HashIter ----------
F Iter(h:Hash) HashIter(h)
doc EXPERIMENTAL! Do not use!
F init(i:HashIter, h:Hash) {
	i.val = h
	i._iter = h.keys().Iter()
}

# Don't like accessing kind-of-private ArrIter#idx
F Str(i:HashIter) "<HashIter ${i._iter.idx}/${i._iter.val.len()}>"

doc Check whether there are more pairs to iterate over.
doc true: next() will return next pair. false: next() will throw NoNext
doc %RET - Bool
F Bool(i:HashIter) Bool(i._iter)

F next(i:HashIter) { throw_if_no_next(i); k = i._iter.next(); [k, i.val[k]] }
F peek(i:HashIter) { throw_if_no_next(i); k = i._iter.peek(); [k, i.val[k]] }

TEST i = Iter({"a": 1, "b": 2}); [i.next(), i.peek()] == [["a", 1], ["b", 2]]
TEST try {}.Iter().next() catch(nn:NoNext) true
