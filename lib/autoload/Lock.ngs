{
	type Lock

	type LockFail
	LockFail.inherit(Exception)

	F init(e:LockFail, op:Str, code:Int, msg:Str) init(args())

	F init(l:Lock) {
		l.lock = c_pthread_mutex_t()
		code = c_pthread_mutex_init(l.lock)
		code throws LockFail("c_pthread_attr_init", code, "Call to underlying API failed")
	}

	doc Block till the lock is avaiable and then acquire the lock.
	F acquire(l:Lock) {
		c_pthread_mutex_lock(l.lock)
		l
	}

	doc Release the lock
	F release(l:Lock) {
		c_pthread_mutex_unlock(l.lock)
		l
	}

	doc Call cb with lock l held. Releases the lock after cb returns or throws.
	F acquire(l:Lock, cb:Fun) {
		l.acquire()
		try {
			ret = cb()
			l.release()
			ret
		} catch(e:Exception) {
			l.release()
			throw e
		}
	}


	TEST Lock().acquire(F() 1) == 1
}
