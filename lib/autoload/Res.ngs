{
	type ResDef(Eachable1)

	F init(rd:ResDef, anchor) {
		init(args())
		rd.resources = null
		### META              = rd.props.get('META', {})
		### rd.count          = META.get('count')
		### rd.dry_run        = META.get('dry_run', false) or 'DRY_RUN' in ENV
		### unknown_meta_keys = META.keys() - %[count dry_run]
		### unknown_meta_keys throws InvalidArgument("Unknown key(s) in META: ${unknown_meta_keys.join(', ')}")
		rd.dry_run = ENV.get('DRY_RUN', false)
	}

	F len(rd:ResDef) {
		rd.resources is Null throws Error("Programming error. find() was not run before len()")
		rd.resources.len()
	}

	F init(rd:ResDef) init(rd, {})

	F Str(rd:ResDef) {
		props = (rd.props tor {}).without('META')
		multi = " x${rd.count}" tor ""
		dry_run = if rd.dry_run " (dry run)" else ""
		"<${rd.typeof().name} anchor=${rd.anchor.without('META')} props=$props$multi$dry_run resources:${rd.resources.map_true(len)}>"
	}

	F log(rd:ResDef, method:Str, s:Str) {
		log("[${rd.typeof().name} ${rd.anchor}] [$method] $s")
	}

	F expect(rd:ResDef, e:Int) {
		rd.find()
		rd.resources.len() != e throws
		assert(rd.resources.len() == e, "Expected exactly ${e} ${rd.typeof().name} resource instances but found ${rd.resources.len()}")
		rd
	}

	F expect(rd:ResDef) {
		rd.find()
		assert(rd.len() > 0, "Expected one or more ${rd.typeof().name} resource instances but found none")
		rd
	}

	F each(rd:ResDef, cb:Fun) {
		if rd.resources is Null {
			rd.find()
		}
		rd.resources.each(F(r) {
			cb(r.props)
		})
		rd
	}

	type Res

	F init(r:Res, def:ResDef, props:Hash) init(args())

	F Str(r:Res) "<${r.typeof().name} props=${r.props}>"

	F converge(rd:ResDef, **props) {
		rd.find()
		n = props.get('META', {}).get('count')
		if n is Null and rd.resources.len() == 0 {
			rd.log('converge', "Count unspecified but there are no resources, assuming count to be 1")
			n = 1
		}

		if n is Null {
			rd.log('converge', "Count unspecified, not creating or deleting resources")
		} else {
			rd.log('converge', "${rd.resources.len()} of $n ${rd.typeof().name} resources exist")
			if n < rd.resources.len() {
				rd.log('converge', 'deleting extra resource instances')
				# TODO: make sure that oldest resources are deleted first
				rd.resources[n..null].each(delete)
				rd.resources = rd.resources[0..n]
			}
			if n > rd.resources.len() {
				rd.create(n - rd.resources.len(), props)
			}
		}
		# TODO: pass props to update(), do not assign props to rd.props
		rd.resources % update(X, props)
	}

	# TODO: pass props to create(), do not assign props to rd.props
	# Methods that support bulk creating should implement this
	F create(rd:ResDef, n:Int, props:Hash) {
		for(i;n) {
			rd.log('converge', "Creating ${rd.typeof().name} ${i+1} of $n")
			create(rd, props)
		}
	}

	F delete(rd:ResDef) {
		rd.find()
		rd.resources.each(delete)
	}

	F ids(rd:ResDef) rd.resources.map(id)

	doc %RET - Box
	F opt_prop(rd:ResDef, name:Str, props:Hash) {
		ret = [props, rd.anchor].get(name).Box(0)
	}

	F req_prop(rd:ResDef, name:Str, props:Hash) {
		ret = [props, rd.anchor].get(name)
		not(ret) throws InvalidArgument("$name must be present in either anchor or props of a ${rd.typeof().name}")
		ret[0]
	}
}
