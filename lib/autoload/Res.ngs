{
	type ResDef

	F init(rd:ResDef, anchor, props:Hash) {
		init(args())
		rd.resources = null
		META              = rd.props.get('META', {})
		rd.count          = META.get('count', 1)
		rd.dry_run        = META.get('dry_run', false) or 'DRY_RUN' in ENV
		unknown_meta_keys = META.keys() - %[count dry_run]
		unknown_meta_keys throws InvalidArgument("Unknown key(s) in META: ${unknown_meta_keys.join(', ')}")
	}

	F len(rd:ResDef) {
		rd.resources is Null throws Error("Programming error. find() was not run before len()")
		rd.resources.len()
	}

	F init(rd:ResDef, anchor) init(rd, anchor, {})
	F init(rd:ResDef) init(rd, {}, {})

	F Str(rd:ResDef) {
		props = rd.props.without('META')
		multi = if rd.count != 1 then " x${rd.count}" else ""
		dry_run = if rd.dry_run " (dry run)" else ""
		"<${rd.typeof().name} anchor=${rd.anchor} props=$props$multi$dry_run resources:${rd.resources.len()}>"
	}

	F log(rd:ResDef, method:Str, s:Str) {
		log("[${rd.typeof().name} anchor=${rd.anchor}] [$method] $s")
	}

	F expect(rd:ResDef, e:Int) {
		rd.find()
		rd.resources.len() != e throws
		assert(rd.resources.len() == e, "Expected exactly ${e} ${rd.typeof().name} resource instances but found ${rd.resources.len()}")
		rd
	}

	F expect(rd:ResDef) {
		rd.find()
		assert(rd.len() > 0, "Expected one or more ${rd.typeof().name} resource instances but found none")
		rd
	}

	type Res

	F init(r:Res, def:ResDef, props:Hash) init(args())

	F Str(r:Res) "<${r.typeof().name} props=${r.props}>"

	F converge(r:ResDef) {
		r.validate()
		r.find()
		n = r.count
		r.log('converge', "${r.resources.len()} of $n ${r.typeof().name} resources exist")
		if n < r.resources.len() {
			r.log('converge', 'deleting extra resource instances')
			r.resources[n..null] % r.delete(X)
			r.resources = r.resources[0..n]
		}
		for(i=r.resources.len(); i<n; i+=1) {
			r.log('converge', "creating ${r.typeof().name} ${i+1} of $n")
			create(r)
		}
		r.resources % update
	}

	F ids(r:ResDef) r.resources.map(id)
}
