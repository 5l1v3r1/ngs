# TODO: think about multi-valued results (say 10 hosts, 8 succeeded and 2 failed)
# TODO: think about Argv cooperation. Maybe Failure is NoData and Success is FullBox?
{
	doc EXPERIMENTAL! Do not use!
	type ResultFail(Error)

	doc EXPERIMENTAL! Do not use!
	type Result
		doc EXPERIMENTAL! Do not use!
		type Success(Result)
		doc EXPERIMENTAL! Do not use!
		type Failure(Result)
	
	doc EXPERIMENTAL! Do not use!
	F Result(fun:Fun) {
		try {
			Success(fun())
		} catch(e) {
			Failure(e)
		}
	}

	doc EXPERIMENTAL! Do not use!
	F init(s:Success, v) s.val = v

	doc EXPERIMENTAL! Do not use!
	F init(f:Failure, v) f.val = v

	doc EXPERIMENTAL! Do not use!
	F get(s:Success) s.val

	doc EXPERIMENTAL! Do not use!
	F get(f:Failure) {
		e = ResultFail("Can not get value of Failure")
		if f.val is Exception {
			e.cause = f.val
		} else {
			e.failure = f.val
		}
		throw e
	}

	doc EXPERIMENTAL! Do not use!
	F get(s:Success, dflt) s.val

	doc EXPERIMENTAL! Do not use!
	F get(f:Failure, dflt) dflt

	doc EXPERIMENTAL! Do not use!
	F map(s:Success, fun:Fun) {
		try {
			Success(fun(s.val))
		} catch(e) {
			Failure(e)
		}
	}

	doc EXPERIMENTAL! Do not use!
	F map(f:Failure, fun:Fun) f

	doc EXPERIMENTAL! Do not use!
	F filter(s:Success, predicate) { p = Pred(predicate); if p(s.val) s else Failure(ResultFail("Success filtered out, resulting Failure")) }

	doc EXPERIMENTAL! Do not use!
	F filter(f:Failure, predicate) f

	doc EXPERIMENTAL! Do not use!
	F Bool(s:Success) true

	doc EXPERIMENTAL! Do not use!
	F Bool(f:Failure) false

	doc EXPERIMENTAL! Do not use!
	F to_exit_code(r:Result) r.Bool().to_exit_code()
}

TEST {read("/etc/passwd")}.Result() is Success
TEST {read("NO-SUCH-FILE")}.Result() is Failure
TEST Success(10).map(X*2).get() == 20
