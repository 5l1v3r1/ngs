# === Table ======================================

{
	doc Manipulates tabular data
	doc name - Table name to display and for configuration lookup
	doc cols_enum - Enum for columns names
	type Table(Eachable)
}

F StrForTable(x) Str(x)
F StrForTable(x, width:Int) Str(x, width)
F StrForTable(x:Null) "-"
F StrForTable(x:Null, width:Int) Str("-", width)

doc Calculate cell display width - any Str()-able instance
F cell_display_width(x) StrForTable(x).len()

doc Calculate cell display width for an array
F cell_display_width(x:Arr) x.map(StrForTable).max(len)

doc Calculate cell display width for an empty array
F cell_display_width(x:Arr) { guard x.len()==0; 0 }

doc Initialize rows to an empty array
F init(t:Table, name=null) {
	guard name is Str or name is Null
	init(args())
	t.cols_enum = Enum()
	t.rows = []

	conf = config(if t.name "table_${t.name}" "table") or []
	debug("Table config is $conf")
	conf % register_column(t, X)
}

doc Create named table containing provided rows
doc name - name of the table for display and for configuration purposes
doc rows_hashes - rows, each row is a Hash
F init(t:Table, name, rows_hashes:Arr) {
	guard name is Str or name is Null
	guard rows_hashes.all(Hash)
	super(t, name)

	if not(t.cols_enum) {
		rows_hashes.each(F(row_hash) {
			# row_hash.keys().each(register_column)
			row_hash.keys() % register_column(t, X)
		})
	}
	debug("Table created with fields: ${t.cols_enum}")
	# hashes to arrays
	# rows_hashes.each(partial(push, t))
	rows_hashes % push(t, X)
}

F init(t:Table, rows_hashes:Arr) super(t, null, rows_hashes)

F register_column(t:Table, k) t.cols_enum.push(k)

F push(t:Table, row_arr:Arr) {
	# TODO: handle mismatch in number of columns
	t.rows.push(row_arr)
	t
}

F push(t:Table, row_hash:Hash) {
	# TODO: handle mismatch of columns
	row = t.cols_enum / get(row_hash, X, null)
	t.push(row)
	t
}

F width(t:Table) t.cols_enum.len()
F column(t:Table, k:Str) t.column(t.cols_enum[k])
F column(t:Table, n:Int) t.rows.map(X[n])
F columns(t:Table) t.width() / t.column(X)
F each(t:Table, cb:Fun) {
	t.rows.each(F(row) {
		row.each(F(cell) {
			cb(cell)
		})
	})
	t
}

# --- Conversions ---

F len(t:Table) t.rows.len()
F Bool(t:Table) t.len().Bool()

F calculate_num_cols_to_show(t:Table, max_colums_widths:Arr, available_cols:Int) {
	cols_to_show = 0
	for(i; max_colums_widths.len()) {
		# TODO: unhardcode the "+1" spacing width
		cols_to_show += max_colums_widths[i] + 1
		cols_to_show > available_cols returns i
	}
	i
}

doc Displays a table. Implemented only for tty output (or output_format=text configuration)
F echo(t:Table) {
	guard 1.isatty() or (config('output_format') == 'text')
	lines = (ENV.get('LINES')   or `tput lines`).Int()
	cols  = (ENV.get('COLUMNS') or `tput cols`).Int()
	# TODO: special treatment for tmux? can print any width and tmux can be adjusted later.
	# TODO: support Arr in headers
	# TODO: handle Hash type of cell (maybe allow configuring order of keys etc)
	# TODO: handle limiting width of a cell, probably using subtype of TableMeta

	do_output_headers = config('output_headers') in [null, true]
	max_colums_widths = t.cols_enum.map(F(k, idx) {
		col = t.column(idx)
		((if do_output_headers [k] [])+ col).max(cell_display_width)
	})

	# How much full table columns fit on the screen
	showing_n_columns = t.calculate_num_cols_to_show(max_colums_widths, cols)

	# Setup line spacing
	do_line_spacing = t.filter(Arr).map(len).any(X>1)
	do_line_spacing = if do_line_spacing F() echo('') else nop

	# Title
	if t.name and (config('output_title') in [null, true]) {
		echo("=== ${t.name} ===")
		do_line_spacing()
	}

	# Headers
	if(do_output_headers) {
		t.cols_enum.limit(showing_n_columns).map(F(k, idx) StrForTable(k, max_colums_widths[idx])).join(' ').echo()
		do_line_spacing()
	}

	# Rows
	t.rows.each(F(row) {
		done = false
		subrow_idx = 0
		while not(done) {
			done = true
			subrow_content_arr = t.cols_enum.limit(showing_n_columns).map(F(k, idx) {
				subrow_content = if row[idx] is Arr {
					if len(row[idx]) > subrow_idx {
						done = false
						row[idx][subrow_idx]
					} else {
						''
					}
				} else {
					if subrow_idx == 0 {
						done = false
						row[idx]
					} else {
						''
					}
				}
				# Format later maybe? Just before printing?
				StrForTable(subrow_content, max_colums_widths[idx])
			})
			if not(done) {
				subrow_content_arr.join(' ').echo()
			}
			subrow_idx += 1
		}
		do_line_spacing()
	})
}

doc Output (echo) CSV table with cells that contain arrays converted to columns.
doc TODO: data escaping.
F echo(t:Table) {
	guard config('output_format') == 'csv-flat'
	col_elts = t.cols_enum.values().Hash(F(col_name) {
		col = t.column(col_name).map(only(X is not Arr, F(x) [x]))
		(col.map(len) + [0]).max()
	})
	# echo(col_elts)
	field_names = t.cols_enum.map(F(col_name, col_idx) {
		field_names = map_base_idx(col_name, col_elts[col_idx], { "${A}_${B+1}" })
	}).flatten()

	# Headers
	echo(field_names.join(','))

	t.rows.each(F(row) {
		cols_to_display = row.map_idx_val(F(col_idx, cell) {
			val = if cell is Arr cell else [cell]
			n = col_elts[col_idx]
			val + ('' * (n - len(val)))
		}).flatten()
		echo(cols_to_display.join(','))
	})
}

TEST Table([{"a": 1}, {"a": 2}]).column("a") == [1,2]
TEST Table([{"a": 1}, {"a": 2}]).columns() == [[1,2]]
TEST Table([{"a": 1}, {"a": 2}]).len() == 2
