{
	# ./ngs -e 't = c_pthread_create(c_pthread_attr_t(), F(x) {echo(x); x+1} , 7); c_pthread_join(t[1]).dump()'

	# TODO: consider *args for consistency with other parts of the language

	type Thread

	F init(t:Thread, f:Fun, arg) {
		thread_attr = c_pthread_attr_t()
		c_pthread_attr_init(thread_attr)
		create_result = c_pthread_create(thread_attr, f, arg)
		code = create_result[0]
		if code {
			# XXX better exception ... and include code in it
			throw Error("Failed to c_pthread_create")
		}
		t.thread = create_result[1]
	}

	F init(t:Thread, f:Fun) {
		init(t, F thread_arg_discard_wrapper(discard) f(), null)
	}

	F join(threads:Arr) {
		guard threads.all(Thread)
		threads / join
	}

	F join(t:Thread) {
		debug("[Thread] joining thread ${t.thread.id()}")
		join_result = c_pthread_join(t.thread)
		if join_result[0] {
			# XXX better exception ... and include code in it
			throw Error("Failed to c_pthread_join")
		}
		join_result[1]
	}

	# TODO: maybe limit number of concurrent threads (default to cores count?)
	F pmap(a:Arr, mapper:Fun) {
		# threads = a.map(F(elt) Thread(mapper, elt))
		threads = a / Thread(mapper, X)
		threads.join()
	}

	F pmap(n:Int, mapper:Fun) {
		# threads = collector
		# 	for(i;n) {
		# 		collect(Thread(mapper, i))
		# 	}
		threads = n / Thread(mapper, X)
		threads.join()
	}

	F ptimes(n:Int, cb:Fun) {
		threads = collector
			for(i;n) {
				collect(Thread(cb))
			}
		threads.join()
	}

	TEST (1..3).Arr().pmap(X*10) == [10, 20]
	TEST 3.pmap(X*10) == [0, 10, 20]

	F Str(t:c_pthread_t) "<c_pthread_t>"

}
