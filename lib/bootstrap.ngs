# === Exception ==================================

doc %RET - Exception with .backtrace and .message
doc message - Goes into .message
F init(e:Exception, message:Str) {
	e.message = message
}

doc %RET - Exception with .backtrace and .cause
F init(e:Exception, cause:Exception) {
	e.cause = cause
}

TEST Exception().backtrace is Backtrace
TEST Exception("xyz").message == "xyz"
TEST Exception(Exception()).cause is Exception


{
	type NotImplemented; NotImplemented.inherit(Exception);
	type FetchFail; FetchFail.inherit(Exception);
	type RequreFail; RequreFail.inherit(Exception);
	type MainFail; MainFail.inherit(Exception);
}

# === bootstrap ==================================

# *** Convert values returned by the program (or -e/-E expression) to exit codes ***
doc %RET - always 0
F to_exit_code(x) 0
doc %RET - 0 for true, 1 for false
F to_exit_code(b:Bool) if b 0 1
doc %RET - n
F to_exit_code(n:Int) n

doc %RET - Always 200
F to_exit_code(e:Exception) 200

main = []

# *** Define bootstrap_debug function ***
bootstrap_debug =
	if 'NGS_BOOTSTRAP_DEBUG' in ENV
		F(s) echo("+ [BOOSTRAP DEBUG] $s")
	else
		F(s) {}

bootstrap_ngs_dir_candidates = [
	'/usr/local/etc/ngs'
	'/usr/local/lib/ngs'
	'/etc/ngs'
	'/usr/lib/ngs'
]

F bootstrap_find_ngs_dir() {
	l = bootstrap_ngs_dir_candidates.len()
	for(i;l) {
		c_access("${bootstrap_ngs_dir_candidates[i]}/stdlib.ngs", C_F_OK) == 0 returns bootstrap_ngs_dir_candidates[i]
	}
	null
}

F bootstrap_find_ngs_dir() {
	guard 'NGS_DIR' in ENV
	ENV['NGS_DIR']
}

bootstrap_main_file = null

# *** read - abstraction above low level c io primitives ***
# TODO: Better exceptions
doc Fetches the whole file
doc fname - File name to read
doc %RET - Whole file as a string
F read(fname:Str) {
	try {
		fd = c_open(fname, 'r')
		fd <= 0 throws Exception("read(): failed to open file ${fname}")
		bootstrap_debug("read(): opened file ${fname} as fd ${fd}")
		file_len = c_lseek(fd, 0, "end")
		file_len < 0 throws Exception("read(): failed to get the size of file ${fname}")
		c_lseek(fd, 0, "set")
		bootstrap_debug("read(): file size of ${fname} is ${file_len}")
		data = c_read(fd, file_len)
		c_close(fd)
		data[1]
	} catch(e) {
		throw FetchFail(e)
	}
}

doc Runs the given file
doc %RET - Typically whatever the last expression in the file evaluates to
F require(fname:Str) {
	try {
		program_text = read(fname)
		program_bytecode = compile(program_text, fname)
		bootstrap_debug("require(): bytecode for ${fname} has length of ${program_bytecode.len()} bytes")
		program_func = load(program_bytecode, "require()d file: $fname")
		ret = program_func()
		bootstrap_debug("require(): done requiring ${fname}")
		ret
	} catch(e) {
		throw RequreFail(e)
	}
}

doc Main entry point. Executed on NGS boot.
F bootstrap() {
	global ARGV0
	global ORIG_ARGV = copy(ARGV)

	do_load_stdlib = true
	code_to_run = null

	bootstrap_debug('bootstrap.ngs begin')
	bootstrap_debug("BOOTSTRAP_FILE=$BOOTSTRAP_FILE")

	# *** Prepare ARGV ***
	# first_item = shift(array, default_value_if_array_is_empty)
	ARGV0 = ARGV.shift(null)

	# *** Parse switches ***
	sw = null
	if ARGV {
		a = ARGV[0]
		if (a == '-e' or a == '-E' or a == '-p' or a == '-pj' or a == '-pi' or a == '-pl' or a == '-pjl' or a == '-pc') {
			sw = ARGV.shift()
			# Newline at the end is for avoiding # commenting out the closing }
			# Newline at the beginning is for symmetry
			code_to_run = "{\n${ARGV.shift()}\n}"
			bootstrap_debug("Got $sw switch, using command line provided code")
			if sw == '-E' {
				bootstrap_debug('Will skip loading stdlib because of -E flag')
				do_load_stdlib = false
			}
			fname = "<command line ${sw} switch>"
		}
	}

	if 'NGS_SKIP_STDLIB' in ENV {
		bootstrap_debug('Will skip loading stdlib because of set NGS_SKIP_STDLIB environment variable')
		do_load_stdlib = false
	}

	global NGS_DIR = bootstrap_find_ngs_dir()

	NGS_DIR is Null throws Exception("Could not find NGS_DIR")

	if do_load_stdlib {
		bootstrap_debug('Will load stdlib')
		stdlib_file = "${NGS_DIR}/stdlib.ngs"
		bootstrap_debug("Stdlib is at $stdlib_file")
		require(stdlib_file)
	}

	# Note: not() is not defined yet

	if code_to_run is Null {
		bootstrap_debug('No -e or -E switch was passed, will load the program from a file')
		fname = ARGV.shift(null)
		if fname is Null {
			fname = ENV.get('NGS_CLI', "${NGS_DIR}/cli.ngs")
		} else {
			ARGV0 = fname
		}
		code_to_run = read(fname)
	}

	program_bytecode = compile(code_to_run, fname)
	bootstrap_debug("bootstrap(): bytecode for ${fname} has length of ${program_bytecode.len()} bytes")
	program_func = load(program_bytecode, "bootstrap()ped file: $fname")
	global bootstrap_main_file = fname

	result = program_func()

	# Handle main() - start
	if main.len() > 0 {
		bootstrap_debug("main() defined, using bootstrap_invoke_main()")
		if global_not_found_handler.len() == 0 {
			throw MainFail("Autoloading (usually defined in stdlib) is not present but the main() invoking mechanism requires it")
		}
		result = bootstrap_invoke_main(result)
	}
	# Handle main() - end

	if sw == '-pi' {
		inspect(result) % echo
		return 0
	}

	transformation = {
		'-pl': identity
		'-pjl': encode_json
	}
	if sw in transformation {
		result.map(transformation[sw]).each(echo)
		return 0
	}

	transformation = {
		'-p': identity
		'-pj': encode_json
		'-pc': code
	}
	if sw in transformation {
		echo(transformation[sw](result))
		return 0
	}
	result.to_exit_code()
}

F bootstrap_exception_catch_wrapper() {
	exception = null
	exit_code = null
	try {
		exit_code = bootstrap()
	} catch(e:Exception) {
		exception = e
	}
	t = {'exit_code': exit_code, 'exception': exception}

	if defined exit_hook {
		try {
			exit_hook(t)
		} catch(e:Exception) {
			if exception is Null {
				exception = e
			} else {
				exception.additional_exit_hook_exception = e
			}
		}
	} else {
		# stdlib was not loaded
		if exception is Null {
			"nop"
		} else {
			echo("Uncaught exception occured:")
			dump(exception)
			c_exit(201)
		}
	}

	if exception is Null {
		"nop"
	} else {
		if not(t['exit_code']) {
			c_exit(200)
		}
	}
	c_exit(t['exit_code'])
}

bootstrap_exception_catch_wrapper()
