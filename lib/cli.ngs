# WIP, don't use!

debug('Starting NGS CLI')

echo('*** NGS CLI is under construction ***')
echo('| After successful command, R variable contains the result')
echo('| After unsuccessful command, E variable contains the exception')

F make_prompt() {
	cli_prompt.map(F(k, v) v()).join(' ')
}

# XXX: Ugly hack to prevent direct output to stdout.
#      It's okayish because since we are in CLI mode
#      none of the commands can be "top level".
#      A real fix would be somehow let compiler know it's not a top-level.
# XXX: Do this after rc files are executed !
F '$()'(c:Command) {
	c.options .= without('top_level')
	guard false
}

F run_cli_rc_files() {
	rc_files = ['/etc/ngs/cli.rc.ngs']
	if 'HOME' in ENV {
		rc_files.push("${ENV['HOME']}/.ngs/cli.rc.ngs")
	}
	rc_files.filter(Path).each(F(f) {
		debug("[CLI] Loading RC file $f")
		require(f)
	})
}

F cli() {
	not(0.isatty() and 1.isatty()) throws Error("CLI only runs when attached to a TTY")

	screen_renderer = Screen::Renderer()

	run_cli_rc_files()

	rl = FFI(cli_readline_lib, 'readline', c_ffi_type_string, [c_ffi_type_string])

	while true {
		line = rl(make_prompt())
		if line is Null {
			echo('')
			echo('BYE')
			break
		}
		line == "" continues


		had_error = false
		try {
			program_bytecode = compile(line, '<cli-entered-line>')
			program_func = load(program_bytecode, 'cli_entered_line')
			result = program_func()
		} catch(e:Exception) {
			global E = e
			echo("ERROR: $e")
			had_error = true
		}
		had_error continues

		if(result is Process) {
			result.wait()
		}

		global R = result
		s = Str(result)
		if('\n' in s) {
			echo("RESULT:")
			s.split('\n').each(F(line) {
				echo("  $line")
			})
		} else {
			echo("RESULT: $s")
		}

	}
}

# --- Start ---

cli_readline_lib = 'libreadline.so.6'

# TODO: make it object, not a string
cli_prompt = {
	'ngs': F() 'NGS'
	'dir': F() {
		# TODO: replace HOME dir with ~
		p = $(pwd).Str()
		p[0..len(p)-1]
	}
	'gt': F() '> '
}

cli()
