.TH ngs 1 "2015" "NGS"
.SH NAME
ngs \- Next Generation Shell
.SH SYNOPSIS
.B ngs \fIscript_name\fP
.br
.B ngs \fP[\fB-e\fP|\fB-E\fP] \fIexpression\fP
.SH DESCRIPTION
\fBngs\fP is a Next Generation Shell. Currently only the language is available and it's in \fBearly development stage (read: not for critical things yet)\fP. Interactive mode will be available later. The motivation is simple: the circumstances have changed greatly since the development of the conventional shells such as bash.
.SH OPTIONS
Given \fIscript_name\fP runs the script.
.br
Using \fIexpression\fP is equivalent to running a script that consists of \fB{\fP \fIexpression\fP \fB}\fP. \fB-e\fP loads \fBstdlib.ngs\fP before evaluating the \fIexpression\fP, \fB-E\fP skips the loading of \fBstdlib.ngs\fP.
.SH EXIT CODE
The exit code is whatever the running code (\fIscript_name\fP or \fIexpression\fP) returns using the following conversions:
.SS Number (must be integer)
A Number is used as exit code (modulo 256). For example, \fBngs -E 10\fP returns exit code 10.
.SS Bool (boolean)
\fBtrue\fP results 0, \fBfalse\fP results 1.
.SS T (user-defined type)
The exit code can be customized by \fBto_exit_code(x:T)\fP method.
.SS anything else, including user-defined types without \fBto_exit_code(x:T)\fP method.
Exit code 0

.SH ENVIRONMENT

.SS NGS_FOLDER
Directory to load \fBbootstrap.ngs\fP and \fBstdlib.ngs\fP from. If not set, defaults to the directory where the \fBngs\fP binary resides. Available, to the scripting language as \fBNGS_FOLDER\fP global variable in any case.

.SS NGS_SKIP_STDLIB
If set to any value, including the empty string, prevents loading of \fBstdlib.ngs\fP.

.SH FILES

.SS $NGS_FOLDER/bootstrap.ngs
is run by the language in any case (not affected by the supplied command line options). Implements the starting logic. Among other things arranges the \fIscript_name\fP or \fIexpression\fP execution.
.SS $NGS_FOLDER/stdlib.ngs
contains any functionality that does not have to be implemented in the core. The default is to load this file. If you are sure you do not want it loaded, set the environment variable: \fBNGS_SKIP_STDLIB=1\fP or use the \fB-E\fP switch. Skipping option is only available for performance benefits and will probably be removed when the performance is improved.

.SH LANGUAGE OVERVIEW

.SS Typing
Variables don't have types, values do. Values are not converted to another data types except for few places where it's a logical thing to do. For example, when extrapolating a string \fB"abc$x"\fP, the variable \fBx\fP is converted to \fBString\fP type before concatenation. This is done by calling \fBString(x)\fP so the conversion is customizable.

.SS Object orientation
There are types and methods. There are no classes. Instance of type \fBT\fP is created by calling \fBT(...)\fP (similar to Python). Inner workings of this call will be explained later. Methods are for specific Types are defined

.SH BUILT-IN TYPES AND CONSTRUCTORS

Roughly in order of increasing complexity. Obvious constructors such as writing a literal number to create a Number instance are skipped.

.TP 15
.B Type
Type of all built-in and user-defined types.

.TP
.B Type(name:String, *parent_types)
Create new type named \fIname\fP. Example: \fBglobal T3 = Type('T3', T1, T2)\fP. [in core]. Since this is common use there is equivalent syntactic sugar: \fBtypeg T3(T1, T2)\fP. [in stdlib].

.TP
.B Null
The only instance of this type is \fBnull\fP.

.TP
.B Bool
Boolean: \fBtrue\fP or \fBfalse\fP.

.TP
.B Number
Integral, floating and other numbers.

.TP
.B Number(b:Bool)
Convert boolean to a number. \fBtrue\fP becomes 1, \fBfalse\fP becomes 0.

.TP
.B Number(s:String)
Convert a string to a number. Currently only integers.

.TP
.B String
TODO

.TP
.B String(any)
Implementation specific representation of the object. Currently, for simplicity it's Common Lisp's \fB(format nil "~A" ...)\fP. [in core]

.TP
.B Seq
TODO

.TP
.B List
TODO

.TP
.B Array
TODO

.TP
.B Hash
TODO

.TP
.B Regexp
TODO

.TP
.B File
TODO

.TP
.B Process
TODO

.TP
.B Stream
TODO

.TP
.B Regexp
TODO

.SH AUTHOR
Ilya Sher.
.SH THANKS
Thanks to Guy Egozy, Avishai Ish-Shalom and other friends for ideas and feedback.
