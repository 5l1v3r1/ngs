{
	# string * number -> the string repeated number times
	defun __mul(s:String, n:Number) {
		  ret = ""
		  for {i=0}{i<n}{i=i+1} {
			  ret = ret + s;
		  }
		  ret
	}

	defun not(x:Bool) { if{x}{false}{true} }

	# The != operator
	defun __neq(a, b) {
		not(a==b)
	}

	# The == operator
	# Can NOT handle reqursive structures (untested)
	defun __eq(a:Array, b:Array) {
		len_a = len(a)
		len_b = len(b)
		if{len_a != len_b} {
			return false;
		}
		for{i=0}{i<len_a}{i=i+1} {
			"Work around syntax bug:"
			"{a[i] != b[i]} does not work for now"
			x = a[i]
			y = b[i]
			if{x != y} {
				return false;
			}
		}
		true
	}

	defun __get_item(a:Array, idxs:Array) {
		ret = []
		j = len(idxs)
		for{i=0}{i<j}{i=i+1} {
			for{i=0}{i<j}{i=i+1} {
				ret[i] = a[idxs[i]]
			}
		}
		return ret
	}

	defun min(a:Number, b:Number) { if{a<b}{a}{b} }
	defun max(a:Number, b:Number) { if{a<b}{b}{a} }

	defun startsWith(s:String, pfx:String) {
		if{len(s) < len(pfx)} {
			return false
		}
		l = len(pfx)
		for{i=0}{i<l}{i=i+1} {
			a = s[i]
			b = pfx[i]
			if{a != b} {
				return false
			}
		}
		true
	}

	# Convert execution of (example) '-f somefile' to 'test -f somefile'
	defun exec(*args) {
		  guard {1 < len(args)}
		  guard {startsWith(args[0], "-")}
		  args = ["test"] + args
		  return exec(*args)
	}

	defun osname() {
		  null
	}

	defun osname() {
		  guard (-f /etc/debian_version)
		  "debian"
	}
}
