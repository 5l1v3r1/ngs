# TODO: Organize by sections.
# TODO: Something that will tell whether all methods were covered at the end of each tests run.
#       Don't want to add a test for each method because some are checked by proxy.

# ----- String functions - start -----
# string * number -> the string repeated number times
defun __mul(s:String, n:Number) {
	ret = ''
	for(i=0;i<n;i=i+1) {
		ret = ret + s;
	}
	ret
}

defun __match(s:String, n:Number) { s.len() == n }

# ----- String functions - end -----

defun __match(a:Array, n:Number) { a.len() == n }

defun not(x) { if x {false}{true} }

# TODO:
#   Make String and Array inherit from new type Sequence.
#   Sequence will have method len() among others.
#   defun Bool(s:Sequence) { s.len() > 0 }

defun Bool(s:Seq)    { s.len() > 0 }
defun Bool(h:Hash)   { h.len() > 0 }

defun Hash(a:Array) {
	ret = {}
	a.each(F(x) { ret[x[0]] = x[1] })
	ret
}

defun Hash(a:Array, v) {
	a.map(F(x) {[x,v]}).Hash()
}

defun zip(a:Seq, b:Seq) {
	l = len(a)

	if l != b.len() {
		throw ['args', 'Zip with different Seqs length']
	}

	l.map(F(i) { [a[i], b[i]] })
}

defun __neq(a, b) {
	not(a==b)
}

# Don't make it Seq. It causes infinite recursion I guess.
defun __eq(a:Array, b:Array) {
	a.len() == b.len()
	and
	all(zip(a,b), F(x) { x[0] == x[1] })
}

defun __eq(a:Hash, b:Hash) {
	a.len() == b.len()
	and
	a.keys().sort() == b.keys().sort()
	and
	all(a.keys(), F(k) { a[k] == b[k] })
}

defun map(s:Seq, mapper:F, *args) {
	s.len().map(F(i) { mapper(s[i], *args) })
}

defun map(n:Number, mapper:F, *args) {
	ret = []
	for(i=0;i<n;i=i+1) {
		ret.push(mapper(i, *args))
	}
	ret
}

defun map(h:Hash, mapper:F, *args) {
	h.keys().map(F(k) { mapper(k, h[k], *args) })
}

defun reduce(s:Seq, start, reducer:F) {
	acc = start
	s.each(F(x) { acc = reducer(acc, x) })
	acc
}

defun each(s:Seq, processor:F, *args) {
	j = s.len()
	for(i=0;i<j;i=i+1) {
		processor(s[i], *args)
	}
	s
}

defun each(n:Number, processor:F, *args) {
	for(i=0;i<n;i=i+1) {
		processor(i, *args)
	}
}

defun any(s:Seq, predicate:F, *args) {
	j = s.len()
	for(i=0;i<j;i=i+1) {
		if predicate(s[i], *args) {
			return true
		}
	}
	false
}

defun all(s:Seq, predicate:F, *args) {
	j = s.len()
	for(i=0;i<j;i=i+1) {
		if not(predicate(s[i], *args)) {
			return false
		}
	}
	true
}

defun none(s:Seq, predicate:F, *args) {
	not(any(s, predicate, *args))
}

defun filter(s:Seq, predicate:F, *args) {
	ret = []
	j = s.len()
	for(i=0;i<j;i=i+1) {
		if predicate(s[i], *args) {
			ret.push(s[i])
		}
	}
	ret
}

defun filter(s:Seq) {
	s.filter(F(x) { x != null })
}

defun __get_item(s:Seq, idx:Number) {
	guard idx < 0
	l = s.len()
	s[l+idx]
}

defun __get_item(s:Seq, idxs:Array) {
	idxs.map(F(i) { s[i] })
}

defun __get_item(a:Hash, keys:Array) {
	keys.map(F(k) { [k, a[k]] }).Hash()
}

# Make hash.key same as hash['key']
defun __get_attr(h:Hash, k:String) {
	h[k]
}

defun __get_attr(a:Array, attr:String) {
	return map(a, __get_attr, attr)
}

defun __in(v, s:Seq) {
	any(s, __eq, v)
}

defun __in(v, h:Hash) {
	v in h.keys()
}

# TODO: defun __in(substring, string)

defun __not_in(*args) {
	not(__in(*args))
}

defun has(container, item) {item in container}


defun min(a:Number, b:Number) { if a<b {a}{b} }
defun max(a:Number, b:Number) { if a<b {b}{a} }

defun startsWith(s:Seq, pfx:Seq) {
	if len(s) < len(pfx) {
		return false
	}
	l = pfx.len()
	for(i=0;i<l;i=i+1) {
		if s[i] != pfx[i] {
			return false
		}
	}
	true
}

defun endsWith(s:Seq, sfx:Seq) {
	if len(s) < len(sfx) {
		return false
	}
	l = sfx.len()
	sidx = s.len() - l
	for(i=0;i<l;i=i+1) {
		if s[sidx+i] != sfx[i] {
			return false
		}
	}
	true
}

# Not sure, maybe Seq? Need use cases. For String it's: fname - '.txt' + '.bak'
defun __sub(s:String, sfx:String) {
	if s.endsWith(sfx) {
		s.slice(0, s.len() - sfx.len())
	} else {
		# throw maybe?
		s
	}
}

# XXX: Warning: should be per Context or it will bite you
defun spawn_update_globals(args:Array, p:Process) {
	g = globals()
	g['P'] = p
	if 'PP' not in g {
		g['PP'] = {}
	}
	g['PP'][args[0]] = p

	# Hack for CLI
	thread().locals()['P'] = p
}

defun spawn(*args) {
	# TODO: handle async
	p = native_spawn(*args)
	spawn_update_globals(args, p)
	p.wait()
	ok = cmd_finished_ok_p(p)
	if not(ok) {
		# TODO: nicer output of the args
		# TODO: output stack trace
		throw ['runtime', 'Command execution failed: ' + inspect(args)]
	}
	p
}

defun spawn(*args) {
	guard args.map(typeof).any(__neq, 'String')
	args.map(String).__super()
}

# Convert execution of (example) '-f somefile' to 'test -f somefile'
defun spawn(*args) {
	  guard args.len() > 1
	  guard startsWith(args[0], '-')
	  args = ['test'] + args
	  # or spawn() again?
	  return __super(*args)
}

defun osname() {
	null
}

defun osname() {
	guard $(-f /etc/debian_version)
	'debian'
}


# ----- Finished commands handlers - start -----

defun cmd_finished_ok_p(p:Process) {
	p.exit_code == 0
}

defun cmd_finished_ok_p(p:Process) {
	guard p.cmd == 'test'
	p.exit_code in [0,1]
}

defun cmd_finished_ok_p(p:Process) {
	guard p.cmd == 'false'
	p.exit_code == 1
}

defun cmd_finished_ok_p(p:Process) {
	guard p.cmd == 'service'
	guard p.args[1] == 'status'
	# Empirical
	p.exit_code < 4
}

# ----- Finished commands handlers - end -----

defun parse_file(f:String, content:String) {
	content
}

defun parse_file(f:String, content:String) {
	guard f ~ /\\.json$/
	r = catch from_json(content)
	if not(r[0]) {
		throw ['runtime', "Failed to read json file ${f}"]
	}
	r[1]
}

defun read(f:String) {
	content = fetch_file(f)
	parse_file(f, content).meta('file', f)
}

defun one(s:Seq) {
	if s.len() != 1 {
		throw ['data', "Expected array with exactly one item but had ${a.len()}", a]
	}
	s[0]
}

# Abstract usage example:
# servers.filter(F(x) {'unicorn' in x.tags}).one('Unicorn server').create_image('Unicorn backup')
defun one(s:Seq, msg:String) {
	if s.len() != 1 {
		throw ['data', "Expected array with exactly one $msg but had ${a.len()}", a]
	}
	s[0]
}

# ----- Output helpers - start -----

defun String(p:Process) {
	# TODO:
	#   Handle processes that are still running.
	#   Handle stderr
	#   Handle failed processes
	#   Handle exit_code
	p.stdout
}

defun join(s:Seq, sep:String) {
	ret = ''
	j = s.len()
	for(i=0;i<j;i=i+1) {
		ret = ret + String(s[i])
		if i < j - 1 {
			ret = ret + sep
		}
	}
	ret
}

defun String(s:String) { s }

defun String(a:Array) {
	'[' + a.join(', ') + ']'
	# Could be less readable: "[${a.join(', ')}]"
}

defun String(a:Array) {
	guard typeof(a) != 'Array'
	'<' + typeof(a) + ' ' + __super(a) + '>'
}

defun String(h:Hash) {
	'{' + h.map(F(k,v) { "$k: $v" }).join(', ') + '}'
}

defun String(h:Hash) {
	guard typeof(h) != 'Hash'
	'<' + typeof(h) + ' ' + __super(h) + '>'
}


defun String(b:Bool) {
	if b {'true'}{'false'}
}

defun String(n:Null) {
	'null'
}

defun String(l:Lambda) {
	inspect(l)
}

defun String(t:Thread) {
	"<Thread ${t.id} ${t.state}>"
}

defun String(c:Code) {
	"<Compiled code>"
}

defun echo(x) {
	guard typeof(x) != 'String'
	x.String().echo()
}

defun echo(*args) {
	guard args.len() > 1
	args.each(echo)
}

# ----- Output helpers - end -----

# ----- Meta sugar - start -----
defun meta(x, k:String) {
	x.meta()[k]
}

defun meta(x, k:String, v) {
	x.meta()[k] = v
	x
}

defun has_meta(x, k:String) {
	k in x.meta()
}
# ----- Meta sugar - end -----

# ----- __get_item sugar - start -----
defun first(s:Seq)  { s[0] }
defun second(s:Seq) { s[1] }
defun third(s:Seq)  { s[2] }
defun fourth(s:Seq) { s[3] }
defun fifth(s:Seq)  { s[4] }

defun last(s:Seq)   { s[-1] }
# ----- __get_item sugar - end -----

# ----- Types sugar - start -----
defun inherits(child:String, parent:String) {
	if child not in __TYPES {
		__TYPES[child] = {}
	}
	if 'inherits' not in __TYPES[child] {
		__TYPES[child]['inherits'] = []
	}
	if parent in __TYPES[child]['inherits'] {
		return null
	}
	__TYPES[child]['inherits'].push(parent)
}

defun mktype(type:String, parents:Array) {
	parents.each(F(p) { inherits(type, p) })
	defun global "$type"() {
		obj(type).init()
	}
}

defun mktype(type:String, parent:String) {
	mktype(type, [parent])
}
# ----- Types sugar - end -----

# Should be defined for files fetched from remote locations, maybe
# in some other cases too.
defun validate_source_file(f:String, content:String) {
	  true
}

# TODO: path to search in
# TODO: specify version of the required file/module
defun require(f:String, *args) {
	content = fetch_file(f)
	if not(validate_source_file(f, content)) {
		throw ['runtime', "Failed to validate source file $f"]
	}
	code = compile(content)
	lambda_ = load(code)
	lambda_(*args)
}
