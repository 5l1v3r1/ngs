start = 
  commands

space = [ \t\n]+
inline_space = [ \t]+

commands "commands" =
  space? c:command space? [;] space? cs:commands { var ret = cs['commands'].slice(0); ret.unshift(c); return {'type': 'commands', 'commands': ret}; } /
  c:command space? [;]? space? { return {'type': 'commands', 'commands': [c]}; }

command "command" =
  CCEXPR_code /
  assignment " " command /
  assignment /
  if /
  execute_external_prog

// if CCEXPR [then] CCEXPR [else] [CCEXPR]
// ( while should be: if CCEXPR [then] CCEXPR [[else] CCEXPR] )
if "if" =
  'if' space? cond:CCEXPR space? 'then'? space? if_true:CCEXPR space? 'else'? space? if_false:CCEXPR? {
    var ret = {
      'type': 'if',
      'cond': cond,
      'true': if_true
    };
    if(if_false) {
      ret['false'] = if_false;
    }
    return ret;
  }

assignment "assignment" =
  varname:varname space? '=' space? val:expr { return {'type': 'assignment', 'lhs': varname, 'rhs': val}; }

varname "variable name" =
  v:[_a-zA-Z]+[_0-9a-zA-Z]* { return {'type': 'var', 'name': v.join('')} }

CCEXPR "CCEXPR" =
  CCEXPR_commands /
  CCEXPR_code

CCEXPR_commands =
  '(' commands:commands ')' space? { return commands; }

CCEXPR_code =
  '{' code:expr '}' space? { return code; }

expr "Expression/add" =
  e1:expr_no_add space? "+" space? e2:expr_no_add { return {'type': 'binop', 'e1': e1, 'e2': e2, 'op': 'add'}; } /
  e:expr_no_add { return e; }

expr_no_add "Expression/no-add" =
  if /
  assignment /
  number /
  string /
  varname /
  array_literal /
  CCEXPR_commands

number "number" =
  "0x" hex_digits:[0-9a-fA-F]+ { return {'type': 'number', 'val':parseInt(hex_digits.join(''), 16)}; } /
  digits:[0-9]+ { return {'type': 'number', 'val':parseInt(digits.join(''), 10)}; }

execute_external_prog "execute external program" =
  w:cmd_words { return {'type': 'exec', 'words': w} }

cmd_words "Command words" =
  w:cmd_word space ws:cmd_words  {
    var ret = ws['elements'].slice(0);
    ret.unshift(w);
    return {'type': 'array', 'elements': ret};
  } /
  w:cmd_word { return {'type': 'array', 'elements': [w]}; }

cmd_word "Command word" =
  CCEXPR_code /
  "$" v:varname { return v; } /
  "$*" v:varname { return {'type': 'splice', 'expression': v }; } /
  s:string  { return s; } /
  w:[-_a-zA-Z0-9*?]+ {  return {'type': 'string', 'val':w.join('')}; }

string "Command string" =
  '"' s:string_contents '"' {  return s; }

// Temp. TODO: add escaping and substitution
string_contents "String contents" =
  s:[-_a-zA-Z0-9*?]* {  return {'type': 'string', 'val':s.join('')}; }

array_literal "array literal" =
  "[" space? es:comma_separated_expressions space? "]" { return {'type': 'array', 'elements': es['expressions']}; }

comma_separated_expressions "comma-separated expressions" =
  e:expr_or_splice space? "," space? es:comma_separated_expressions {
    var ret = es['expressions'].slice(0);
    ret.unshift(e);
    return {'type': 'expressions', 'expressions': ret};
  } /
  e:expr_or_splice { return {'type': 'expressions', 'expressions': [e]}; }

expr_or_splice =
  e:expr { return e; } /
  s:splice { return s; }

  splice "splice" =
  "*" space? e:expr { return {'type': 'splice', 'expression': e}; }
