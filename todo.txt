Note that this started as internal document so things here are unformed, not final and fluid.

[inbox]

	Unsorted and undecided things go here. The important sections is [roadmap] and it's just below this section.

	* C_PCRE_* - move to C_PCRE namespace
	* Look for other sets of constants to move to namespaces
	* address resolution functions
	* AWS fix SG rules (IpPermBox < IpPermBox)
	* Fix $(separate$item issue)
	* update(Hash, key, value) - update specified key only if exists
	* update(Arr[Hash], key, value / Fun) - update specified key only if exists
	* make ResDef ArrLike for the resources?
	* make Res HashLike?
	* Fix parser in
		function_call(
			with_comments,
			# syntax
			yes)
	* option to turn backtraces on in warn() and error()
	* assert_file / assert_file_exists ?
	* assert_has_line / assert_has_line_with ?
	* Make Indexable: Arr, Str, Range - this might save some code
	* AWS::SecGroup - check whether Description is Anchor-only
	* Support newlines as function arguments separators
	* Consider standardizing InvalidArgument offending value (.value ?)
	* ---
	* AWS::Instance -- make sure Anchor works as expected
	* "The README doesnâ€™t seem to have any simple syntax examples"
	* Consider somethig like data_strucure ~ [Capture("x"), 7 , "xx"]
	* Creating an AWS res not matching the Anchor - think
	* [urgent] get_c_errno() -> c::errno() or c_errno()
	* Implement Hash(Arr[Str]) for strings of form "key=value"?

	* MacOS (support being added): gc repeated allocation of very large block
	* MacOS (support being added): thread / fork - stuck (ec2din.ngs --allreg does not work)

[roadmap]

	* Phase 1 - the language (will be v0.1.0) [in progress]

		* Milestone "programming"

			* commands syntax

				* pipes
					* between external commands
					* between internal commands/functions
					* between internal and external commands

			* documentation [in progress]
				* { } in examples
				* Tutorial
					+ Build an app - decide which
				* All types documentation [in progress]
					* Link %RET types
				* All methods documentation [in progress]
				* Namespaced types and methods
				* Exit codes (see bootstrap.ngs and ngs.c)
				* Document that inner functions are declared local
				* Language reference, good example: https://golang.org/ref/spec [have most of it in ngslang]
				* Internals

			* files globbing
				consider special syntax such as <foo*bar>

		* Milestone "Mac OS support" (will be v0.2.0)

			+ Issue #15

		* Milestone "modules"
			* require() - add search path
			* require() - allow relative to caller require
				* compile() - get list of "local" variables?
				* load() - pass these "local" variables?
				* require() - pass new require() function that knows base path?
				* require() - pass __FILENAME and maybe __DIRNAME?
			* require() - support algorithm+signature: modules can theoretically be fetched over network
			* consider pre- and post- require() hooks
			* versioning
				+ maybe "require('mymod', '=2.0.1')" like "use" in perl
				+ maybe "require('mymod', '2.0.1'..'2.0.9')" similar to perl but range
				+ maybe specifying methods' signatures
				+ maybe methods should be versioned (like in .so files)
				+ how different module versions can run alongside?

		* Milestone "correct programming"

			* Standardize and explain naming convention: function/method, attribute/property.

			* Check ArgvMatcher - why ec2din.ngs does not have F main(..., *filters) ?

			* Namespace: "ns { F f() ... }" when f is global, namespace should only list f implementations defined in the namespace

			* Check map* and filter* functions naming consistency

			* /think of eliminating \\ in regexp literals/

			* c_stat() / stat() - return timestamps too

			* Replace Command#options with Hash (currently Arr)

			* FIX F f(optional=[], **attrs) {...}; f(name=name)

			* Fix - ngs: vm.c:2988: vm_run: Assertion `0=="Function does not have result value"' failed.
				F parse(s:Str, hints:Hash) {
					guard try hints['process'].command.argv[0] == 'find'
					# argv = hints['process'].command.argv
					# guard '-printf' not in argv
					# zero_sep = '-print0' in argv
					# if zero_sep then s.split('\0') else s.lines()
				}

			* Run exit_hook on CTRL+C (Throw exception)

			* Copy stderr to both stderr and to captured .stderr of the process

			* Bool(subtypes of Path) - kind of object (File, Dir, etc) must match to what's on disk

			* think about read/write vs read/echo methods naming

			* locals() - to complete globals()

			* Make sure attrs() are implemented on all possible types

			* OP_PUSH_INT - check limits of the number

			* Make comments that begin not at beginning of line work

			* Go over methods and make sure the method X types matrix is as full as possible

			* Partial application syntax
				* Make sure it works correct in expressions such as 10 + X * 2
				* Check that this works: f(X, *something, **some_kw)

			* Fix segfault in case of comments between cond clauses

			* Go over naming convention, making sure it's consistent and can be easily described in the manual

			* Binary safe strings
				* echo()
				* anywhere else?

			* Make sure not to leak FDs to processes that NGS runs
				+ See bash-4.3/execute_cmd.c, execute_in_subshell(), "fds_to_close"

			* Make sure STACK_DEPTH is correct everywhere and add tests

			* Implement missing local/upvar/global functionality and add tests

			* Make sure local/upvar cause exceptions when used at top-level code

			* Check what happens with misplaced local/upvar/global. Example: "F f(); global f" - function declaration causes f to be local

			* Replace all compile asserts with exceptions

			* Make sure (uncaught) exceptions go to stderr, not stdout

			* get rid of expose() ?
				+ Used in Stats
				+ Probably needs inheritance from builtin types

			* get rid of nuke_null() ?
				+ Not used in current stdlib
				+ Think of use cases justifying existence of nuke_null()

			* Low prioroty method MatchY[]

			* break / continue - disable when not in for

			* -pedantic

			* check integer overflows everywhere

			* compile
				* exceptions instead of asserts
				* disallow duplicate name for an argument

			* Fix inspect() and maybe others to display special symbols in strings as \x.. or alike

		* Milestone "threads"

			* pmap() - limit number of concurrent threads
			* rethink exceptions in threads
			* Make ENV and current directory thread-local but allow access to the global ones
			* Thread - Make pthread_attr_t accessible - get/set attributes
			* Thread local variables


	* Phase 2 - the shell [not started]

		See beginning of CLI implementation in previous NGS implementation:
		https://github.com/ilyash/ngs/blob/0ed8455efe851e3c5a275290a71c38c4e718f15c/cli.ngs

		* Milestone "screen layout"

			* Processes have their own area on the screen
				+ Truncated stdout/stderr
				+ Option to view full stdout/stderr in a pager

		* Milestone "semantic output"

			* Allow navigation on the screen, choosing operations from a menu for the objects
			* History of operations in context menu

	* Phase 3 - running code remotely

		* think about serialization and remote execution
			Probably pushing a bytecode (which we already have because the code was compiled)
			of a function that does not reference any upper-level variables, only locals and globals,
			maybe like this:

				RF myfunc(param1:Str, param2:Int, ...)

			RF means remote function and compiler checks for absence of upper-level variables references.

	* Phase 4 - assist developing

		* Local variables values in backtrace

		* tracing / debug

		* Add profiling info to ngs-debug
			+ memory allocations - where and how much
			+ opcodes stats
			+ method calls: scanned / not scanned (where in Arr the method was found)
			+ something about call sites?

	* Phase 5 - nice to have

		* Generated types documentation - list all parents, including transient

		* Sub-typing built-in types
			* Subclass Fun? For mapper for example to know which arguments to pass and what to construct
		* dig with data_struct['a', 10, *, ...]
			* Not sure about the star, maybe:
				~All
				X ~ All
		* Method to push a value into Arr if it's not there already
		* Function static variables
			F parse(s:Str, ...)
			?static? re = /myregex/
			guard s ~ re
			...
		* Possible syntax of Arr[ElementsType]
			F +(s:Str, a:Arr[Str]) { ... }
			instead of
			F +(s:Str, a:Arr) { guard a.all(is, Str); ... }
			don't see any use now but for completeness: Hash[KeysType, ValuesType]
		* Completion-safe marker in scripts + completion protocol
		* Consider Syntax for stripping last newline character in `cmd`
		* ASN1 parser
		* while/for should return a value?
		* Make each(), filter() and friends be able to work on endless lists
		* Consider having chunk() method as in Ruby
		* Delimited string type, such as PATH
			+ ds = DelimStr(ENV.PATH, ':'); ds.each(echo); ds.push('mypath_element')

		* f'file literals'

		* Consider IP and subnet literals of the form:
			1.2.3.4
			1.2.3.4/8

		* Consider shortcut syntax for ENV.MYVAR
			maybe %MYVAR ?

		* Consider shortcut syntax for ARGV[n]
			feels like less needed than ENV.MYVAR

		* Go over "TODO"s in all *.ngs files

		* Better start time

		* benchmarks - different tasks and languages
			+ There is one task benchmark in the Makefile (time-sum target)

		* RegExp
			* c_pcre_exec() - support options?
				PCRE_NOTBOL
				PCRE_NOTEOL
			* c_pcre_study()

		* modules / namespaces

		* implement parse() wherever possible (example: IPAddr, IPNet)
			+ allow auto-load missing implementations by extension and mime type

		* push/pop/shift/unshift for Hash
			To be consistent with Arr, which has all of these.
			The push is regular h[k] = v while others need additional vm functionality.

		* match, ematch - some way to get the match object?

			+ Check if match is used before doing this task. Currently there is not single usage of match construct.

			For example when RegExp is implmeneted in the code

				match mystring {
					/my_regex(.*)/ { my_code }
				}

			in my_code there should be access to the match object
			The syntax might be

				match mystring {
					/my_regex(.*)/ -> my_match { my_code }
				}

			or something alike, not sure yet.
			Maybe

				match my_string my_match {
					/my_regex(.*)/ { my_code }
				}

		* Destructuring. Automatically declare the variables local, as for does.
			+ Check whether really needed. Currently would fit OK in several places in stdlib when returning few values from C calls:
				result = c_something(...)
				... result[0] ...
				... result[1] ...
				...
			* [a,b=default,*some,c]
			* {'a','b':newvar,**some,'c'=default}
			+ Not sure about the syntax.
			+ Nested?
			+ Pattern matching like [a, *other1, 100, b, *other2] ?
				+ If yes, shouldn't the syntax be tilde (~) as for RegExp/Pfx/Sfx/... ?
			+ "xyz${myvar}www" = myvar syntax for regexes? ... for consistency.
			+ {[_, dst], **args} = h means also changing function arguments?

		* text templates (stdlib with builtin parse I guess)

		* Nfile - NGS version of Makefile

		* Compile time stack depth check?

		* yaml
			* parse
			* generate

		* K M G suffixes for numbers

		* arbitrary length integers

		* Dynamic file names for use cases such as logger
			logger = DynFile('/var/log/...%h')
			logger.echo('my log event')

		* (UI) Suggested commands ("Command ... did not find any results. Try ..." - CLI menu)

		* digits() function?

		* Channels - Chan type & syntax
			Initial syntax thoughts:

			1..10 | map(X*2) | sum | echo

			a = Chan()
			b = Chan()
			1..10 | group({A % 2 ==0 }, a, b)
			a | { echo("Even number $A") }
			b | sum | { echo("Sum of odd numbers: $A") }

			F map(in:Chan, out:Chan, mapper:Fun) {
				# while in(&item) ?
				while in -> item {
					# out(mapper(item)) ?
					out <- mapper(item)
				}
			}

		* Intern strings automatically (see Python algorithm)
			+ do profiling first

		* Optimize calling speed
			* Optimize obj_is_of_type()
			* Optimize vm_call matching algorithm
			* Optimize calling of unrelated methods
				+ such as F f(t:T1) and F f(t:T2) when T1 and T2 are unrelated types

		* Optimize so that namespace items access ("namespace::item") will not have Hash lookups

		* Consider augeas integration

[todo by priority]

	* doc
		* "local" and for() auto-local
			Describe the "local myvar" behavior and make it clear that
			for(i=0;i<n;i=i+1) will automatically declare i as local.
		* which exceptions are thrown where and their meanings
		* config()
		* other projects
			Explain how this project is different from other projects:
				+ There is a shell in Python, don't remember the name.
				( add more projects here )
	* solve the inheritance (also for "expose")
	* strings / mb_strings

[types]
	* Cloud / Compute / etc ?
	* Host
		+ ip?, public_ip, private_ip, other ips?
		+ image_id
		+ instance_id
		+ ssh_user()
		+ ssh_key()
		+ cloud type / endpoint / ... ?
	* HostsGroup
		+ refresh() or get()?
	* Widget
		+ Command
		+ Status
		+ Progress
		+ Pipes
	* HistoryEntry

[functions]
	* Path#relative_to(root)
