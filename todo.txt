**************************************************************
* THE CONTENTS OF THIS FILE ARE BEING MOVED TO GITHUB ISSUES *
**************************************************************

Note that this started as internal document so things here are unformed, not final and fluid.

[roadmap]

	* Phase 4 - assist developing

		* Local variables values in backtrace

		* tracing / debug

		* Add profiling info to ngs-debug
			+ memory allocations - where and how much
			+ opcodes stats
			+ method calls: scanned / not scanned (where in Arr the method was found)
			+ something about call sites?

	* Phase 5 - RESTful client

		* Introduce "FEATURES" global Hash to indicate supported features.

		* Milestone "curl" - integrate libcurl
			+ Make libcurl optional with compile time switch. If curl is compiled, add "curl": CURL_VERSION pair to FEATURES.
			+ Use namespace "curl"
			+ Low level functions in the namespace will be called "c_..." as all other low level c functions that are exposed to NGS language.
			+ Higher level functions and types also go into the "curl" namespace, these will be the interface used by the rest of NGS code.
			+ Integration: when read() sees a URL that starts with a scheme that libcurl supports, use libcurl to obtain the resource. Think about passing credentials, etc.
			+ Think about stream processing for large resources, where read() will not be appropriate
			+ Think about write() integration. Should it "POST"?

		* Milestone "YAML" - integrate YAML parser and generator
			+ Implementing YAML parser/generator in NGS will probably result very slow code, so a C library should probably be used
			+ Same as with libcurl, compile time switch and YAML_LIB_NAME: YAML_LIB_VERSION pair added to FEATURES, and probably "yaml": true pair in FEATURES.
			+ Look at JSON implementation
			+ Functions: encode_yaml, decode_yaml
			+ Integration: when decode() tries JSON, try YAML after that. If the hint says YAML, try just it.

		* Milestone RESTful client
			+ Think about this!
			+ Support RAML for
				+ Constructing queries
				+ Parsing and validating responses
				+ Think about how to integrate to the shell (completions, etc) when the shell is ready.

	* Phase 6 - nice to have

		* Think about structured log (and possible ELK and other integrations?)
			+ Environment variables for
				+ Directing output
				+ Adding arbitrary key-value pairs
				+ Directing output of other programs to logger too?
		* Iter improvements
			* If migrating lines() to Iter
				+ remember to implement ==(Iter, Arr), as used in tests:
					fqdn = 'example.com'
					fqdns = `mybin list`.lines()
					assert(fqdns == [fqdn])
				+ make sure join() works
			* Iter[PredRange] - should return new Iter
			* zip(Iter, Iter)
			* limit(Iter, n)
			* intersperse(Iter, ...)
		* Inheriting built-in types without performance penalty (probably eliminates the need for ArrLike and HashLike)
		* assert_proc(cp:CommandsPipeline, exit_code, stdout, stderr)
		* Calling
			* Predicates in parameters list?
			* Immediate values in parameters list
			* Consider OneOf type for nullable parameters: F myfunc(a:Int, b:OneOf(Int, Null))
				also think about more traditional approach: F myfunc(a:Int, b:Box[Int])
		* Data manipulation
			* Make Indexable: Arr, Str, Range - this might save some code
			* update(Hash, key, value) - update specified key only if exists ?
			* update(Arr[Hash], key, value / Fun) - update specified key only if exists ?
			* Implement Hash(Arr[Str]) for strings of form "key=value"?
			* Add fetch(Path), maybe read(Path). Now have read(File)
			* "str" / [str]
			* '.'(Iter, Str) -> AttrIter or alike maybe MappingIter or child
			* Maybe Iter(b:Box)
		* Syntax
			* Conditional presence of an element in an array
		* assert_file / assert_file_exists ?
		* assert_has_line / assert_has_line_with ?
		* make ResDef ArrLike for the resources?
		* make Res HashLike?
		* last(?, predicate)
		* Consider Ref(h:Hash, k) and Ref(a:Arr, idx:Int)
		* add avg()
		* Address resolution functions
		* Consider somethig like data_strucure ~ [Capture("x"), 7 , "xx"]

		* Sub-typing built-in types
			* Subclass Fun? For mapper for example to know which arguments to pass and what to construct
		* dig with data_struct['a', 10, *, ...]
			* Not sure about the star, maybe:
				~All
				X ~ All

		* Method to push a value into Arr if it's not there already
		* Function static variables
			F decode(s:Str, ...)
			?static? re = /myregex/
			guard s ~ re
			...
		* Possible syntax of Arr[ElementsType]
			F +(s:Str, a:Arr[Str]) { ... }
			instead of
			F +(s:Str, a:Arr) { guard a.all(is, Str); ... }
			don't see any use now but for completeness: Hash[KeysType, ValuesType]
		* Completion-safe marker in scripts + completion protocol
		* Consider Syntax for stripping last newline character in `cmd`
		* ASN1 parser
		* while/for should return a value?
		* Make each(), filter() and friends be able to work on endless lists
		* Consider having chunk() method as in Ruby
		* Delimited string type, such as PATH
			+ ds = DelimStr(ENV.PATH, ':'); ds.each(echo); ds.push('mypath_element')

		* f'file literals'

		* Consider IP and subnet literals of the form:
			1.2.3.4
			1.2.3.4/8

		* Consider shortcut syntax for ENV.MYVAR
			maybe %MYVAR ?

		* Consider shortcut syntax for ARGV[n]
			feels like less needed than ENV.MYVAR

		* Go over "TODO"s in all *.ngs files

		* Better start time

		* benchmarks - different tasks and languages
			+ There is one task benchmark in the Makefile (time-sum target)

		* RegExp
			* c_pcre_exec() - support options?
				PCRE_NOTBOL
				PCRE_NOTEOL
			* c_pcre_study()

		* modules / namespaces

		* implement decode() wherever possible (example: IPAddr, IPNet)
			+ allow auto-load missing implementations by extension and mime type

		* push/pop/shift/unshift for Hash
			To be consistent with Arr, which has all of these.
			The push is regular h[k] = v while others need additional vm functionality.

		* match, ematch - some way to get the match object?

			+ Check if match is used before doing this task. Currently there is not single usage of match construct.

			For example when RegExp is implmeneted in the code

				match mystring {
					/my_regex(.*)/ { my_code }
				}

			in my_code there should be access to the match object
			The syntax might be

				match mystring {
					/my_regex(.*)/ -> my_match { my_code }
				}

			or something alike, not sure yet.
			Maybe

				match my_string my_match {
					/my_regex(.*)/ { my_code }
				}

		* Destructuring. Automatically declare the variables local, as for does.
			+ Check whether really needed. Currently would fit OK in several places in stdlib when returning few values from C calls:
				result = c_something(...)
				... result[0] ...
				... result[1] ...
				...
			* [a,b=default,*some,c]
			* {'a','b':newvar,**some,'c'=default}
			+ Not sure about the syntax.
			+ Nested?
			+ Pattern matching like [a, *other1, 100, b, *other2] ?
				+ If yes, shouldn't the syntax be tilde (~) as for RegExp/Pfx/Sfx/... ?
			+ "xyz${myvar}www" = myvar syntax for regexes? ... for consistency.
			+ {[_, dst], **args} = h means also changing function arguments?

		* text templates (stdlib with builtin parse I guess)

		* Nfile - NGS version of Makefile

		* Compile time stack depth check?

		* yaml
			* parse
			* generate

		* K M G suffixes for numbers

		* Dynamic file names for use cases such as logger
			logger = DynFile('/var/log/...%h')
			logger.echo('my log event')

		* Channels - Chan type & syntax
			Initial syntax thoughts:

			1..10 | map(X*2) | sum | echo

			a = Chan()
			b = Chan()
			1..10 | group({A % 2 ==0 }, a, b)
			a | { echo("Even number $A") }
			b | sum | { echo("Sum of odd numbers: $A") }

			F map(in:Chan, out:Chan, mapper:Fun) {
				# while in(&item) ?
				while in -> item {
					# out(mapper(item)) ?
					out <- mapper(item)
				}
			}

		* Intern strings automatically (see Python algorithm)
			+ do profiling first

		* Optimize calling speed
			* Optimize obj_is_of_type()
			* Optimize vm_call matching algorithm
			* Optimize calling of unrelated methods
				+ such as F f(t:T1) and F f(t:T2) when T1 and T2 are unrelated types

		* Optimize so that namespace items access ("namespace::item") will not have Hash lookups

		* Consider augeas integration

		* Documentation
			* Comparison and link to https://github.com/RexOps/Rex

		* Conditional modification of value
			* Condition can be Fun/value
			* Replacement can be Fun/value
			Syntax for common pattern, somewhat analogous to only():
			newval = if my_cond then my_func(my_val) else my_val

		* Consider introducing AnyVal / AnyRef types. These do _not_ correspond to BasicType and NormalType.

[types]
	* Cloud / Compute / etc ?
	* Host
		+ ip?, public_ip, private_ip, other ips?
		+ image_id
		+ instance_id
		+ ssh_user()
		+ ssh_key()
		+ cloud type / endpoint / ... ?
	* HostsGroup
		+ refresh() or get()?
	* Widget
		+ Command
		+ Status
		+ Progress
		+ Pipes
	* HistoryEntry

[things to look at]

	* Look at ipython, books systems, bpython for ideas
	* Comparison to https://www.dmst.aueb.gr/dds/sw/dgsh/
	* Comparison to ipython
	* Take a look at Red programming language http://www.red-lang.org/p/documentation.html
	* Juju / conjure-up
